
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800ae48  0800ae48  0001ae48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e4  0800b3e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e4  0800b3e4  0001b3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3ec  0800b3ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  0800b5d0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800b5d0  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a891  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a3  00000000  00000000  0003aa9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0a7  00000000  00000000  00040c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2c0  00000000  00000000  0006bcff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111eaf  00000000  00000000  00085fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007160  00000000  00000000  00197ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae2c 	.word	0x0800ae2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800ae2c 	.word	0x0800ae2c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fe8d 	bl	8007cd4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_ADC1_Init+0xf0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <MX_ADC1_Init+0xf0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_ADC1_Init+0xf0>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_ADC1_Init+0xf0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_ADC1_Init+0xf0>)
 8001004:	2200      	movs	r2, #0
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_ADC1_Init+0xf0>)
 800100a:	2200      	movs	r2, #0
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_ADC1_Init+0xf0>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_ADC1_Init+0xf0>)
 8001018:	2200      	movs	r2, #0
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_ADC1_Init+0xf0>)
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001024:	4819      	ldr	r0, [pc, #100]	; (800108c <MX_ADC1_Init+0xf0>)
 8001026:	f002 f981 	bl	800332c <HAL_ADC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001030:	f000 fd78 	bl	8001b24 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001034:	2306      	movs	r3, #6
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_ADC1_Init+0xf0>)
 8001048:	f003 fdfc 	bl	8004c44 <HAL_ADCEx_MultiModeConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8001052:	f000 fd67 	bl	8001b24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_ADC1_Init+0xf4>)
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	237f      	movs	r3, #127	; 0x7f
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001066:	2304      	movs	r3, #4
 8001068:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_ADC1_Init+0xf0>)
 8001074:	f002 ffde 	bl	8004034 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800107e:	f000 fd51 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	; 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f8 	.word	0x200001f8
 8001090:	21800100 	.word	0x21800100

08001094 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fe17 	bl	8007cd4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010a8:	4a28      	ldr	r2, [pc, #160]	; (800114c <MX_ADC2_Init+0xb8>)
 80010aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_ADC2_Init+0xb4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_ADC2_Init+0xb4>)
 8001104:	f002 f912 	bl	800332c <HAL_ADC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800110e:	f000 fd09 	bl	8001b24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_ADC2_Init+0xbc>)
 8001114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001116:	2306      	movs	r3, #6
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111e:	237f      	movs	r3, #127	; 0x7f
 8001120:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001122:	2304      	movs	r3, #4
 8001124:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800112a:	463b      	mov	r3, r7
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_ADC2_Init+0xb4>)
 8001130:	f002 ff80 	bl	8004034 <HAL_ADC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800113a:	f000 fcf3 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000264 	.word	0x20000264
 800114c:	50000100 	.word	0x50000100
 8001150:	25b00200 	.word	0x25b00200

08001154 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	2220      	movs	r2, #32
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f006 fdb7 	bl	8007cd4 <memset>
  /* USER CODE BEGIN ADC5_Init 1 */

  /* USER CODE END ADC5_Init 1 */
  /** Common config
  */
  hadc5.Instance = ADC5;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <MX_ADC5_Init+0xc0>)
 8001168:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <MX_ADC5_Init+0xc4>)
 800116a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_ADC5_Init+0xc0>)
 800116e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001172:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <MX_ADC5_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_ADC5_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_ADC5_Init+0xc0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_ADC5_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_ADC5_Init+0xc0>)
 800118e:	2204      	movs	r2, #4
 8001190:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_ADC5_Init+0xc0>)
 8001194:	2200      	movs	r2, #0
 8001196:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_ADC5_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011d0:	f002 f8ac 	bl	800332c <HAL_ADC_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 80011da:	f000 fca3 	bl	8001b24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC5_Init+0xc8>)
 80011e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e2:	2306      	movs	r3, #6
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80011e6:	2307      	movs	r3, #7
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ea:	237f      	movs	r3, #127	; 0x7f
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ee:	2304      	movs	r3, #4
 80011f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_ADC5_Init+0xc0>)
 80011fc:	f002 ff1a 	bl	8004034 <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001206:	f000 fc8d 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200002d0 	.word	0x200002d0
 8001218:	50000600 	.word	0x50000600
 800121c:	90c00010 	.word	0x90c00010

08001220 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001240:	d135      	bne.n	80012ae <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_ADC_MspInit+0x140>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_ADC_MspInit+0x140>)
 800124a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800124c:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_ADC_MspInit+0x140>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10b      	bne.n	800126c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800125a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = CELL_1_VOLTAGE_Pin;
 8001284:	2304      	movs	r3, #4
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4834      	ldr	r0, [pc, #208]	; (8001368 <HAL_ADC_MspInit+0x148>)
 8001298:	f003 feec 	bl	8005074 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2012      	movs	r0, #18
 80012a2:	f003 feb2 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012a6:	2012      	movs	r0, #18
 80012a8:	f003 fec9 	bl	800503e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80012ac:	e053      	b.n	8001356 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2e      	ldr	r2, [pc, #184]	; (800136c <HAL_ADC_MspInit+0x14c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d135      	bne.n	8001324 <HAL_ADC_MspInit+0x104>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a28      	ldr	r2, [pc, #160]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_ADC_MspInit+0x140>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a25      	ldr	r2, [pc, #148]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_ADC_MspInit+0x144>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CELL_1_CURRENT_Pin;
 80012fa:	2308      	movs	r3, #8
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CELL_1_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <HAL_ADC_MspInit+0x148>)
 800130e:	f003 feb1 	bl	8005074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f003 fe77 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800131c:	2012      	movs	r0, #18
 800131e:	f003 fe8e 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 8001322:	e018      	b.n	8001356 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC5)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_ADC_MspInit+0x150>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d113      	bne.n	8001356 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_ADC_MspInit+0x144>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_ADC_MspInit+0x144>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	203e      	movs	r0, #62	; 0x3e
 800134c:	f003 fe5d 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 8001350:	203e      	movs	r0, #62	; 0x3e
 8001352:	f003 fe74 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	; 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000033c 	.word	0x2000033c
 8001364:	40021000 	.word	0x40021000
 8001368:	48000800 	.word	0x48000800
 800136c:	50000100 	.word	0x50000100
 8001370:	50000600 	.word	0x50000600

08001374 <events_initialize_debug_mod>:
#include "events.h"

debug_mod *events_initialize_debug_mod(char *tag, GPIO_TypeDef *Port, uint16_t Probe_1, uint16_t Probe_2, uint16_t Probe_3)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	80fb      	strh	r3, [r7, #6]
 8001386:	4613      	mov	r3, r2
 8001388:	80bb      	strh	r3, [r7, #4]
	debug_mod *dbg_struct = (debug_mod *)malloc(sizeof(debug_mod));
 800138a:	2010      	movs	r0, #16
 800138c:	f006 fc9a 	bl	8007cc4 <malloc>
 8001390:	4603      	mov	r3, r0
 8001392:	617b      	str	r3, [r7, #20]

	if (dbg_struct == NULL)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <events_initialize_debug_mod+0x2a>
		return (NULL);
 800139a:	2300      	movs	r3, #0
 800139c:	e033      	b.n	8001406 <events_initialize_debug_mod+0x92>

	dbg_struct->tag = tag;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]

	printf("Initializing %s:\n", dbg_struct->tag);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4819      	ldr	r0, [pc, #100]	; (8001410 <events_initialize_debug_mod+0x9c>)
 80013ac:	f007 f9e4 	bl	8008778 <iprintf>

	printf("\t- ");
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <events_initialize_debug_mod+0xa0>)
 80013b2:	f007 f9e1 	bl	8008778 <iprintf>
	dbg_struct->probe_1 = events_initialize_digital_ios("probe 1", Port, Probe_1, 0);
 80013b6:	88fa      	ldrh	r2, [r7, #6]
 80013b8:	2300      	movs	r3, #0
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <events_initialize_debug_mod+0xa4>)
 80013be:	f000 f831 	bl	8001424 <events_initialize_digital_ios>
 80013c2:	4602      	mov	r2, r0
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	605a      	str	r2, [r3, #4]

	printf("\t- ");
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <events_initialize_debug_mod+0xa0>)
 80013ca:	f007 f9d5 	bl	8008778 <iprintf>
	dbg_struct->probe_2 = events_initialize_digital_ios("probe 2", Port, Probe_2, 0);
 80013ce:	88ba      	ldrh	r2, [r7, #4]
 80013d0:	2300      	movs	r3, #0
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	4811      	ldr	r0, [pc, #68]	; (800141c <events_initialize_debug_mod+0xa8>)
 80013d6:	f000 f825 	bl	8001424 <events_initialize_digital_ios>
 80013da:	4602      	mov	r2, r0
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	609a      	str	r2, [r3, #8]

	printf("\t- ");
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <events_initialize_debug_mod+0xa0>)
 80013e2:	f007 f9c9 	bl	8008778 <iprintf>
	dbg_struct->probe_3 = events_initialize_digital_ios("probe 3", Port, Probe_3, 0);
 80013e6:	8c3a      	ldrh	r2, [r7, #32]
 80013e8:	2300      	movs	r3, #0
 80013ea:	68b9      	ldr	r1, [r7, #8]
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <events_initialize_debug_mod+0xac>)
 80013ee:	f000 f819 	bl	8001424 <events_initialize_digital_ios>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	60da      	str	r2, [r3, #12]

	events_blink_debug_module(dbg_struct);
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f000 f841 	bl	8001480 <events_blink_debug_module>

	printf("\n");
 80013fe:	200a      	movs	r0, #10
 8001400:	f007 f9d2 	bl	80087a8 <putchar>

	return(dbg_struct);
 8001404:	697b      	ldr	r3, [r7, #20]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0800ae48 	.word	0x0800ae48
 8001414:	0800ae5c 	.word	0x0800ae5c
 8001418:	0800ae60 	.word	0x0800ae60
 800141c:	0800ae68 	.word	0x0800ae68
 8001420:	0800ae70 	.word	0x0800ae70

08001424 <events_initialize_digital_ios>:

digital_IOs *events_initialize_digital_ios(char *tag, GPIO_TypeDef *Port, uint16_t Pin, uint8_t invert_output)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	460b      	mov	r3, r1
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4613      	mov	r3, r2
 8001438:	717b      	strb	r3, [r7, #5]
	digital_IOs *dig_ios_struct = (digital_IOs *)malloc(sizeof(digital_IOs));
 800143a:	200c      	movs	r0, #12
 800143c:	f006 fc42 	bl	8007cc4 <malloc>
 8001440:	4603      	mov	r3, r0
 8001442:	617b      	str	r3, [r7, #20]

	if (dig_ios_struct == NULL)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <events_initialize_digital_ios+0x2a>
		return (NULL);
 800144a:	2300      	movs	r3, #0
 800144c:	e012      	b.n	8001474 <events_initialize_digital_ios+0x50>

	dig_ios_struct->tag = tag;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]

	dig_ios_struct->Port = Port;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	605a      	str	r2, [r3, #4]

	dig_ios_struct->Pin = Pin;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	811a      	strh	r2, [r3, #8]

	dig_ios_struct->invert = invert_output;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	797a      	ldrb	r2, [r7, #5]
 8001464:	729a      	strb	r2, [r3, #10]

	printf("Initializing %s\n", dig_ios_struct->tag);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <events_initialize_digital_ios+0x58>)
 800146e:	f007 f983 	bl	8008778 <iprintf>

	return (dig_ios_struct);
 8001472:	697b      	ldr	r3, [r7, #20]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800ae78 	.word	0x0800ae78

08001480 <events_blink_debug_module>:

void events_blink_debug_module(debug_mod *dbg)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(dbg->probe_1->Port, dbg->probe_1->Pin);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	891b      	ldrh	r3, [r3, #8]
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f003 ff86 	bl	80053a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_2->Port, dbg->probe_2->Pin);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	891b      	ldrh	r3, [r3, #8]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f003 ff7c 	bl	80053a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_3->Port, dbg->probe_3->Pin);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	891b      	ldrh	r3, [r3, #8]
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f003 ff72 	bl	80053a8 <HAL_GPIO_TogglePin>

	HAL_Delay(2500);
 80014c4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80014c8:	f001 fca8 	bl	8002e1c <HAL_Delay>

	HAL_GPIO_TogglePin(dbg->probe_1->Port, dbg->probe_1->Pin);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	891b      	ldrh	r3, [r3, #8]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f003 ff64 	bl	80053a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_2->Port, dbg->probe_2->Pin);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	891b      	ldrh	r3, [r3, #8]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f003 ff5a 	bl	80053a8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(dbg->probe_3->Port, dbg->probe_3->Pin);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	891b      	ldrh	r3, [r3, #8]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f003 ff50 	bl	80053a8 <HAL_GPIO_TogglePin>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <events_change_state>:

void events_change_state(photovoltaic *ptr, uint8_t event)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	if (is_event_active(ptr->events_handler, event))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f81f 	bl	800156a <is_event_active>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00e      	beq.n	8001550 <events_change_state+0x40>
		ptr->events_handler &= ~event;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800153e:	43db      	mvns	r3, r3
 8001540:	b25b      	sxtb	r3, r3
 8001542:	4013      	ands	r3, r2
 8001544:	b25b      	sxtb	r3, r3
 8001546:	b2da      	uxtb	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	else
		ptr->events_handler |= event;
}
 800154e:	e008      	b.n	8001562 <events_change_state+0x52>
		ptr->events_handler |= event;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	4313      	orrs	r3, r2
 800155a:	b2da      	uxtb	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <is_event_active>:

bool is_event_active(uint8_t handler, uint8_t event_flag)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	460a      	mov	r2, r1
 8001574:	71fb      	strb	r3, [r7, #7]
 8001576:	4613      	mov	r3, r2
 8001578:	71bb      	strb	r3, [r7, #6]
	if ((handler & event_flag) == event_flag)
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	4013      	ands	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	79ba      	ldrb	r2, [r7, #6]
 8001584:	429a      	cmp	r2, r3
 8001586:	d101      	bne.n	800158c <is_event_active+0x22>
		return (true);
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <is_event_active+0x24>

	return (false);
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <events_handler>:

void events_handler(photovoltaic *ptr)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	// Seccionamento do circuito
	if (is_event_active(ptr->events_handler, EVENT_USER_BREAK)) {
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffdd 	bl	800156a <is_event_active>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <events_handler+0x2e>
		events_output_relays(ptr, OUTPUT_LOW);
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f870 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x1);
 80015be:	2101      	movs	r1, #1
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8cf 	bl	8001764 <events_output_debugger>
	// Nenhum evento identificado
	else {
		events_output_relays(ptr, OUTPUT_HIGH);
		events_output_debugger(ptr, NO_EVENT);
	}
}
 80015c6:	e066      	b.n	8001696 <events_handler+0xfc>
	else if (is_event_active(ptr->events_handler, EVENT_OVERVOLTAGE)) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ffca 	bl	800156a <is_event_active>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <events_handler+0x54>
		events_output_relays(ptr, OUTPUT_LOW);
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f85d 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x2);
 80015e4:	2102      	movs	r1, #2
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8bc 	bl	8001764 <events_output_debugger>
}
 80015ec:	e053      	b.n	8001696 <events_handler+0xfc>
	else if (is_event_active(ptr->events_handler, EVENT_OVERCURRENT)) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f4:	2104      	movs	r1, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffb7 	bl	800156a <is_event_active>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <events_handler+0x7a>
		events_output_relays(ptr, OUTPUT_LOW);
 8001602:	2100      	movs	r1, #0
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f84a 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x3);
 800160a:	2103      	movs	r1, #3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8a9 	bl	8001764 <events_output_debugger>
}
 8001612:	e040      	b.n	8001696 <events_handler+0xfc>
	else if (is_event_active(ptr->events_handler, EVENT_UNDERVOLTAGE)) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800161a:	2108      	movs	r1, #8
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ffa4 	bl	800156a <is_event_active>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <events_handler+0xa0>
		events_output_relays(ptr, OUTPUT_LOW);
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f837 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x4);
 8001630:	2104      	movs	r1, #4
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f896 	bl	8001764 <events_output_debugger>
}
 8001638:	e02d      	b.n	8001696 <events_handler+0xfc>
	else if (is_event_active(ptr->events_handler, EVENT_OVERHEAT)) {
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001640:	2110      	movs	r1, #16
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff91 	bl	800156a <is_event_active>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <events_handler+0xc6>
		events_output_relays(ptr, OUTPUT_HIGH);
 800164e:	2101      	movs	r1, #1
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f824 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x5);
 8001656:	2105      	movs	r1, #5
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f883 	bl	8001764 <events_output_debugger>
}
 800165e:	e01a      	b.n	8001696 <events_handler+0xfc>
	else if (is_event_active(ptr->events_handler, EVENT_DPS_LIFESPAN)) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001666:	2120      	movs	r1, #32
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff7e 	bl	800156a <is_event_active>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <events_handler+0xec>
		events_output_relays(ptr, OUTPUT_LOW);
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f811 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, 0x6);
 800167c:	2106      	movs	r1, #6
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f870 	bl	8001764 <events_output_debugger>
}
 8001684:	e007      	b.n	8001696 <events_handler+0xfc>
		events_output_relays(ptr, OUTPUT_HIGH);
 8001686:	2101      	movs	r1, #1
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f808 	bl	800169e <events_output_relays>
		events_output_debugger(ptr, NO_EVENT);
 800168e:	2100      	movs	r1, #0
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f867 	bl	8001764 <events_output_debugger>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <events_output_relays>:

void events_output_relays(photovoltaic *ptr, int state)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	// Relé 1
	if (ptr->relay_1->invert)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	7a9b      	ldrb	r3, [r3, #10]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00d      	beq.n	80016ce <events_output_relays+0x30>
		HAL_GPIO_WritePin(ptr->relay_1->Port, ptr->relay_1->Pin, ~state);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	6858      	ldr	r0, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	8919      	ldrh	r1, [r3, #8]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	f003 fe56 	bl	8005378 <HAL_GPIO_WritePin>
 80016cc:	e00a      	b.n	80016e4 <events_output_relays+0x46>
	else
		HAL_GPIO_WritePin(ptr->relay_1->Port, ptr->relay_1->Pin, state);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	6858      	ldr	r0, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	891b      	ldrh	r3, [r3, #8]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f003 fe4a 	bl	8005378 <HAL_GPIO_WritePin>

	// Relé 2
	if (ptr->relay_2->invert)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	7a9b      	ldrb	r3, [r3, #10]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <events_output_relays+0x6c>
		HAL_GPIO_WritePin(ptr->relay_2->Port, ptr->relay_2->Pin, ~state);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	6858      	ldr	r0, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	8919      	ldrh	r1, [r3, #8]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	f003 fe38 	bl	8005378 <HAL_GPIO_WritePin>
 8001708:	e00a      	b.n	8001720 <events_output_relays+0x82>
	else
		HAL_GPIO_WritePin(ptr->relay_2->Port, ptr->relay_2->Pin, state);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	6858      	ldr	r0, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	891b      	ldrh	r3, [r3, #8]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f003 fe2c 	bl	8005378 <HAL_GPIO_WritePin>

	// Status da saída
	if (ptr->status->invert)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	7a9b      	ldrb	r3, [r3, #10]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <events_output_relays+0xa8>
		HAL_GPIO_WritePin(ptr->status->Port, ptr->status->Pin, ~state);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	6858      	ldr	r0, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	8919      	ldrh	r1, [r3, #8]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f003 fe1a 	bl	8005378 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(ptr->status->Port, ptr->status->Pin, state);

}
 8001744:	e00a      	b.n	800175c <events_output_relays+0xbe>
		HAL_GPIO_WritePin(ptr->status->Port, ptr->status->Pin, state);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	6858      	ldr	r0, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	891b      	ldrh	r3, [r3, #8]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f003 fe0e 	bl	8005378 <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <events_output_debugger>:

void events_output_debugger(photovoltaic *ptr, int state)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ptr->dbg_mod->probe_3->Port, ptr->dbg_mod->probe_3->Pin, 0x1 & state);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	6858      	ldr	r0, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	8919      	ldrh	r1, [r3, #8]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	f003 fdf5 	bl	8005378 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ptr->dbg_mod->probe_2->Port, ptr->dbg_mod->probe_2->Pin, 0x2 & state);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	6858      	ldr	r0, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	8919      	ldrh	r1, [r3, #8]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	f003 fde5 	bl	8005378 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ptr->dbg_mod->probe_1->Port, ptr->dbg_mod->probe_1->Pin, 0x4 & state);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	6858      	ldr	r0, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	8919      	ldrh	r1, [r3, #8]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	f003 fdd5 	bl	8005378 <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <MX_GPIO_Init+0x150>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <MX_GPIO_Init+0x150>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017fa:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <MX_GPIO_Init+0x150>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001806:	4b48      	ldr	r3, [pc, #288]	; (8001928 <MX_GPIO_Init+0x150>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a47      	ldr	r2, [pc, #284]	; (8001928 <MX_GPIO_Init+0x150>)
 800180c:	f043 0320 	orr.w	r3, r3, #32
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b45      	ldr	r3, [pc, #276]	; (8001928 <MX_GPIO_Init+0x150>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b42      	ldr	r3, [pc, #264]	; (8001928 <MX_GPIO_Init+0x150>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a41      	ldr	r2, [pc, #260]	; (8001928 <MX_GPIO_Init+0x150>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <MX_GPIO_Init+0x150>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <MX_GPIO_Init+0x150>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <MX_GPIO_Init+0x150>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <MX_GPIO_Init+0x150>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL_1_OUT_NEG_GPIO_Port, CELL_1_OUT_NEG_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2101      	movs	r1, #1
 8001852:	4836      	ldr	r0, [pc, #216]	; (800192c <MX_GPIO_Init+0x154>)
 8001854:	f003 fd90 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 7108 	mov.w	r1, #544	; 0x220
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f003 fd89 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800186c:	4830      	ldr	r0, [pc, #192]	; (8001930 <MX_GPIO_Init+0x158>)
 800186e:	f003 fd83 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_BTN_Pin;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <MX_GPIO_Init+0x15c>)
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_BTN_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4829      	ldr	r0, [pc, #164]	; (800192c <MX_GPIO_Init+0x154>)
 8001888:	f003 fbf4 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_NEG_Pin;
 800188c:	2301      	movs	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CELL_1_OUT_NEG_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4822      	ldr	r0, [pc, #136]	; (800192c <MX_GPIO_Init+0x154>)
 80018a4:	f003 fbe6 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_DPS_Pin;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <MX_GPIO_Init+0x160>)
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_DPS_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f003 fbd9 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin;
 80018c2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018de:	f003 fbc9 	bl	8005074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin;
 80018e2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_GPIO_Init+0x158>)
 80018fc:	f003 fbba 	bl	8005074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2006      	movs	r0, #6
 8001906:	f003 fb80 	bl	800500a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800190a:	2006      	movs	r0, #6
 800190c:	f003 fb97 	bl	800503e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2028      	movs	r0, #40	; 0x28
 8001916:	f003 fb78 	bl	800500a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800191a:	2028      	movs	r0, #40	; 0x28
 800191c:	f003 fb8f 	bl	800503e <HAL_NVIC_EnableIRQ>

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	48000800 	.word	0x48000800
 8001930:	48000400 	.word	0x48000400
 8001934:	10110000 	.word	0x10110000
 8001938:	10310000 	.word	0x10310000

0800193c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
	objects_def_exti_gpio(GPIO_Pin);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fe2b 	bl	80025a4 <objects_def_exti_gpio>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800195e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001962:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d013      	beq.n	8001996 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800196e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001972:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001976:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800197e:	e000      	b.n	8001982 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001980:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001982:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f9      	beq.n	8001980 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800198c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<len ; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e009      	b.n	80019ca <_write+0x26>
		ITM_SendChar((*ptr++));
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	60ba      	str	r2, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffc9 	bl	8001956 <ITM_SendChar>
	for (int i=0 ; i<len ; i++)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dbf1      	blt.n	80019b6 <_write+0x12>

	return (len);
 80019d2:	687b      	ldr	r3, [r7, #4]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e0:	f001 f9ab 	bl	8002d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e4:	f000 f82e 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e8:	f7ff fef6 	bl	80017d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80019ec:	f000 ff58 	bl	80028a0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80019f0:	f7ff fad4 	bl	8000f9c <MX_ADC1_Init>
  MX_ADC2_Init();
 80019f4:	f7ff fb4e 	bl	8001094 <MX_ADC2_Init>
  MX_ADC5_Init();
 80019f8:	f7ff fbac 	bl	8001154 <MX_ADC5_Init>
  MX_TIM2_Init();
 80019fc:	f000 ffa4 	bl	8002948 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001a00:	f001 f8c2 	bl	8002b88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("-- Starting System's Configuration\n\n");
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <main+0x54>)
 8001a06:	f006 ff53 	bl	80088b0 <puts>

  objects_def_init();
 8001a0a:	f000 fd47 	bl	800249c <objects_def_init>

  HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 8001a0e:	217f      	movs	r1, #127	; 0x7f
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <main+0x58>)
 8001a12:	f003 f863 	bl	8004adc <HAL_ADCEx_Calibration_Start>

  HAL_TIM_Base_Start_IT(&htim1);
 8001a16:	4808      	ldr	r0, [pc, #32]	; (8001a38 <main+0x5c>)
 8001a18:	f004 fd86 	bl	8006528 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <main+0x60>)
 8001a1e:	f004 fd83 	bl	8006528 <HAL_TIM_Base_Start_IT>

  printf("-- End of System's Configuration\n");
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <main+0x64>)
 8001a24:	f006 ff44 	bl	80088b0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	objects_def_loop();
 8001a28:	f000 fddc 	bl	80025e4 <objects_def_loop>
 8001a2c:	e7fc      	b.n	8001a28 <main+0x4c>
 8001a2e:	bf00      	nop
 8001a30:	0800ae8c 	.word	0x0800ae8c
 8001a34:	200002d0 	.word	0x200002d0
 8001a38:	2000035c 	.word	0x2000035c
 8001a3c:	200003a8 	.word	0x200003a8
 8001a40:	0800aeb0 	.word	0x0800aeb0

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0a8      	sub	sp, #160	; 0xa0
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a4e:	2238      	movs	r2, #56	; 0x38
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f006 f93e 	bl	8007cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2254      	movs	r2, #84	; 0x54
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f006 f930 	bl	8007cd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a78:	f003 fcc8 	bl	800540c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a84:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 fd5b 	bl	8005574 <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ac4:	f000 f82e 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2303      	movs	r3, #3
 8001ace:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001adc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 f85e 	bl	8005ba4 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001aee:	f000 f819 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC12
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <SystemClock_Config+0xdc>)
 8001af4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001afa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 fa67 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b14:	f000 f806 	bl	8001b24 <Error_Handler>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	37a0      	adds	r7, #160	; 0xa0
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	00018004 	.word	0x00018004

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <meas_initialize_cell>:
#include "meas.h"

photovoltaic *meas_initialize_cell(char *tag, ADC_HandleTypeDef *ADC_master, ADC_HandleTypeDef *ADC_slave, digital_IOs *relay_1, digital_IOs *relay_2, digital_IOs *LED, debug_mod *dbg_mod)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	photovoltaic *ph_struct = (photovoltaic *)malloc(sizeof(photovoltaic));
 8001b3e:	203c      	movs	r0, #60	; 0x3c
 8001b40:	f006 f8c0 	bl	8007cc4 <malloc>
 8001b44:	4603      	mov	r3, r0
 8001b46:	617b      	str	r3, [r7, #20]

	if (ph_struct == NULL)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <meas_initialize_cell+0x22>
		return (NULL);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e049      	b.n	8001be6 <meas_initialize_cell+0xb6>

	ph_struct->tag = tag;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	601a      	str	r2, [r3, #0]

	printf("Initializing %s:\n", ph_struct->tag);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4824      	ldr	r0, [pc, #144]	; (8001bf0 <meas_initialize_cell+0xc0>)
 8001b60:	f006 fe0a 	bl	8008778 <iprintf>

	ph_struct->master = meas_initialize_rms_objects("Voltage", ADC_master);
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <meas_initialize_cell+0xc4>)
 8001b68:	f000 f84c 	bl	8001c04 <meas_initialize_rms_objects>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	609a      	str	r2, [r3, #8]
	ph_struct->slave  = meas_initialize_rms_objects("Current", ADC_slave);
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4820      	ldr	r0, [pc, #128]	; (8001bf8 <meas_initialize_cell+0xc8>)
 8001b76:	f000 f845 	bl	8001c04 <meas_initialize_rms_objects>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	60da      	str	r2, [r3, #12]

	ph_struct->power_energy = meas_initialize_power_and_energy_objects();
 8001b80:	f000 f878 	bl	8001c74 <meas_initialize_power_and_energy_objects>
 8001b84:	4602      	mov	r2, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	611a      	str	r2, [r3, #16]

	ph_struct->relay_1 = relay_1;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	615a      	str	r2, [r3, #20]
	ph_struct->relay_2 = relay_2;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	6a3a      	ldr	r2, [r7, #32]
 8001b94:	619a      	str	r2, [r3, #24]
	ph_struct->status  = LED;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	61da      	str	r2, [r3, #28]

	ph_struct->dbg_mod = dbg_mod;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba0:	621a      	str	r2, [r3, #32]
	printf("\t- Debugger attached\n\n");
 8001ba2:	4816      	ldr	r0, [pc, #88]	; (8001bfc <meas_initialize_cell+0xcc>)
 8001ba4:	f006 fe84 	bl	80088b0 <puts>

	ph_struct->new_sample = false;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2200      	movs	r2, #0
 8001bac:	711a      	strb	r2, [r3, #4]
	ph_struct->events_handler = 0;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	ph_struct->voltage = 0.0;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
	ph_struct->current = 0.0;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
	ph_struct->power   = 0.0;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
	ph_struct->energy  = 0.0;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30

	ph_struct->temperature = TEMP_SENSOR_TREF;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <meas_initialize_cell+0xd0>)
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34

	ph_struct->send_uart = 0;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return(ph_struct);
 8001be4:	697b      	ldr	r3, [r7, #20]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800aed4 	.word	0x0800aed4
 8001bf4:	0800aee8 	.word	0x0800aee8
 8001bf8:	0800aef0 	.word	0x0800aef0
 8001bfc:	0800aef8 	.word	0x0800aef8
 8001c00:	41f00000 	.word	0x41f00000

08001c04 <meas_initialize_rms_objects>:

rms_measurement *meas_initialize_rms_objects(char *tag, ADC_HandleTypeDef *ADC)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	rms_measurement *rms_struct = (rms_measurement *)malloc(sizeof(rms_measurement));
 8001c0e:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8001c12:	f006 f857 	bl	8007cc4 <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	60fb      	str	r3, [r7, #12]

	if (rms_struct == NULL)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <meas_initialize_rms_objects+0x20>
		return (NULL);
 8001c20:	2300      	movs	r3, #0
 8001c22:	e021      	b.n	8001c68 <meas_initialize_rms_objects+0x64>

	rms_struct->ADC = ADC;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	601a      	str	r2, [r3, #0]

	rms_struct->frst_level_index = 0;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
	rms_struct->scnd_level_index = 0;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
	rms_struct->thrd_level_index = 0;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
	rms_struct->frth_level_index = 0;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
	rms_struct->ffth_level_index = 0;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc

	HAL_ADCEx_Calibration_Start(rms_struct->ADC, ADC_SINGLE_ENDED);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	217f      	movs	r1, #127	; 0x7f
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 ff3f 	bl	8004adc <HAL_ADCEx_Calibration_Start>

	printf("\t- %s measurement initialized\n", tag);
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <meas_initialize_rms_objects+0x6c>)
 8001c62:	f006 fd89 	bl	8008778 <iprintf>

	return (rms_struct);
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	0800af10 	.word	0x0800af10

08001c74 <meas_initialize_power_and_energy_objects>:

power_measurement *meas_initialize_power_and_energy_objects(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	power_measurement *pe_struct = (power_measurement *)malloc(sizeof(power_measurement));
 8001c7a:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8001c7e:	f006 f821 	bl	8007cc4 <malloc>
 8001c82:	4603      	mov	r3, r0
 8001c84:	607b      	str	r3, [r7, #4]

	if (pe_struct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <meas_initialize_power_and_energy_objects+0x1c>
		return (NULL);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e00f      	b.n	8001cb0 <meas_initialize_power_and_energy_objects+0x3c>

	pe_struct->frst_level_index = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	pe_struct->scnd_level_index = 0;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	pe_struct->thrd_level_index = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a

	printf("\t- Power & Energy measurement initialized\n");
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <meas_initialize_power_and_energy_objects+0x44>)
 8001caa:	f006 fe01 	bl	80088b0 <puts>

	return (pe_struct);
 8001cae:	687b      	ldr	r3, [r7, #4]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800af30 	.word	0x0800af30
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <meas_sample_voltage_and_current>:

void meas_sample_voltage_and_current(photovoltaic *ptr)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	// Obtém a leitura simultânea dos módulos ADC master e slave
	uint32_t raw  = HAL_ADCEx_MultiModeGetValue(ptr->master->ADC);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 ff66 	bl	8004ba0 <HAL_ADCEx_MultiModeGetValue>
 8001cd4:	60f8      	str	r0, [r7, #12]

	// Extrai os dados do módulo ADC master (16 bits LSB), em Volts
	ptr->master->frst_level[ptr->master->frst_level_index++] = (float)(raw & LSB_WORD_BIT_MASK) * ADC_GAIN;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce2:	ee17 0a90 	vmov	r0, s15
 8001ce6:	f7fe fc57 	bl	8000598 <__aeabi_f2d>
 8001cea:	a323      	add	r3, pc, #140	; (adr r3, 8001d78 <meas_sample_voltage_and_current+0xb8>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fcaa 	bl	8000648 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689c      	ldr	r4, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f893 26d8 	ldrb.w	r2, [r3, #1752]	; 0x6d8
 8001d08:	1c55      	adds	r5, r2, #1
 8001d0a:	b2ed      	uxtb	r5, r5
 8001d0c:	f883 56d8 	strb.w	r5, [r3, #1752]	; 0x6d8
 8001d10:	4615      	mov	r5, r2
 8001d12:	f7fe ff71 	bl	8000bf8 <__aeabi_d2f>
 8001d16:	4602      	mov	r2, r0
 8001d18:	00ab      	lsls	r3, r5, #2
 8001d1a:	4423      	add	r3, r4
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]

	// Extrai os dados do módulo ADC slave  (16 bits MSB), em Volts
	ptr->slave->frst_level[ptr->slave->frst_level_index++]   = (float)(raw >> HALF_WORD_LENGTH) * ADC_GAIN;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	0c1b      	lsrs	r3, r3, #16
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2c:	ee17 0a90 	vmov	r0, s15
 8001d30:	f7fe fc32 	bl	8000598 <__aeabi_f2d>
 8001d34:	a310      	add	r3, pc, #64	; (adr r3, 8001d78 <meas_sample_voltage_and_current+0xb8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc85 	bl	8000648 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68dc      	ldr	r4, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f893 26d8 	ldrb.w	r2, [r3, #1752]	; 0x6d8
 8001d52:	1c55      	adds	r5, r2, #1
 8001d54:	b2ed      	uxtb	r5, r5
 8001d56:	f883 56d8 	strb.w	r5, [r3, #1752]	; 0x6d8
 8001d5a:	4615      	mov	r5, r2
 8001d5c:	f7fe ff4c 	bl	8000bf8 <__aeabi_d2f>
 8001d60:	4602      	mov	r2, r0
 8001d62:	00ab      	lsls	r3, r5, #2
 8001d64:	4423      	add	r3, r4
 8001d66:	3304      	adds	r3, #4
 8001d68:	601a      	str	r2, [r3, #0]

	ptr->new_sample = true;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	711a      	strb	r2, [r3, #4]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bdb0      	pop	{r4, r5, r7, pc}
 8001d78:	e734d9b4 	.word	0xe734d9b4
 8001d7c:	3f4a680c 	.word	0x3f4a680c

08001d80 <meas_objects_handler>:

void meas_objects_handler(photovoltaic *ptr, float temperature)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	ed87 0a00 	vstr	s0, [r7]
	if (ptr->new_sample)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d055      	beq.n	8001e40 <meas_objects_handler+0xc0>
	{
		int thrd_index = ptr->master->thrd_level_index;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 8001d9c:	60fb      	str	r3, [r7, #12]

		meas_aggregation_handler(ptr->master, VOLTAGE_GAIN_A, VOLTAGE_GAIN_B);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8001e48 <meas_objects_handler+0xc8>
 8001da6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8001e4c <meas_objects_handler+0xcc>
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f854 	bl	8001e58 <meas_aggregation_handler>
		meas_aggregation_handler(ptr->slave,  CURRENT_GAIN_A, CURRENT_GAIN_B);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001e50 <meas_objects_handler+0xd0>
 8001db8:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001e54 <meas_objects_handler+0xd4>
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f84b 	bl	8001e58 <meas_aggregation_handler>

		// Verifica se uma nova posição do 3º vetor foi registrada para cálculo da potência
		if (thrd_index != ptr->master->thrd_level_index)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d030      	beq.n	8001e34 <meas_objects_handler+0xb4>
		{
			meas_compute_power_and_energy(ptr, thrd_index);
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f9e9 	bl	80021ac <meas_compute_power_and_energy>

			meas_verify_voltage_events(&ptr->events_handler, ptr->master->thrd_level[thrd_index]);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	33d0      	adds	r3, #208	; 0xd0
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	4608      	mov	r0, r1
 8001df6:	f000 f917 	bl	8002028 <meas_verify_voltage_events>
			meas_verify_current_events(&ptr->events_handler, ptr->slave->thrd_level[thrd_index]);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	33d0      	adds	r3, #208	; 0xd0
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	eeb0 0a67 	vmov.f32	s0, s15
 8001e14:	4608      	mov	r0, r1
 8001e16:	f000 f987 	bl	8002128 <meas_verify_current_events>

			meas_verify_temperature_events(&ptr->events_handler, temperature);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	ed97 0a00 	vldr	s0, [r7]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 faf4 	bl	8002410 <meas_verify_temperature_events>

			meas_update_cell_values(ptr, thrd_index, temperature);
 8001e28:	ed97 0a00 	vldr	s0, [r7]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa46 	bl	80022c0 <meas_update_cell_values>
		}

		events_handler(ptr);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fbb0 	bl	800159a <events_handler>

		ptr->new_sample = false;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	711a      	strb	r2, [r3, #4]
	}
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40024745 	.word	0x40024745
 8001e4c:	4324199a 	.word	0x4324199a
 8001e50:	3c8e8a72 	.word	0x3c8e8a72
 8001e54:	40dcd9e8 	.word	0x40dcd9e8

08001e58 <meas_aggregation_handler>:

void meas_aggregation_handler(rms_measurement *ptr, float gain_a, float gain_b)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e64:	edc7 0a01 	vstr	s1, [r7, #4]
	if (ptr->frst_level_index == RMS_FRST_LEVEL_LENGTH)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 36d8 	ldrb.w	r3, [r3, #1752]	; 0x6d8
 8001e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8001e70:	f040 808f 	bne.w	8001f92 <meas_aggregation_handler+0x13a>
	{
		ptr->scnd_level[ptr->scnd_level_index++] = meas_quadratic_average(ptr->frst_level, RMS_FRST_LEVEL_LENGTH) * gain_a + gain_b;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3304      	adds	r3, #4
 8001e78:	21c0      	movs	r1, #192	; 0xc0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f88d 	bl	8001f9a <meas_quadratic_average>
 8001e80:	eeb0 7a40 	vmov.f32	s14, s0
 8001e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 36d9 	ldrb.w	r3, [r3, #1753]	; 0x6d9
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	b2d1      	uxtb	r1, r2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f882 16d9 	strb.w	r1, [r2, #1753]	; 0x6d9
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	33c0      	adds	r3, #192	; 0xc0
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	edc3 7a00 	vstr	s15, [r3]

		if (ptr->scnd_level_index == RMS_SCND_LEVEL_LENGTH)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 36d9 	ldrb.w	r3, [r3, #1753]	; 0x6d9
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d166      	bne.n	8001f8a <meas_aggregation_handler+0x132>
		{
			ptr->thrd_level[ptr->thrd_level_index++] = meas_quadratic_average(ptr->scnd_level, RMS_SCND_LEVEL_LENGTH);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f503 7041 	add.w	r0, r3, #772	; 0x304
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	b2d1      	uxtb	r1, r2
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	f882 16da 	strb.w	r1, [r2, #1754]	; 0x6da
 8001ed2:	461c      	mov	r4, r3
 8001ed4:	210f      	movs	r1, #15
 8001ed6:	f000 f860 	bl	8001f9a <meas_quadratic_average>
 8001eda:	eef0 7a40 	vmov.f32	s15, s0
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	edc3 7a00 	vstr	s15, [r3]

			if (ptr->thrd_level_index == RMS_THRD_LEVEL_LENGTH)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 36da 	ldrb.w	r3, [r3, #1754]	; 0x6da
 8001ef2:	2bc8      	cmp	r3, #200	; 0xc8
 8001ef4:	d145      	bne.n	8001f82 <meas_aggregation_handler+0x12a>
			{
				ptr->frth_level[ptr->frth_level_index++] = meas_quadratic_average(ptr->thrd_level, RMS_THRD_LEVEL_LENGTH);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 36db 	ldrb.w	r3, [r3, #1755]	; 0x6db
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	b2d1      	uxtb	r1, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f882 16db 	strb.w	r1, [r2, #1755]	; 0x6db
 8001f0c:	461c      	mov	r4, r3
 8001f0e:	21c8      	movs	r1, #200	; 0xc8
 8001f10:	f000 f843 	bl	8001f9a <meas_quadratic_average>
 8001f14:	eef0 7a40 	vmov.f32	s15, s0
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	f504 73cc 	add.w	r3, r4, #408	; 0x198
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	edc3 7a00 	vstr	s15, [r3]

				if (ptr->frth_level_index == RMS_FRTH_LEVEL_LENGTH)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 36db 	ldrb.w	r3, [r3, #1755]	; 0x6db
 8001f2c:	2b06      	cmp	r3, #6
 8001f2e:	d124      	bne.n	8001f7a <meas_aggregation_handler+0x122>
				{
					ptr->ffth_level[ptr->ffth_level_index++] = meas_quadratic_average(ptr->frth_level, RMS_FRTH_LEVEL_LENGTH);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f503 60cc 	add.w	r0, r3, #1632	; 0x660
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	b2d1      	uxtb	r1, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	f882 16dc 	strb.w	r1, [r2, #1756]	; 0x6dc
 8001f46:	461c      	mov	r4, r3
 8001f48:	2106      	movs	r1, #6
 8001f4a:	f000 f826 	bl	8001f9a <meas_quadratic_average>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	f504 73cf 	add.w	r3, r4, #414	; 0x19e
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	edc3 7a00 	vstr	s15, [r3]

					if (ptr->ffth_level_index == RMS_FFTH_LEVEL_LENGTH)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	d103      	bne.n	8001f72 <meas_aggregation_handler+0x11a>
						ptr->ffth_level_index = 0;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc

					ptr->frth_level_index = 0;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
				}

				ptr->thrd_level_index = 0;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
			}

			ptr->scnd_level_index = 0;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
		}
		ptr->frst_level_index = 0;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
	}
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}

08001f9a <meas_quadratic_average>:

float meas_quadratic_average(float *ptr, int length)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
    float rms = 0.00;
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]

    for (int i=0; i<length; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	e016      	b.n	8001fde <meas_quadratic_average+0x44>
    	rms += ptr[i] * ptr[i];
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	ed93 7a00 	vldr	s14, [r3]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i=0; i<length; i++)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	dbe4      	blt.n	8001fb0 <meas_quadratic_average+0x16>

    return (sqrt(rms / length));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ff8:	ee16 0a90 	vmov	r0, s13
 8001ffc:	f7fe facc 	bl	8000598 <__aeabi_f2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	ec43 2b10 	vmov	d0, r2, r3
 8002008:	f008 fe32 	bl	800ac70 <sqrt>
 800200c:	ec53 2b10 	vmov	r2, r3, d0
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fdf0 	bl	8000bf8 <__aeabi_d2f>
 8002018:	4603      	mov	r3, r0
 800201a:	ee07 3a90 	vmov	s15, r3
}
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <meas_verify_voltage_events>:

void meas_verify_voltage_events(uint8_t *handler, float voltage)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	ed87 0a00 	vstr	s0, [r7]
	// Verifica se o evento de sobretensão está iniciado, para resetá-lo
	if (is_event_active(*handler, EVENT_OVERVOLTAGE) && voltage <= OVERVOLTAGE_RELEASE_LIMIT)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2102      	movs	r1, #2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fa95 	bl	800156a <is_event_active>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <meas_verify_voltage_events+0x40>
 8002046:	edd7 7a00 	vldr	s15, [r7]
 800204a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800211c <meas_verify_voltage_events+0xf4>
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d807      	bhi.n	8002068 <meas_verify_voltage_events+0x40>
		*handler &= ~EVENT_OVERVOLTAGE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e054      	b.n	8002112 <meas_verify_voltage_events+0xea>
	// Verifica se o evento de subtensão está iniciado, para resetá-lo
	else if (is_event_active(*handler, EVENT_UNDERVOLTAGE) && voltage >= UNDERVOLTAGE_RELEASE_LIMIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2108      	movs	r1, #8
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fa7b 	bl	800156a <is_event_active>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <meas_verify_voltage_events+0x74>
 800207a:	edd7 7a00 	vldr	s15, [r7]
 800207e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002120 <meas_verify_voltage_events+0xf8>
 8002082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	db07      	blt.n	800209c <meas_verify_voltage_events+0x74>
		*handler &= ~EVENT_UNDERVOLTAGE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	f023 0308 	bic.w	r3, r3, #8
 8002094:	b2da      	uxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	701a      	strb	r2, [r3, #0]
 800209a:	e03a      	b.n	8002112 <meas_verify_voltage_events+0xea>
	// Verifica se o evento de sobretenão está resetado, para iniciá-lo
	else if (!is_event_active(*handler, EVENT_OVERVOLTAGE) && voltage >= OVERVOLTAGE_HOLD_LIMIT)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2102      	movs	r1, #2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa61 	bl	800156a <is_event_active>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <meas_verify_voltage_events+0xae>
 80020b4:	edd7 7a00 	vldr	s15, [r7]
 80020b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002124 <meas_verify_voltage_events+0xfc>
 80020bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	db07      	blt.n	80020d6 <meas_verify_voltage_events+0xae>
		*handler |= EVENT_OVERVOLTAGE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e01d      	b.n	8002112 <meas_verify_voltage_events+0xea>
	// Verifica se o evento de subtensão está resetado, para iniciá-lo
	else if (!is_event_active(*handler, EVENT_UNDERVOLTAGE) && voltage <= UNDERVOLTAGE_HOLD_LIMIT)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2108      	movs	r1, #8
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fa44 	bl	800156a <is_event_active>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d011      	beq.n	8002112 <meas_verify_voltage_events+0xea>
 80020ee:	edd7 7a00 	vldr	s15, [r7]
 80020f2:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80020f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	d900      	bls.n	8002102 <meas_verify_voltage_events+0xda>
		*handler |= EVENT_UNDERVOLTAGE;
}
 8002100:	e007      	b.n	8002112 <meas_verify_voltage_events+0xea>
		*handler |= EVENT_UNDERVOLTAGE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	b2da      	uxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	701a      	strb	r2, [r3, #0]
}
 8002110:	e7ff      	b.n	8002112 <meas_verify_voltage_events+0xea>
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	43e10000 	.word	0x43e10000
 8002120:	42480000 	.word	0x42480000
 8002124:	43ed8000 	.word	0x43ed8000

08002128 <meas_verify_current_events>:

void meas_verify_current_events(uint8_t *handler, float current)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	ed87 0a00 	vstr	s0, [r7]
	// Verifica se o evento de sobrecorrente está iniciado, para resetá-lo
	if (is_event_active(*handler, EVENT_OVERCURRENT) && current <= OVERCURRENT_RELEASE_LIMIT)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2104      	movs	r1, #4
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fa15 	bl	800156a <is_event_active>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <meas_verify_current_events+0x40>
 8002146:	edd7 7a00 	vldr	s15, [r7]
 800214a:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d807      	bhi.n	8002168 <meas_verify_current_events+0x40>
		*handler &= ~EVENT_OVERCURRENT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	701a      	strb	r2, [r3, #0]
	// Verifica se o evento de sobrecorrente está resetado, para iniciá-lo
	else if (!is_event_active(*handler, EVENT_OVERCURRENT) && current >= OVERCURRENT_HOLD_LIMIT)
		*handler |= EVENT_OVERCURRENT;
}
 8002166:	e01c      	b.n	80021a2 <meas_verify_current_events+0x7a>
	else if (!is_event_active(*handler, EVENT_OVERCURRENT) && current >= OVERCURRENT_HOLD_LIMIT)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2104      	movs	r1, #4
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f9fb 	bl	800156a <is_event_active>
 8002174:	4603      	mov	r3, r0
 8002176:	f083 0301 	eor.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <meas_verify_current_events+0x7a>
 8002180:	edd7 7a00 	vldr	s15, [r7]
 8002184:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8002188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800218c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002190:	da00      	bge.n	8002194 <meas_verify_current_events+0x6c>
}
 8002192:	e006      	b.n	80021a2 <meas_verify_current_events+0x7a>
		*handler |= EVENT_OVERCURRENT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	b2da      	uxtb	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	701a      	strb	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <meas_compute_power_and_energy>:

void meas_compute_power_and_energy(photovoltaic *ptr, int index)
{
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	float voltage = ptr->master->thrd_level[index];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	33d0      	adds	r3, #208	; 0xd0
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
	float current = ptr->slave->thrd_level[index];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	33d0      	adds	r3, #208	; 0xd0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	60bb      	str	r3, [r7, #8]

	// Protocolo de agregação em multi-camadas da potência produzida
	ptr->power_energy->frst_level[ptr->power_energy->frst_level_index++] = (voltage * current) / 1000.0;
 80021d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80021da:	edd7 7a02 	vldr	s15, [r7, #8]
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f893 2398 	ldrb.w	r2, [r3, #920]	; 0x398
 80021ee:	1c50      	adds	r0, r2, #1
 80021f0:	b2c0      	uxtb	r0, r0
 80021f2:	f883 0398 	strb.w	r0, [r3, #920]	; 0x398
 80021f6:	4613      	mov	r3, r2
 80021f8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80022b8 <meas_compute_power_and_energy+0x10c>
 80021fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	edc3 7a00 	vstr	s15, [r3]

	if (ptr->power_energy->frst_level_index == RMS_THRD_LEVEL_LENGTH)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8002210:	2bc8      	cmp	r3, #200	; 0xc8
 8002212:	d14d      	bne.n	80022b0 <meas_compute_power_and_energy+0x104>
	{
		ptr->power_energy->scnd_level[ptr->power_energy->scnd_level_index++] = meas_quadratic_average(ptr->power_energy->frst_level, RMS_THRD_LEVEL_LENGTH);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	4618      	mov	r0, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691c      	ldr	r4, [r3, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f893 2399 	ldrb.w	r2, [r3, #921]	; 0x399
 8002226:	1c51      	adds	r1, r2, #1
 8002228:	b2c9      	uxtb	r1, r1
 800222a:	f883 1399 	strb.w	r1, [r3, #921]	; 0x399
 800222e:	4615      	mov	r5, r2
 8002230:	21c8      	movs	r1, #200	; 0xc8
 8002232:	f7ff feb2 	bl	8001f9a <meas_quadratic_average>
 8002236:	eef0 7a40 	vmov.f32	s15, s0
 800223a:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4423      	add	r3, r4
 8002242:	edc3 7a00 	vstr	s15, [r3]

		if (ptr->power_energy->scnd_level_index == RMS_FRTH_LEVEL_LENGTH)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f893 3399 	ldrb.w	r3, [r3, #921]	; 0x399
 800224e:	2b06      	cmp	r3, #6
 8002250:	d129      	bne.n	80022a6 <meas_compute_power_and_energy+0xfa>
		{
			ptr->power_energy->thrd_level[ptr->power_energy->thrd_level_index++] = meas_quadratic_average(ptr->power_energy->scnd_level, RMS_FRTH_LEVEL_LENGTH);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f503 7048 	add.w	r0, r3, #800	; 0x320
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691c      	ldr	r4, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f893 239a 	ldrb.w	r2, [r3, #922]	; 0x39a
 8002266:	1c51      	adds	r1, r2, #1
 8002268:	b2c9      	uxtb	r1, r1
 800226a:	f883 139a 	strb.w	r1, [r3, #922]	; 0x39a
 800226e:	4615      	mov	r5, r2
 8002270:	2106      	movs	r1, #6
 8002272:	f7ff fe92 	bl	8001f9a <meas_quadratic_average>
 8002276:	eef0 7a40 	vmov.f32	s15, s0
 800227a:	f105 03ce 	add.w	r3, r5, #206	; 0xce
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4423      	add	r3, r4
 8002282:	edc3 7a00 	vstr	s15, [r3]

			if (ptr->power_energy->thrd_level_index == RMS_FFTH_LEVEL_LENGTH)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f893 339a 	ldrb.w	r3, [r3, #922]	; 0x39a
 800228e:	2b18      	cmp	r3, #24
 8002290:	d104      	bne.n	800229c <meas_compute_power_and_energy+0xf0>
				ptr->power_energy->thrd_level_index = 0;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a

			ptr->power_energy->scnd_level_index = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
		}

		ptr->power_energy->frst_level_index = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	}
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	447a0000 	.word	0x447a0000
 80022bc:	00000000 	.word	0x00000000

080022c0 <meas_update_cell_values>:

void meas_update_cell_values(photovoltaic *ptr, int index, float temperature)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	ed87 0a01 	vstr	s0, [r7, #4]
	ptr->voltage = ptr->master->thrd_level[index];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	33d0      	adds	r3, #208	; 0xd0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
	ptr->current = ptr->slave->thrd_level[index];
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	33d0      	adds	r3, #208	; 0xd0
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28

	ptr->power   = ptr->power_energy->frst_level[index];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr->energy += ptr->power * POWER_ENERGY_DT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f946 	bl	8000598 <__aeabi_f2d>
 800230c:	4604      	mov	r4, r0
 800230e:	460d      	mov	r5, r1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	a30f      	add	r3, pc, #60	; (adr r3, 8002358 <meas_update_cell_values+0x98>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f992 	bl	8000648 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffd6 	bl	80002dc <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc5e 	bl	8000bf8 <__aeabi_d2f>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	631a      	str	r2, [r3, #48]	; 0x30

	ptr->temperature = temperature;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

	ptr->send_uart = 1;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39


}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bdb0      	pop	{r4, r5, r7, pc}
 8002358:	b4e81b4f 	.word	0xb4e81b4f
 800235c:	3f4b4e81 	.word	0x3f4b4e81

08002360 <meas_get_temperature>:

float meas_get_temperature(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
	// Obtém a leitura do módulo ADC
	uint32_t raw = HAL_ADC_GetValue(&hadc5);
 8002366:	4828      	ldr	r0, [pc, #160]	; (8002408 <meas_get_temperature+0xa8>)
 8002368:	f001 fbe2 	bl	8003b30 <HAL_ADC_GetValue>
 800236c:	6078      	str	r0, [r7, #4]

	// Converte a leitura do módulo ADC em tensão
	float voltage = (float)raw * ADC_GAIN;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002378:	ee17 0a90 	vmov	r0, s15
 800237c:	f7fe f90c 	bl	8000598 <__aeabi_f2d>
 8002380:	a31b      	add	r3, pc, #108	; (adr r3, 80023f0 <meas_get_temperature+0x90>)
 8002382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002386:	f7fe f95f 	bl	8000648 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fc31 	bl	8000bf8 <__aeabi_d2f>
 8002396:	4603      	mov	r3, r0
 8002398:	603b      	str	r3, [r7, #0]

	// Converte a tensão lida em temperatura (ºC)
	return (((voltage - TEMP_SENSOR_VREF) / TEMP_SENSOR_SLOPE) + TEMP_SENSOR_TREF);
 800239a:	6838      	ldr	r0, [r7, #0]
 800239c:	f7fe f8fc 	bl	8000598 <__aeabi_f2d>
 80023a0:	a315      	add	r3, pc, #84	; (adr r3, 80023f8 <meas_get_temperature+0x98>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fd ff97 	bl	80002d8 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	a313      	add	r3, pc, #76	; (adr r3, 8002400 <meas_get_temperature+0xa0>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe fa70 	bl	800089c <__aeabi_ddiv>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <meas_get_temperature+0xac>)
 80023ca:	f7fd ff87 	bl	80002dc <__adddf3>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fc0f 	bl	8000bf8 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	ee07 3a90 	vmov	s15, r3
}
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	f3af 8000 	nop.w
 80023f0:	e734d9b4 	.word	0xe734d9b4
 80023f4:	3f4a680c 	.word	0x3f4a680c
 80023f8:	851eb852 	.word	0x851eb852
 80023fc:	3fe851eb 	.word	0x3fe851eb
 8002400:	47ae147b 	.word	0x47ae147b
 8002404:	3f647ae1 	.word	0x3f647ae1
 8002408:	200002d0 	.word	0x200002d0
 800240c:	403e0000 	.word	0x403e0000

08002410 <meas_verify_temperature_events>:

void meas_verify_temperature_events(uint8_t *handler, float temperature)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	ed87 0a00 	vstr	s0, [r7]
	// Verifica se o evento de superaquecimento está iniciado, para resetá-lo
	if (is_event_active(*handler, EVENT_OVERHEAT) && temperature <= OVERHEAT_RELEASE_LIMIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2110      	movs	r1, #16
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f8a1 	bl	800156a <is_event_active>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d010      	beq.n	8002450 <meas_verify_temperature_events+0x40>
 800242e:	edd7 7a00 	vldr	s15, [r7]
 8002432:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002494 <meas_verify_temperature_events+0x84>
 8002436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	d807      	bhi.n	8002450 <meas_verify_temperature_events+0x40>
		*handler &= ~EVENT_OVERHEAT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f023 0310 	bic.w	r3, r3, #16
 8002448:	b2da      	uxtb	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	701a      	strb	r2, [r3, #0]
	else if (!is_event_active(*handler, EVENT_OVERHEAT) && temperature >= OVERHEAT_HOLD_LIMIT)
		*handler |= EVENT_OVERHEAT;
}
 800244e:	e01c      	b.n	800248a <meas_verify_temperature_events+0x7a>
	else if (!is_event_active(*handler, EVENT_OVERHEAT) && temperature >= OVERHEAT_HOLD_LIMIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2110      	movs	r1, #16
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f887 	bl	800156a <is_event_active>
 800245c:	4603      	mov	r3, r0
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <meas_verify_temperature_events+0x7a>
 8002468:	edd7 7a00 	vldr	s15, [r7]
 800246c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002498 <meas_verify_temperature_events+0x88>
 8002470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	da00      	bge.n	800247c <meas_verify_temperature_events+0x6c>
}
 800247a:	e006      	b.n	800248a <meas_verify_temperature_events+0x7a>
		*handler |= EVENT_OVERHEAT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	701a      	strb	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	42480000 	.word	0x42480000
 8002498:	42960000 	.word	0x42960000

0800249c <objects_def_init>:
uint16_t timer_val;

float temperature;

void objects_def_init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af04      	add	r7, sp, #16
	relay_pos = events_initialize_digital_ios("Relay (+)", GPIOA, CELL_1_OUT_POS_Pin, 0);
 80024a2:	2300      	movs	r3, #0
 80024a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80024ac:	481d      	ldr	r0, [pc, #116]	; (8002524 <objects_def_init+0x88>)
 80024ae:	f7fe ffb9 	bl	8001424 <events_initialize_digital_ios>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <objects_def_init+0x8c>)
 80024b6:	6013      	str	r3, [r2, #0]
	relay_neg = events_initialize_digital_ios("Relay (-)", GPIOC, CELL_1_OUT_NEG_Pin, 0);
 80024b8:	2300      	movs	r3, #0
 80024ba:	2201      	movs	r2, #1
 80024bc:	491b      	ldr	r1, [pc, #108]	; (800252c <objects_def_init+0x90>)
 80024be:	481c      	ldr	r0, [pc, #112]	; (8002530 <objects_def_init+0x94>)
 80024c0:	f7fe ffb0 	bl	8001424 <events_initialize_digital_ios>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <objects_def_init+0x98>)
 80024c8:	6013      	str	r3, [r2, #0]

	builtin_led = events_initialize_digital_ios("Built-In LED", GPIOA, CELL_1_BUILTIN_LED_Pin, 0);
 80024ca:	2300      	movs	r3, #0
 80024cc:	2220      	movs	r2, #32
 80024ce:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80024d2:	4819      	ldr	r0, [pc, #100]	; (8002538 <objects_def_init+0x9c>)
 80024d4:	f7fe ffa6 	bl	8001424 <events_initialize_digital_ios>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <objects_def_init+0xa0>)
 80024dc:	6013      	str	r3, [r2, #0]

	dbg  = events_initialize_debug_mod("Debug Module", GPIOB, CELL_1_DBG1_Pin, CELL_1_DBG2_Pin, CELL_1_DBG3_Pin);
 80024de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2310      	movs	r3, #16
 80024e6:	2220      	movs	r2, #32
 80024e8:	4915      	ldr	r1, [pc, #84]	; (8002540 <objects_def_init+0xa4>)
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <objects_def_init+0xa8>)
 80024ec:	f7fe ff42 	bl	8001374 <events_initialize_debug_mod>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <objects_def_init+0xac>)
 80024f4:	6013      	str	r3, [r2, #0]

	cell = meas_initialize_cell("Photovoltaic Cell 1", &hadc1, &hadc2, relay_pos, relay_neg, builtin_led, dbg);
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <objects_def_init+0x8c>)
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <objects_def_init+0x98>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <objects_def_init+0xa0>)
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	4911      	ldr	r1, [pc, #68]	; (8002548 <objects_def_init+0xac>)
 8002504:	6809      	ldr	r1, [r1, #0]
 8002506:	9102      	str	r1, [sp, #8]
 8002508:	9201      	str	r2, [sp, #4]
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <objects_def_init+0xb0>)
 8002510:	490f      	ldr	r1, [pc, #60]	; (8002550 <objects_def_init+0xb4>)
 8002512:	4810      	ldr	r0, [pc, #64]	; (8002554 <objects_def_init+0xb8>)
 8002514:	f7ff fb0c 	bl	8001b30 <meas_initialize_cell>
 8002518:	4603      	mov	r3, r0
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <objects_def_init+0xbc>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	0800af5c 	.word	0x0800af5c
 8002528:	20000344 	.word	0x20000344
 800252c:	48000800 	.word	0x48000800
 8002530:	0800af68 	.word	0x0800af68
 8002534:	20000348 	.word	0x20000348
 8002538:	0800af74 	.word	0x0800af74
 800253c:	2000034c 	.word	0x2000034c
 8002540:	48000400 	.word	0x48000400
 8002544:	0800af84 	.word	0x0800af84
 8002548:	20000340 	.word	0x20000340
 800254c:	20000264 	.word	0x20000264
 8002550:	200001f8 	.word	0x200001f8
 8002554:	0800af94 	.word	0x0800af94
 8002558:	20000350 	.word	0x20000350

0800255c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800256c:	d104      	bne.n	8002578 <HAL_ADC_ConvCpltCallback+0x1c>
		meas_sample_voltage_and_current(cell);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fba4 	bl	8001cc0 <meas_sample_voltage_and_current>
	if (hadc->Instance == ADC5)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_ADC_ConvCpltCallback+0x40>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConvCpltCallback+0x34>
		temperature = meas_get_temperature();
 8002582:	f7ff feed 	bl	8002360 <meas_get_temperature>
 8002586:	eef0 7a40 	vmov.f32	s15, s0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_ADC_ConvCpltCallback+0x44>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000350 	.word	0x20000350
 800259c:	50000600 	.word	0x50000600
 80025a0:	20000354 	.word	0x20000354

080025a4 <objects_def_exti_gpio>:

void objects_def_exti_gpio(uint16_t GPIO_Pin)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CELL_1_BTN_Pin)
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d106      	bne.n	80025c4 <objects_def_exti_gpio+0x20>
		events_change_state(cell, EVENT_USER_BREAK);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <objects_def_exti_gpio+0x3c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe ffa7 	bl	8001510 <events_change_state>
	else if (GPIO_Pin == CELL_1_DPS_Pin)
		events_change_state(cell, EVENT_DPS_LIFESPAN);
}
 80025c2:	e008      	b.n	80025d6 <objects_def_exti_gpio+0x32>
	else if (GPIO_Pin == CELL_1_DPS_Pin)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <objects_def_exti_gpio+0x32>
		events_change_state(cell, EVENT_DPS_LIFESPAN);
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <objects_def_exti_gpio+0x3c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2120      	movs	r1, #32
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe ff9d 	bl	8001510 <events_change_state>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000350 	.word	0x20000350

080025e4 <objects_def_loop>:

void objects_def_loop(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

	meas_objects_handler(cell, temperature);
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <objects_def_loop+0x28>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a08      	ldr	r2, [pc, #32]	; (8002610 <objects_def_loop+0x2c>)
 80025ee:	edd2 7a00 	vldr	s15, [r2]
 80025f2:	eeb0 0a67 	vmov.f32	s0, s15
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fbc2 	bl	8001d80 <meas_objects_handler>

	uart_send_data(cell);
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <objects_def_loop+0x28>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fa53 	bl	8002aac <uart_send_data>
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000350 	.word	0x20000350
 8002610:	20000354 	.word	0x20000354

08002614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_MspInit+0x44>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_MspInit+0x44>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6613      	str	r3, [r2, #96]	; 0x60
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_MspInit+0x44>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_MspInit+0x44>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_MspInit+0x44>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_MspInit+0x44>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800264a:	f002 ff83 	bl	8005554 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <NMI_Handler+0x4>

08002662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler+0x4>

0800266e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler+0x4>

0800267a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f000 fb9a 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f002 fe91 	bl	80053dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026c4:	4803      	ldr	r0, [pc, #12]	; (80026d4 <ADC1_2_IRQHandler+0x14>)
 80026c6:	f001 fa41 	bl	8003b4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80026ca:	4803      	ldr	r0, [pc, #12]	; (80026d8 <ADC1_2_IRQHandler+0x18>)
 80026cc:	f001 fa3e 	bl	8003b4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200001f8 	.word	0x200001f8
 80026d8:	20000264 	.word	0x20000264

080026dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80026e2:	f003 ff99 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000035c 	.word	0x2000035c

080026f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM2_IRQHandler+0x10>)
 80026f6:	f003 ff8f 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200003a8 	.word	0x200003a8

08002704 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800270c:	f002 fe66 	bl	80053dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <ADC5_IRQHandler+0x10>)
 800271a:	f001 fa17 	bl	8003b4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200002d0 	.word	0x200002d0

08002728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
	return 1;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <_kill>:

int _kill(int pid, int sig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002742:	f005 fa95 	bl	8007c70 <__errno>
 8002746:	4603      	mov	r3, r0
 8002748:	2216      	movs	r2, #22
 800274a:	601a      	str	r2, [r3, #0]
	return -1;
 800274c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_exit>:

void _exit (int status)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ffe7 	bl	8002738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800276a:	e7fe      	b.n	800276a <_exit+0x12>

0800276c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e00a      	b.n	8002794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800277e:	f3af 8000 	nop.w
 8002782:	4601      	mov	r1, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	60ba      	str	r2, [r7, #8]
 800278a:	b2ca      	uxtb	r2, r1
 800278c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	429a      	cmp	r2, r3
 800279a:	dbf0      	blt.n	800277e <_read+0x12>
	}

return len;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
	return -1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ce:	605a      	str	r2, [r3, #4]
	return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <_isatty>:

int _isatty(int file)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	return 1;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <_sbrk+0x5c>)
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <_sbrk+0x60>)
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <_sbrk+0x64>)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <_sbrk+0x68>)
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <_sbrk+0x64>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	429a      	cmp	r2, r3
 800283e:	d207      	bcs.n	8002850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002840:	f005 fa16 	bl	8007c70 <__errno>
 8002844:	4603      	mov	r3, r0
 8002846:	220c      	movs	r2, #12
 8002848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800284e:	e009      	b.n	8002864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <_sbrk+0x64>)
 8002860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20020000 	.word	0x20020000
 8002870:	00000400 	.word	0x00000400
 8002874:	20000358 	.word	0x20000358
 8002878:	20000500 	.word	0x20000500

0800287c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <SystemInit+0x20>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	4a05      	ldr	r2, [pc, #20]	; (800289c <SystemInit+0x20>)
 8002888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800288c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <MX_TIM1_Init+0xa4>)
 80028c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 80028c4:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028c6:	2277      	movs	r2, #119	; 0x77
 80028c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028d2:	f240 4211 	movw	r2, #1041	; 0x411
 80028d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028ea:	4815      	ldr	r0, [pc, #84]	; (8002940 <MX_TIM1_Init+0xa0>)
 80028ec:	f003 fdc4 	bl	8006478 <HAL_TIM_Base_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80028f6:	f7ff f915 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	4619      	mov	r1, r3
 8002906:	480e      	ldr	r0, [pc, #56]	; (8002940 <MX_TIM1_Init+0xa0>)
 8002908:	f004 f806 	bl	8006918 <HAL_TIM_ConfigClockSource>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002912:	f7ff f907 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_TIM1_Init+0xa0>)
 8002928:	f004 fa74 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002932:	f7ff f8f7 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000035c 	.word	0x2000035c
 8002944:	40012c00 	.word	0x40012c00

08002948 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294e:	f107 0310 	add.w	r3, r7, #16
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800296c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002970:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800297c:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <MX_TIM2_Init+0x98>)
 800297e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_TIM2_Init+0x98>)
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002990:	4813      	ldr	r0, [pc, #76]	; (80029e0 <MX_TIM2_Init+0x98>)
 8002992:	f003 fd71 	bl	8006478 <HAL_TIM_Base_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800299c:	f7ff f8c2 	bl	8001b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <MX_TIM2_Init+0x98>)
 80029ae:	f003 ffb3 	bl	8006918 <HAL_TIM_ConfigClockSource>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80029b8:	f7ff f8b4 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_TIM2_Init+0x98>)
 80029ca:	f004 fa23 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80029d4:	f7ff f8a6 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200003a8 	.word	0x200003a8

080029e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_TIM_Base_MspInit+0x78>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d114      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 80029fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a00:	6613      	str	r3, [r2, #96]	; 0x60
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 8002a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2019      	movs	r0, #25
 8002a14:	f002 faf9 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a18:	2019      	movs	r0, #25
 8002a1a:	f002 fb10 	bl	800503e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a1e:	e018      	b.n	8002a52 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d113      	bne.n	8002a52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6593      	str	r3, [r2, #88]	; 0x58
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_TIM_Base_MspInit+0x7c>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	201c      	movs	r0, #28
 8002a48:	f002 fadf 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a4c:	201c      	movs	r0, #28
 8002a4e:	f002 faf6 	bl	800503e <HAL_NVIC_EnableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_ADC_Start(&hadc2);
 8002a76:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a78:	f000 fe1a 	bl	80036b0 <HAL_ADC_Start>
		HAL_ADC_Start_IT(&hadc1);
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a7e:	f000 fefb 	bl	8003878 <HAL_ADC_Start_IT>
	}
	else if (htim->Instance == TIM2)
	{
		HAL_ADC_Start_IT(&hadc5);
	}
}
 8002a82:	e007      	b.n	8002a94 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim->Instance == TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d102      	bne.n	8002a94 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ADC_Start_IT(&hadc5);
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a90:	f000 fef2 	bl	8003878 <HAL_ADC_Start_IT>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	20000264 	.word	0x20000264
 8002aa4:	200001f8 	.word	0x200001f8
 8002aa8:	200002d0 	.word	0x200002d0

08002aac <uart_send_data>:


char aux[MAX_BUFFER];


void uart_send_data(photovoltaic *cell){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

	if (cell->send_uart) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d053      	beq.n	8002b66 <uart_send_data+0xba>
		sprintf(aux, "V-%f\r\n", cell->voltage);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd68 	bl	8000598 <__aeabi_f2d>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4928      	ldr	r1, [pc, #160]	; (8002b70 <uart_send_data+0xc4>)
 8002ace:	4829      	ldr	r0, [pc, #164]	; (8002b74 <uart_send_data+0xc8>)
 8002ad0:	f005 ff06 	bl	80088e0 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t *)aux, strlen(aux), 100);
 8002ad4:	4827      	ldr	r0, [pc, #156]	; (8002b74 <uart_send_data+0xc8>)
 8002ad6:	f7fd fba3 	bl	8000220 <strlen>
 8002ada:	4603      	mov	r3, r0
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	4924      	ldr	r1, [pc, #144]	; (8002b74 <uart_send_data+0xc8>)
 8002ae2:	4825      	ldr	r0, [pc, #148]	; (8002b78 <uart_send_data+0xcc>)
 8002ae4:	f004 fac2 	bl	800706c <HAL_UART_Transmit>

		sprintf(aux, "C-%f\r\n", cell->current);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd53 	bl	8000598 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4921      	ldr	r1, [pc, #132]	; (8002b7c <uart_send_data+0xd0>)
 8002af8:	481e      	ldr	r0, [pc, #120]	; (8002b74 <uart_send_data+0xc8>)
 8002afa:	f005 fef1 	bl	80088e0 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t *)aux, strlen(aux), 100);
 8002afe:	481d      	ldr	r0, [pc, #116]	; (8002b74 <uart_send_data+0xc8>)
 8002b00:	f7fd fb8e 	bl	8000220 <strlen>
 8002b04:	4603      	mov	r3, r0
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2364      	movs	r3, #100	; 0x64
 8002b0a:	491a      	ldr	r1, [pc, #104]	; (8002b74 <uart_send_data+0xc8>)
 8002b0c:	481a      	ldr	r0, [pc, #104]	; (8002b78 <uart_send_data+0xcc>)
 8002b0e:	f004 faad 	bl	800706c <HAL_UART_Transmit>

		sprintf(aux, "P-%f\r\n", cell->power);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd3e 	bl	8000598 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4917      	ldr	r1, [pc, #92]	; (8002b80 <uart_send_data+0xd4>)
 8002b22:	4814      	ldr	r0, [pc, #80]	; (8002b74 <uart_send_data+0xc8>)
 8002b24:	f005 fedc 	bl	80088e0 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t *)aux, strlen(aux), 100);
 8002b28:	4812      	ldr	r0, [pc, #72]	; (8002b74 <uart_send_data+0xc8>)
 8002b2a:	f7fd fb79 	bl	8000220 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	2364      	movs	r3, #100	; 0x64
 8002b34:	490f      	ldr	r1, [pc, #60]	; (8002b74 <uart_send_data+0xc8>)
 8002b36:	4810      	ldr	r0, [pc, #64]	; (8002b78 <uart_send_data+0xcc>)
 8002b38:	f004 fa98 	bl	800706c <HAL_UART_Transmit>

		sprintf(aux, "E-%f\r\n", cell->energy);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd29 	bl	8000598 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <uart_send_data+0xd8>)
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <uart_send_data+0xc8>)
 8002b4e:	f005 fec7 	bl	80088e0 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t *)aux, strlen(aux), 100);
 8002b52:	4808      	ldr	r0, [pc, #32]	; (8002b74 <uart_send_data+0xc8>)
 8002b54:	f7fd fb64 	bl	8000220 <strlen>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	2364      	movs	r3, #100	; 0x64
 8002b5e:	4905      	ldr	r1, [pc, #20]	; (8002b74 <uart_send_data+0xc8>)
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <uart_send_data+0xcc>)
 8002b62:	f004 fa83 	bl	800706c <HAL_UART_Transmit>
	}
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	0800afa8 	.word	0x0800afa8
 8002b74:	200003f4 	.word	0x200003f4
 8002b78:	20000458 	.word	0x20000458
 8002b7c:	0800afb0 	.word	0x0800afb0
 8002b80:	0800afb8 	.word	0x0800afb8
 8002b84:	0800afc0 	.word	0x0800afc0

08002b88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <MX_USART3_UART_Init+0x94>)
 8002b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bae:	220c      	movs	r2, #12
 8002bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bd0:	4811      	ldr	r0, [pc, #68]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bd2:	f004 f9fb 	bl	8006fcc <HAL_UART_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bdc:	f7fe ffa2 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be0:	2100      	movs	r1, #0
 8002be2:	480d      	ldr	r0, [pc, #52]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002be4:	f004 ff7a 	bl	8007adc <HAL_UARTEx_SetTxFifoThreshold>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002bee:	f7fe ff99 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4808      	ldr	r0, [pc, #32]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002bf6:	f004 ffaf 	bl	8007b58 <HAL_UARTEx_SetRxFifoThreshold>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c00:	f7fe ff90 	bl	8001b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c04:	4804      	ldr	r0, [pc, #16]	; (8002c18 <MX_USART3_UART_Init+0x90>)
 8002c06:	f004 ff30 	bl	8007a6a <HAL_UARTEx_DisableFifoMode>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c10:	f7fe ff88 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000458 	.word	0x20000458
 8002c1c:	40004800 	.word	0x40004800

08002c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_UART_MspInit+0xb8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d145      	bne.n	8002cce <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_UART_MspInit+0xbc>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c9c:	2307      	movs	r3, #7
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480e      	ldr	r0, [pc, #56]	; (8002ce0 <HAL_UART_MspInit+0xc0>)
 8002ca8:	f002 f9e4 	bl	8005074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <HAL_UART_MspInit+0xc4>)
 8002cca:	f002 f9d3 	bl	8005074 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	48000400 	.word	0x48000400
 8002ce4:	48000800 	.word	0x48000800

08002ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cee:	490e      	ldr	r1, [pc, #56]	; (8002d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <LoopForever+0xe>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d04:	4c0b      	ldr	r4, [pc, #44]	; (8002d34 <LoopForever+0x16>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d12:	f7ff fdb3 	bl	800287c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f004 ffb1 	bl	8007c7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d1a:	f7fe fe5f 	bl	80019dc <main>

08002d1e <LoopForever>:

LoopForever:
    b LoopForever
 8002d1e:	e7fe      	b.n	8002d1e <LoopForever>
  ldr   r0, =_estack
 8002d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d2c:	0800b3f4 	.word	0x0800b3f4
  ldr r2, =_sbss
 8002d30:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002d34:	200004fc 	.word	0x200004fc

08002d38 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC3_IRQHandler>

08002d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f002 f955 	bl	8004ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f000 f80e 	bl	8002d6c <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
 8002d5a:	e001      	b.n	8002d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d5c:	f7ff fc5a 	bl	8002614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d60:	79fb      	ldrb	r3, [r7, #7]

}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_InitTick+0x68>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_InitTick+0x6c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_InitTick+0x68>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 f960 	bl	800505a <HAL_SYSTICK_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d809      	bhi.n	8002dba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da6:	2200      	movs	r2, #0
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dae:	f002 f92c 	bl	800500a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db2:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <HAL_InitTick+0x70>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e007      	b.n	8002dca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e004      	b.n	8002dca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	20000004 	.word	0x20000004

08002de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_IncTick+0x1c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_IncTick+0x20>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_IncTick+0x1c>)
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	200004e8 	.word	0x200004e8
 8002e00:	20000008 	.word	0x20000008

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200004e8 	.word	0x200004e8

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e34:	d004      	beq.n	8002e40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_Delay+0x40>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e40:	bf00      	nop
 8002e42:	f7ff ffdf 	bl	8002e04 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d8f7      	bhi.n	8002e42 <HAL_Delay+0x26>
  {
  }
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000008 	.word	0x20000008

08002e60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <LL_ADC_SetOffset+0x44>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	03fff000 	.word	0x03fff000

08002f10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3360      	adds	r3, #96	; 0x60
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3360      	adds	r3, #96	; 0x60
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fd2:	bf00      	nop
 8002fd4:	371c      	adds	r7, #28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	615a      	str	r2, [r3, #20]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800302a:	b480      	push	{r7}
 800302c:	b087      	sub	sp, #28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3330      	adds	r3, #48	; 0x30
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	4413      	add	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	211f      	movs	r1, #31
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	401a      	ands	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 011f 	and.w	r1, r3, #31
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	431a      	orrs	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	3314      	adds	r3, #20
 80030b8:	461a      	mov	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0e5b      	lsrs	r3, r3, #25
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	4413      	add	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0d1b      	lsrs	r3, r3, #20
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2107      	movs	r1, #7
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	401a      	ands	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0d1b      	lsrs	r3, r3, #20
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	431a      	orrs	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030f2:	bf00      	nop
 80030f4:	371c      	adds	r7, #28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	43db      	mvns	r3, r3
 800311a:	401a      	ands	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0318 	and.w	r3, r3, #24
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003124:	40d9      	lsrs	r1, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	400b      	ands	r3, r1
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	431a      	orrs	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	0007ffff 	.word	0x0007ffff

08003148 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 031f 	and.w	r3, r3, #31
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003190:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6093      	str	r3, [r2, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b8:	d101      	bne.n	80031be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003208:	d101      	bne.n	800320e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003258:	f043 0202 	orr.w	r2, r3, #2
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <LL_ADC_IsEnabled+0x18>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <LL_ADC_IsEnabled+0x1a>
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d101      	bne.n	80032aa <LL_ADC_IsDisableOngoing+0x18>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <LL_ADC_IsDisableOngoing+0x1a>
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d101      	bne.n	80032f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d101      	bne.n	800331e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1af      	b.n	80036a6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fd ff63 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff19 	bl	80031a4 <LL_ADC_IsDeepPowerDownEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff feff 	bl	8003180 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff34 	bl	80031f4 <LL_ADC_IsInternalRegulatorEnabled>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d115      	bne.n	80033be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff18 	bl	80031cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800339c:	4b9f      	ldr	r3, [pc, #636]	; (800361c <HAL_ADC_Init+0x2f0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	4a9f      	ldr	r2, [pc, #636]	; (8003620 <HAL_ADC_Init+0x2f4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033b0:	e002      	b.n	80033b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff16 	bl	80031f4 <LL_ADC_IsInternalRegulatorEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff76 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 80033f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8148 	bne.w	8003694 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8144 	bne.w	8003694 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003414:	f043 0202 	orr.w	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff23 	bl	800326c <LL_ADC_IsEnabled>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d141      	bne.n	80034b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003434:	d004      	beq.n	8003440 <HAL_ADC_Init+0x114>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_ADC_Init+0x2f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10f      	bne.n	8003460 <HAL_ADC_Init+0x134>
 8003440:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003444:	f7ff ff12 	bl	800326c <LL_ADC_IsEnabled>
 8003448:	4604      	mov	r4, r0
 800344a:	4876      	ldr	r0, [pc, #472]	; (8003624 <HAL_ADC_Init+0x2f8>)
 800344c:	f7ff ff0e 	bl	800326c <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_ADC_Init+0x15a>
 8003460:	4871      	ldr	r0, [pc, #452]	; (8003628 <HAL_ADC_Init+0x2fc>)
 8003462:	f7ff ff03 	bl	800326c <LL_ADC_IsEnabled>
 8003466:	4604      	mov	r4, r0
 8003468:	4870      	ldr	r0, [pc, #448]	; (800362c <HAL_ADC_Init+0x300>)
 800346a:	f7ff feff 	bl	800326c <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	431c      	orrs	r4, r3
 8003472:	486f      	ldr	r0, [pc, #444]	; (8003630 <HAL_ADC_Init+0x304>)
 8003474:	f7ff fefa 	bl	800326c <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	4323      	orrs	r3, r4
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003492:	d004      	beq.n	800349e <HAL_ADC_Init+0x172>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a62      	ldr	r2, [pc, #392]	; (8003624 <HAL_ADC_Init+0x2f8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_Init+0x176>
 800349e:	4a65      	ldr	r2, [pc, #404]	; (8003634 <HAL_ADC_Init+0x308>)
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_Init+0x178>
 80034a2:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_ADC_Init+0x30c>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f7ff fcd8 	bl	8002e60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7f5b      	ldrb	r3, [r3, #29]
 80034b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80034c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80034c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d106      	bne.n	80034ec <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	045b      	lsls	r3, r3, #17
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_ADC_Init+0x310>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	430b      	orrs	r3, r1
 800351a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fed2 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 800353c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fedf 	bl	8003306 <LL_ADC_INJ_IsConversionOngoing>
 8003548:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d17f      	bne.n	8003650 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d17c      	bne.n	8003650 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800355a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003562:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003572:	f023 0302 	bic.w	r3, r3, #2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	69b9      	ldr	r1, [r7, #24]
 800357c:	430b      	orrs	r3, r1
 800357e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d017      	beq.n	80035b8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003596:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6911      	ldr	r1, [r2, #16]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80035b6:	e013      	b.n	80035e0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035dc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d12a      	bne.n	8003640 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003600:	4311      	orrs	r1, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800360c:	430a      	orrs	r2, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	611a      	str	r2, [r3, #16]
 800361a:	e019      	b.n	8003650 <HAL_ADC_Init+0x324>
 800361c:	20000000 	.word	0x20000000
 8003620:	053e2d63 	.word	0x053e2d63
 8003624:	50000100 	.word	0x50000100
 8003628:	50000400 	.word	0x50000400
 800362c:	50000500 	.word	0x50000500
 8003630:	50000600 	.word	0x50000600
 8003634:	50000300 	.word	0x50000300
 8003638:	50000700 	.word	0x50000700
 800363c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f023 010f 	bic.w	r1, r3, #15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	1e5a      	subs	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
 8003670:	e007      	b.n	8003682 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 020f 	bic.w	r2, r2, #15
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	; 0x5c
 8003692:	e007      	b.n	80036a4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	f043 0210 	orr.w	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}
 80036ae:	bf00      	nop

080036b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_Start+0x1c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_ADC_Start+0x1b4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_Start+0x20>
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <HAL_ADC_Start+0x1b8>)
 80036ce:	e000      	b.n	80036d2 <HAL_ADC_Start+0x22>
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_ADC_Start+0x1bc>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fd38 	bl	8003148 <LL_ADC_GetMultimode>
 80036d8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fdfe 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80b4 	bne.w	8003854 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_Start+0x4a>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0af      	b.n	800385a <HAL_ADC_Start+0x1aa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f001 f8d6 	bl	80048b4 <ADC_Enable>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 809b 	bne.w	800384a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a4d      	ldr	r2, [pc, #308]	; (8003864 <HAL_ADC_Start+0x1b4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_ADC_Start+0x96>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a4e      	ldr	r2, [pc, #312]	; (8003870 <HAL_ADC_Start+0x1c0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d002      	beq.n	8003742 <HAL_ADC_Start+0x92>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e003      	b.n	800374a <HAL_ADC_Start+0x9a>
 8003742:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_ADC_Start+0x1c4>)
 8003744:	e001      	b.n	800374a <HAL_ADC_Start+0x9a>
 8003746:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d106      	bne.n	8003780 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	f023 0206 	bic.w	r2, r3, #6
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
 800377e:	e002      	b.n	8003786 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	221c      	movs	r2, #28
 800378c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_ADC_Start+0x1b4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_ADC_Start+0x104>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a32      	ldr	r2, [pc, #200]	; (8003870 <HAL_ADC_Start+0x1c0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d002      	beq.n	80037b0 <HAL_ADC_Start+0x100>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_Start+0x108>
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <HAL_ADC_Start+0x1c4>)
 80037b2:	e001      	b.n	80037b8 <HAL_ADC_Start+0x108>
 80037b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4293      	cmp	r3, r2
 80037be:	d008      	beq.n	80037d2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d002      	beq.n	80037d2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d114      	bne.n	80037fc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fd5f 	bl	80032b8 <LL_ADC_REG_StartConversion>
 80037fa:	e02d      	b.n	8003858 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_ADC_Start+0x1b4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_ADC_Start+0x176>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a16      	ldr	r2, [pc, #88]	; (8003870 <HAL_ADC_Start+0x1c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d002      	beq.n	8003822 <HAL_ADC_Start+0x172>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	e003      	b.n	800382a <HAL_ADC_Start+0x17a>
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_ADC_Start+0x1c4>)
 8003824:	e001      	b.n	800382a <HAL_ADC_Start+0x17a>
 8003826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800382a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003840:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	; 0x5c
 8003848:	e006      	b.n	8003858 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003852:	e001      	b.n	8003858 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003858:	7dfb      	ldrb	r3, [r7, #23]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	50000100 	.word	0x50000100
 8003868:	50000300 	.word	0x50000300
 800386c:	50000700 	.word	0x50000700
 8003870:	50000500 	.word	0x50000500
 8003874:	50000400 	.word	0x50000400

08003878 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003888:	d004      	beq.n	8003894 <HAL_ADC_Start_IT+0x1c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a93      	ldr	r2, [pc, #588]	; (8003adc <HAL_ADC_Start_IT+0x264>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_ADC_Start_IT+0x20>
 8003894:	4b92      	ldr	r3, [pc, #584]	; (8003ae0 <HAL_ADC_Start_IT+0x268>)
 8003896:	e000      	b.n	800389a <HAL_ADC_Start_IT+0x22>
 8003898:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <HAL_ADC_Start_IT+0x26c>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fc54 	bl	8003148 <LL_ADC_GetMultimode>
 80038a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fd1a 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 8134 	bne.w	8003b1c <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_Start_IT+0x4a>
 80038be:	2302      	movs	r3, #2
 80038c0:	e131      	b.n	8003b26 <HAL_ADC_Start_IT+0x2ae>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fff2 	bl	80048b4 <ADC_Enable>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 811b 	bne.w	8003b12 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a79      	ldr	r2, [pc, #484]	; (8003adc <HAL_ADC_Start_IT+0x264>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_ADC_Start_IT+0x96>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a7a      	ldr	r2, [pc, #488]	; (8003ae8 <HAL_ADC_Start_IT+0x270>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d002      	beq.n	800390a <HAL_ADC_Start_IT+0x92>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e003      	b.n	8003912 <HAL_ADC_Start_IT+0x9a>
 800390a:	4b78      	ldr	r3, [pc, #480]	; (8003aec <HAL_ADC_Start_IT+0x274>)
 800390c:	e001      	b.n	8003912 <HAL_ADC_Start_IT+0x9a>
 800390e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	4293      	cmp	r3, r2
 8003918:	d002      	beq.n	8003920 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	f023 0206 	bic.w	r2, r3, #6
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
 8003944:	e002      	b.n	800394c <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	221c      	movs	r2, #28
 8003952:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 021c 	bic.w	r2, r2, #28
 800396a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d108      	bne.n	8003986 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	605a      	str	r2, [r3, #4]
          break;
 8003984:	e008      	b.n	8003998 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0204 	orr.w	r2, r2, #4
 8003994:	605a      	str	r2, [r3, #4]
          break;
 8003996:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0210 	orr.w	r2, r2, #16
 80039ae:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a49      	ldr	r2, [pc, #292]	; (8003adc <HAL_ADC_Start_IT+0x264>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <HAL_ADC_Start_IT+0x156>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a4a      	ldr	r2, [pc, #296]	; (8003ae8 <HAL_ADC_Start_IT+0x270>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_Start_IT+0x152>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_Start_IT+0x15a>
 80039ca:	4b48      	ldr	r3, [pc, #288]	; (8003aec <HAL_ADC_Start_IT+0x274>)
 80039cc:	e001      	b.n	80039d2 <HAL_ADC_Start_IT+0x15a>
 80039ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d008      	beq.n	80039ec <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d002      	beq.n	80039ec <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	d13b      	bne.n	8003a64 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02d      	beq.n	8003a56 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d110      	bne.n	8003a34 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a30:	605a      	str	r2, [r3, #4]
              break;
 8003a32:	e011      	b.n	8003a58 <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0220 	orr.w	r2, r2, #32
 8003a52:	605a      	str	r2, [r3, #4]
              break;
 8003a54:	e000      	b.n	8003a58 <HAL_ADC_Start_IT+0x1e0>
          }
        }
 8003a56:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fc2b 	bl	80032b8 <LL_ADC_REG_StartConversion>
 8003a62:	e05f      	b.n	8003b24 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_ADC_Start_IT+0x264>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_ADC_Start_IT+0x216>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_ADC_Start_IT+0x270>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Start_IT+0x212>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	e003      	b.n	8003a92 <HAL_ADC_Start_IT+0x21a>
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_ADC_Start_IT+0x274>)
 8003a8c:	e001      	b.n	8003a92 <HAL_ADC_Start_IT+0x21a>
 8003a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a92:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d040      	beq.n	8003b22 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d11b      	bne.n	8003af0 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0220 	bic.w	r2, r2, #32
 8003ac6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad6:	605a      	str	r2, [r3, #4]
              break;
 8003ad8:	e024      	b.n	8003b24 <HAL_ADC_Start_IT+0x2ac>
 8003ada:	bf00      	nop
 8003adc:	50000100 	.word	0x50000100
 8003ae0:	50000300 	.word	0x50000300
 8003ae4:	50000700 	.word	0x50000700
 8003ae8:	50000500 	.word	0x50000500
 8003aec:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0220 	orr.w	r2, r2, #32
 8003b0e:	605a      	str	r2, [r3, #4]
              break;
 8003b10:	e008      	b.n	8003b24 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	75fb      	strb	r3, [r7, #23]
 8003b20:	e000      	b.n	8003b24 <HAL_ADC_Start_IT+0x2ac>
        }
 8003b22:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop

08003b30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x30>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a8e      	ldr	r2, [pc, #568]	; (8003db0 <HAL_ADC_IRQHandler+0x264>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_IRQHandler+0x34>
 8003b7c:	4b8d      	ldr	r3, [pc, #564]	; (8003db4 <HAL_ADC_IRQHandler+0x268>)
 8003b7e:	e000      	b.n	8003b82 <HAL_ADC_IRQHandler+0x36>
 8003b80:	4b8d      	ldr	r3, [pc, #564]	; (8003db8 <HAL_ADC_IRQHandler+0x26c>)
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fae0 	bl	8003148 <LL_ADC_GetMultimode>
 8003b88:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_ADC_IRQHandler+0x78>
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 f83a 	bl	8004c30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x8c>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8094 	beq.w	8003d0c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 808e 	beq.w	8003d0c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff f9f9 	bl	8003004 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d072      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a64      	ldr	r2, [pc, #400]	; (8003db0 <HAL_ADC_IRQHandler+0x264>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_ADC_IRQHandler+0xea>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_ADC_IRQHandler+0x270>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d002      	beq.n	8003c32 <HAL_ADC_IRQHandler+0xe6>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	e003      	b.n	8003c3a <HAL_ADC_IRQHandler+0xee>
 8003c32:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <HAL_ADC_IRQHandler+0x274>)
 8003c34:	e001      	b.n	8003c3a <HAL_ADC_IRQHandler+0xee>
 8003c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d008      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d002      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d104      	bne.n	8003c5e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	e014      	b.n	8003c88 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a53      	ldr	r2, [pc, #332]	; (8003db0 <HAL_ADC_IRQHandler+0x264>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_ADC_IRQHandler+0x130>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a53      	ldr	r2, [pc, #332]	; (8003dbc <HAL_ADC_IRQHandler+0x270>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d002      	beq.n	8003c78 <HAL_ADC_IRQHandler+0x12c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	e003      	b.n	8003c80 <HAL_ADC_IRQHandler+0x134>
 8003c78:	4b51      	ldr	r3, [pc, #324]	; (8003dc0 <HAL_ADC_IRQHandler+0x274>)
 8003c7a:	e001      	b.n	8003c80 <HAL_ADC_IRQHandler+0x134>
 8003c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c80:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d135      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d12e      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fb1b 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11a      	bne.n	8003ce6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020c 	bic.w	r2, r2, #12
 8003cbe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d112      	bne.n	8003cfe <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ce4:	e00b      	b.n	8003cfe <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe fc2c 	bl	800255c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	220c      	movs	r2, #12
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_ADC_IRQHandler+0x1d4>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80b3 	beq.w	8003e92 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80ad 	beq.w	8003e92 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff f994 	bl	8003082 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d5a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f94f 	bl	8003004 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d66:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_ADC_IRQHandler+0x264>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_ADC_IRQHandler+0x23a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <HAL_ADC_IRQHandler+0x270>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d002      	beq.n	8003d82 <HAL_ADC_IRQHandler+0x236>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_IRQHandler+0x23e>
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <HAL_ADC_IRQHandler+0x274>)
 8003d84:	e001      	b.n	8003d8a <HAL_ADC_IRQHandler+0x23e>
 8003d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d008      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d002      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b07      	cmp	r3, #7
 8003da2:	d10f      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	e01f      	b.n	8003dee <HAL_ADC_IRQHandler+0x2a2>
 8003dae:	bf00      	nop
 8003db0:	50000100 	.word	0x50000100
 8003db4:	50000300 	.word	0x50000300
 8003db8:	50000700 	.word	0x50000700
 8003dbc:	50000500 	.word	0x50000500
 8003dc0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a8b      	ldr	r2, [pc, #556]	; (8003ff8 <HAL_ADC_IRQHandler+0x4ac>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_ADC_IRQHandler+0x296>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a8a      	ldr	r2, [pc, #552]	; (8003ffc <HAL_ADC_IRQHandler+0x4b0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d002      	beq.n	8003dde <HAL_ADC_IRQHandler+0x292>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	e003      	b.n	8003de6 <HAL_ADC_IRQHandler+0x29a>
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_ADC_IRQHandler+0x4b4>)
 8003de0:	e001      	b.n	8003de6 <HAL_ADC_IRQHandler+0x29a>
 8003de2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003de6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d047      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <HAL_ADC_IRQHandler+0x2c2>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03f      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13a      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d133      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d12e      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fa6b 	bl	8003306 <LL_ADC_INJ_IsConversionOngoing>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11a      	bne.n	8003e6c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e44:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d112      	bne.n	8003e84 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e6a:	e00b      	b.n	8003e84 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f043 0210 	orr.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 feab 	bl	8004be0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2260      	movs	r2, #96	; 0x60
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d011      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x374>
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8aa 	bl	800400c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x3a4>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fe91 	bl	8004c08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <HAL_ADC_IRQHandler+0x3d4>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fe83 	bl	8004c1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d043      	beq.n	8003fb2 <HAL_ADC_IRQHandler+0x466>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d03e      	beq.n	8003fb2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e021      	b.n	8003f86 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f50:	d004      	beq.n	8003f5c <HAL_ADC_IRQHandler+0x410>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <HAL_ADC_IRQHandler+0x4ac>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_IRQHandler+0x414>
 8003f5c:	4b29      	ldr	r3, [pc, #164]	; (8004004 <HAL_ADC_IRQHandler+0x4b8>)
 8003f5e:	e000      	b.n	8003f62 <HAL_ADC_IRQHandler+0x416>
 8003f60:	4b29      	ldr	r3, [pc, #164]	; (8004008 <HAL_ADC_IRQHandler+0x4bc>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff f8fe 	bl	8003164 <LL_ADC_GetMultiDMATransfer>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e008      	b.n	8003f86 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003f82:	2301      	movs	r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10e      	bne.n	8003faa <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	f043 0202 	orr.w	r2, r3, #2
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f83b 	bl	8004020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2210      	movs	r2, #16
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d018      	beq.n	8003fee <HAL_ADC_IRQHandler+0x4a2>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d013      	beq.n	8003fee <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd6:	f043 0208 	orr.w	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fe03 	bl	8004bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003fee:	bf00      	nop
 8003ff0:	3728      	adds	r7, #40	; 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	50000100 	.word	0x50000100
 8003ffc:	50000500 	.word	0x50000500
 8004000:	50000400 	.word	0x50000400
 8004004:	50000300 	.word	0x50000300
 8004008:	50000700 	.word	0x50000700

0800400c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0b6      	sub	sp, #216	; 0xd8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x24>
 8004052:	2302      	movs	r3, #2
 8004054:	f000 bc13 	b.w	800487e <HAL_ADC_ConfigChannel+0x84a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f93b 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 83f3 	bne.w	8004858 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	f7fe ffd3 	bl	800302a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff f929 	bl	80032e0 <LL_ADC_REG_IsConversionOngoing>
 800408e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff f935 	bl	8003306 <LL_ADC_INJ_IsConversionOngoing>
 800409c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f040 81d9 	bne.w	800445c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 81d4 	bne.w	800445c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040bc:	d10f      	bne.n	80040de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2200      	movs	r2, #0
 80040c8:	4619      	mov	r1, r3
 80040ca:	f7fe ffed 	bl	80030a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ff81 	bl	8002fde <LL_ADC_SetSamplingTimeCommonConfig>
 80040dc:	e00e      	b.n	80040fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f7fe ffdc 	bl	80030a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe ff71 	bl	8002fde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	08db      	lsrs	r3, r3, #3
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d022      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800412e:	f7fe fecb 	bl	8002ec8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6919      	ldr	r1, [r3, #16]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	461a      	mov	r2, r3
 8004140:	f7fe ff17 	bl	8002f72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6919      	ldr	r1, [r3, #16]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	7f1b      	ldrb	r3, [r3, #28]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d102      	bne.n	800415a <HAL_ADC_ConfigChannel+0x126>
 8004154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004158:	e000      	b.n	800415c <HAL_ADC_ConfigChannel+0x128>
 800415a:	2300      	movs	r3, #0
 800415c:	461a      	mov	r2, r3
 800415e:	f7fe ff23 	bl	8002fa8 <LL_ADC_SetOffsetSaturation>
 8004162:	e17b      	b.n	800445c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fed0 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x15c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fec5 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	f003 021f 	and.w	r2, r3, #31
 800418e:	e01e      	b.n	80041ce <HAL_ADC_ConfigChannel+0x19a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe feba 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80041be:	2320      	movs	r3, #32
 80041c0:	e004      	b.n	80041cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80041c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x1b2>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0e9b      	lsrs	r3, r3, #26
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	e018      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1e4>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80041f2:	fa93 f3a3 	rbit	r3, r3
 80041f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80041fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004202:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e004      	b.n	8004218 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800420e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fe89 	bl	8002f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fe6d 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004236:	4603      	mov	r3, r0
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x222>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2101      	movs	r1, #1
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fe62 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	f003 021f 	and.w	r2, r3, #31
 8004254:	e01e      	b.n	8004294 <HAL_ADC_ConfigChannel+0x260>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2101      	movs	r1, #1
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fe57 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004274:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800427c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004284:	2320      	movs	r3, #32
 8004286:	e004      	b.n	8004292 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x278>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	e018      	b.n	80042de <HAL_ADC_ConfigChannel+0x2aa>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80042c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80042c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80042d0:	2320      	movs	r3, #32
 80042d2:	e004      	b.n	80042de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80042d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042de:	429a      	cmp	r2, r3
 80042e0:	d106      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fe26 	bl	8002f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fe0a 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_ADC_ConfigChannel+0x2e8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe fdff 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	e01e      	b.n	800435a <HAL_ADC_ConfigChannel+0x326>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2102      	movs	r1, #2
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe fdf4 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 8004328:	4603      	mov	r3, r0
 800432a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800433a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800433e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004342:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800434e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x33e>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	e016      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x36c>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800438a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004392:	2320      	movs	r3, #32
 8004394:	e004      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d106      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2200      	movs	r2, #0
 80043aa:	2102      	movs	r1, #2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fdc5 	bl	8002f3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2103      	movs	r1, #3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fda9 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <HAL_ADC_ConfigChannel+0x3aa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2103      	movs	r1, #3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd9e 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	0e9b      	lsrs	r3, r3, #26
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	e017      	b.n	800440e <HAL_ADC_ConfigChannel+0x3da>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2103      	movs	r1, #3
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe fd93 	bl	8002f10 <LL_ADC_GetOffsetChannel>
 80043ea:	4603      	mov	r3, r0
 80043ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80043f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004400:	2320      	movs	r3, #32
 8004402:	e003      	b.n	800440c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004416:	2b00      	cmp	r3, #0
 8004418:	d105      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x3f2>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	e011      	b.n	800444a <HAL_ADC_ConfigChannel+0x416>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004436:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800444a:	429a      	cmp	r2, r3
 800444c:	d106      	bne.n	800445c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	2103      	movs	r1, #3
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fd70 	bl	8002f3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe ff03 	bl	800326c <LL_ADC_IsEnabled>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f040 813d 	bne.w	80046e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f7fe fe40 	bl	8003100 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4aa2      	ldr	r2, [pc, #648]	; (8004710 <HAL_ADC_ConfigChannel+0x6dc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	f040 812e 	bne.w	80046e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x480>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	3301      	adds	r3, #1
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2b09      	cmp	r3, #9
 80044aa:	bf94      	ite	ls
 80044ac:	2301      	movls	r3, #1
 80044ae:	2300      	movhi	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e019      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x4b4>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80044c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80044c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e003      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80044d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d2:	fab3 f383 	clz	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2b09      	cmp	r3, #9
 80044e0:	bf94      	ite	ls
 80044e2:	2301      	movls	r3, #1
 80044e4:	2300      	movhi	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d079      	beq.n	80045e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x4d4>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	0e9b      	lsrs	r3, r3, #26
 80044fe:	3301      	adds	r3, #1
 8004500:	069b      	lsls	r3, r3, #26
 8004502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004506:	e015      	b.n	8004534 <HAL_ADC_ConfigChannel+0x500>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800451a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e003      	b.n	800452c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	3301      	adds	r3, #1
 800452e:	069b      	lsls	r3, r3, #26
 8004530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x520>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0e9b      	lsrs	r3, r3, #26
 8004546:	3301      	adds	r3, #1
 8004548:	f003 031f 	and.w	r3, r3, #31
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	e017      	b.n	8004584 <HAL_ADC_ConfigChannel+0x550>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800456c:	2320      	movs	r3, #32
 800456e:	e003      	b.n	8004578 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	3301      	adds	r3, #1
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2101      	movs	r1, #1
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	ea42 0103 	orr.w	r1, r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x576>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	4613      	mov	r3, r2
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	4413      	add	r3, r2
 80045a6:	051b      	lsls	r3, r3, #20
 80045a8:	e018      	b.n	80045dc <HAL_ADC_ConfigChannel+0x5a8>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80045bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80045c2:	2320      	movs	r3, #32
 80045c4:	e003      	b.n	80045ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 021f 	and.w	r2, r3, #31
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045dc:	430b      	orrs	r3, r1
 80045de:	e07e      	b.n	80046de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x5c8>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0e9b      	lsrs	r3, r3, #26
 80045f2:	3301      	adds	r3, #1
 80045f4:	069b      	lsls	r3, r3, #26
 80045f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045fa:	e015      	b.n	8004628 <HAL_ADC_ConfigChannel+0x5f4>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	fa93 f3a3 	rbit	r3, r3
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004614:	2320      	movs	r3, #32
 8004616:	e003      	b.n	8004620 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	fab3 f383 	clz	r3, r3
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3301      	adds	r3, #1
 8004622:	069b      	lsls	r3, r3, #26
 8004624:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x614>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	3301      	adds	r3, #1
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	e017      	b.n	8004678 <HAL_ADC_ConfigChannel+0x644>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	fa93 f3a3 	rbit	r3, r3
 8004654:	61fb      	str	r3, [r7, #28]
  return result;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004660:	2320      	movs	r3, #32
 8004662:	e003      	b.n	800466c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	3301      	adds	r3, #1
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	ea42 0103 	orr.w	r1, r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x670>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0e9b      	lsrs	r3, r3, #26
 800468e:	3301      	adds	r3, #1
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	3b1e      	subs	r3, #30
 800469c:	051b      	lsls	r3, r3, #20
 800469e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046a2:	e01b      	b.n	80046dc <HAL_ADC_ConfigChannel+0x6a8>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	613b      	str	r3, [r7, #16]
  return result;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e003      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	3301      	adds	r3, #1
 80046ca:	f003 021f 	and.w	r2, r3, #31
 80046ce:	4613      	mov	r3, r2
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	4413      	add	r3, r2
 80046d4:	3b1e      	subs	r3, #30
 80046d6:	051b      	lsls	r3, r3, #20
 80046d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046dc:	430b      	orrs	r3, r1
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	6892      	ldr	r2, [r2, #8]
 80046e2:	4619      	mov	r1, r3
 80046e4:	f7fe fce0 	bl	80030a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_ADC_ConfigChannel+0x6e0>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80be 	beq.w	8004872 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046fe:	d004      	beq.n	800470a <HAL_ADC_ConfigChannel+0x6d6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a04      	ldr	r2, [pc, #16]	; (8004718 <HAL_ADC_ConfigChannel+0x6e4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10a      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x6ec>
 800470a:	4b04      	ldr	r3, [pc, #16]	; (800471c <HAL_ADC_ConfigChannel+0x6e8>)
 800470c:	e009      	b.n	8004722 <HAL_ADC_ConfigChannel+0x6ee>
 800470e:	bf00      	nop
 8004710:	407f0000 	.word	0x407f0000
 8004714:	80080000 	.word	0x80080000
 8004718:	50000100 	.word	0x50000100
 800471c:	50000300 	.word	0x50000300
 8004720:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_ADC_ConfigChannel+0x854>)
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fbc2 	bl	8002eac <LL_ADC_GetCommonPathInternalCh>
 8004728:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a56      	ldr	r2, [pc, #344]	; (800488c <HAL_ADC_ConfigChannel+0x858>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x70c>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a55      	ldr	r2, [pc, #340]	; (8004890 <HAL_ADC_ConfigChannel+0x85c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d13a      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d134      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004754:	d005      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x72e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a4e      	ldr	r2, [pc, #312]	; (8004894 <HAL_ADC_ConfigChannel+0x860>)
 800475c:	4293      	cmp	r3, r2
 800475e:	f040 8085 	bne.w	800486c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800476a:	d004      	beq.n	8004776 <HAL_ADC_ConfigChannel+0x742>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a49      	ldr	r2, [pc, #292]	; (8004898 <HAL_ADC_ConfigChannel+0x864>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x746>
 8004776:	4a49      	ldr	r2, [pc, #292]	; (800489c <HAL_ADC_ConfigChannel+0x868>)
 8004778:	e000      	b.n	800477c <HAL_ADC_ConfigChannel+0x748>
 800477a:	4a43      	ldr	r2, [pc, #268]	; (8004888 <HAL_ADC_ConfigChannel+0x854>)
 800477c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fb7d 	bl	8002e86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800478c:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_ADC_ConfigChannel+0x86c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	4a44      	ldr	r2, [pc, #272]	; (80048a4 <HAL_ADC_ConfigChannel+0x870>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047a6:	e002      	b.n	80047ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f9      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047b4:	e05a      	b.n	800486c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	; (80048a8 <HAL_ADC_ConfigChannel+0x874>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d125      	bne.n	800480c <HAL_ADC_ConfigChannel+0x7d8>
 80047c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11f      	bne.n	800480c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a31      	ldr	r2, [pc, #196]	; (8004898 <HAL_ADC_ConfigChannel+0x864>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d104      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x7ac>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a34      	ldr	r2, [pc, #208]	; (80048ac <HAL_ADC_ConfigChannel+0x878>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d047      	beq.n	8004870 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e8:	d004      	beq.n	80047f4 <HAL_ADC_ConfigChannel+0x7c0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2a      	ldr	r2, [pc, #168]	; (8004898 <HAL_ADC_ConfigChannel+0x864>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x7c4>
 80047f4:	4a29      	ldr	r2, [pc, #164]	; (800489c <HAL_ADC_ConfigChannel+0x868>)
 80047f6:	e000      	b.n	80047fa <HAL_ADC_ConfigChannel+0x7c6>
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_ADC_ConfigChannel+0x854>)
 80047fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe fb3e 	bl	8002e86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800480a:	e031      	b.n	8004870 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <HAL_ADC_ConfigChannel+0x87c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d12d      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d127      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <HAL_ADC_ConfigChannel+0x864>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004834:	d004      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x80c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a17      	ldr	r2, [pc, #92]	; (8004898 <HAL_ADC_ConfigChannel+0x864>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x810>
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_ADC_ConfigChannel+0x868>)
 8004842:	e000      	b.n	8004846 <HAL_ADC_ConfigChannel+0x812>
 8004844:	4a10      	ldr	r2, [pc, #64]	; (8004888 <HAL_ADC_ConfigChannel+0x854>)
 8004846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800484a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7fe fb18 	bl	8002e86 <LL_ADC_SetCommonPathInternalCh>
 8004856:	e00c      	b.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800486a:	e002      	b.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004870:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800487a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800487e:	4618      	mov	r0, r3
 8004880:	37d8      	adds	r7, #216	; 0xd8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	50000700 	.word	0x50000700
 800488c:	c3210000 	.word	0xc3210000
 8004890:	90c00010 	.word	0x90c00010
 8004894:	50000600 	.word	0x50000600
 8004898:	50000100 	.word	0x50000100
 800489c:	50000300 	.word	0x50000300
 80048a0:	20000000 	.word	0x20000000
 80048a4:	053e2d63 	.word	0x053e2d63
 80048a8:	c7520000 	.word	0xc7520000
 80048ac:	50000500 	.word	0x50000500
 80048b0:	cb840000 	.word	0xcb840000

080048b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fcd3 	bl	800326c <LL_ADC_IsEnabled>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d14d      	bne.n	8004968 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	4b28      	ldr	r3, [pc, #160]	; (8004974 <ADC_Enable+0xc0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	f043 0210 	orr.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e039      	b.n	800496a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fc8e 	bl	800321c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004900:	f7fe fa80 	bl	8002e04 <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004906:	e028      	b.n	800495a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fe fcad 	bl	800326c <LL_ADC_IsEnabled>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fc7d 	bl	800321c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004922:	f7fe fa6f 	bl	8002e04 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d914      	bls.n	800495a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d00d      	beq.n	800495a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e007      	b.n	800496a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d1cf      	bne.n	8004908 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	8000003f 	.word	0x8000003f

08004978 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fc84 	bl	8003292 <LL_ADC_IsDisableOngoing>
 800498a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fc6b 	bl	800326c <LL_ADC_IsEnabled>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d047      	beq.n	8004a2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d144      	bne.n	8004a2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030d 	and.w	r3, r3, #13
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10c      	bne.n	80049ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fc45 	bl	8003244 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2203      	movs	r2, #3
 80049c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049c2:	f7fe fa1f 	bl	8002e04 <HAL_GetTick>
 80049c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049c8:	e029      	b.n	8004a1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	f043 0210 	orr.w	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049da:	f043 0201 	orr.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e023      	b.n	8004a2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049e6:	f7fe fa0d 	bl	8002e04 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d914      	bls.n	8004a1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f043 0210 	orr.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e007      	b.n	8004a2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1dc      	bne.n	80049e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <LL_ADC_IsEnabled>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <LL_ADC_IsEnabled+0x18>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <LL_ADC_IsEnabled+0x1a>
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_ADC_StartCalibration>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004a6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_ADC_IsCalibrationOnGoing>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa2:	d101      	bne.n	8004aa8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d101      	bne.n	8004ace <LL_ADC_REG_IsConversionOngoing+0x18>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_ADCEx_Calibration_Start+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e04d      	b.n	8004b94 <HAL_ADCEx_Calibration_Start+0xb8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff39 	bl	8004978 <ADC_Disable>
 8004b06:	4603      	mov	r3, r0
 8004b08:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d136      	bne.n	8004b7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b18:	f023 0302 	bic.w	r3, r3, #2
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff ff96 	bl	8004a5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b30:	e014      	b.n	8004b5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d90d      	bls.n	8004b5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f023 0312 	bic.w	r3, r3, #18
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e01b      	b.n	8004b94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff94 	bl	8004a8e <LL_ADC_IsCalibrationOnGoing>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e2      	bne.n	8004b32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f023 0303 	bic.w	r3, r3, #3
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b7c:	e005      	b.n	8004b8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	0004de01 	.word	0x0004de01

08004ba0 <HAL_ADCEx_MultiModeGetValue>:
  * @brief  Return the last ADC Master and Slave regular conversions results when in multimode configuration.
  * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
  * @retval The converted data values.
  */
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning if no assert_param check */
  /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
  UNUSED(hadc);

  /* Pointer to the common control register  */
  tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bb0:	d004      	beq.n	8004bbc <HAL_ADCEx_MultiModeGetValue+0x1c>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <HAL_ADCEx_MultiModeGetValue+0x34>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADCEx_MultiModeGetValue+0x20>
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_ADCEx_MultiModeGetValue+0x38>)
 8004bbe:	e000      	b.n	8004bc2 <HAL_ADCEx_MultiModeGetValue+0x22>
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <HAL_ADCEx_MultiModeGetValue+0x3c>)
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Return the multi mode conversion value */
  return tmpADC_Common->CDR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68db      	ldr	r3, [r3, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	50000100 	.word	0x50000100
 8004bd8:	50000300 	.word	0x50000300
 8004bdc:	50000700 	.word	0x50000700

08004be0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b0a1      	sub	sp, #132	; 0x84
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0e7      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c7a:	d102      	bne.n	8004c82 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004c7c:	4b6f      	ldr	r3, [pc, #444]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	e009      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6e      	ldr	r2, [pc, #440]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d102      	bne.n	8004c92 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004c8c:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	e001      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f043 0220 	orr.w	r2, r3, #32
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0be      	b.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fefd 	bl	8004ab6 <LL_ADC_REG_IsConversionOngoing>
 8004cbc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fef7 	bl	8004ab6 <LL_ADC_REG_IsConversionOngoing>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 80a0 	bne.w	8004e10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 809c 	bne.w	8004e10 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce0:	d004      	beq.n	8004cec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a55      	ldr	r2, [pc, #340]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d101      	bne.n	8004cf0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004cec:	4b56      	ldr	r3, [pc, #344]	; (8004e48 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004cee:	e000      	b.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004cf0:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004cf2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d04b      	beq.n	8004d94 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d0e:	035b      	lsls	r3, r3, #13
 8004d10:	430b      	orrs	r3, r1
 8004d12:	431a      	orrs	r2, r3
 8004d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d20:	d004      	beq.n	8004d2c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a45      	ldr	r2, [pc, #276]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10f      	bne.n	8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004d2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004d30:	f7ff fe81 	bl	8004a36 <LL_ADC_IsEnabled>
 8004d34:	4604      	mov	r4, r0
 8004d36:	4841      	ldr	r0, [pc, #260]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004d38:	f7ff fe7d 	bl	8004a36 <LL_ADC_IsEnabled>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4323      	orrs	r3, r4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e012      	b.n	8004d72 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004d4c:	483c      	ldr	r0, [pc, #240]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004d4e:	f7ff fe72 	bl	8004a36 <LL_ADC_IsEnabled>
 8004d52:	4604      	mov	r4, r0
 8004d54:	483b      	ldr	r0, [pc, #236]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004d56:	f7ff fe6e 	bl	8004a36 <LL_ADC_IsEnabled>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	431c      	orrs	r4, r3
 8004d5e:	483c      	ldr	r0, [pc, #240]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004d60:	f7ff fe69 	bl	8004a36 <LL_ADC_IsEnabled>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4323      	orrs	r3, r4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d056      	beq.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004d7e:	f023 030f 	bic.w	r3, r3, #15
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	6811      	ldr	r1, [r2, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d90:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d92:	e047      	b.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004da8:	d004      	beq.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10f      	bne.n	8004dd4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004db4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004db8:	f7ff fe3d 	bl	8004a36 <LL_ADC_IsEnabled>
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	481f      	ldr	r0, [pc, #124]	; (8004e3c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004dc0:	f7ff fe39 	bl	8004a36 <LL_ADC_IsEnabled>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4323      	orrs	r3, r4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e012      	b.n	8004dfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004dd4:	481a      	ldr	r0, [pc, #104]	; (8004e40 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004dd6:	f7ff fe2e 	bl	8004a36 <LL_ADC_IsEnabled>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	4819      	ldr	r0, [pc, #100]	; (8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004dde:	f7ff fe2a 	bl	8004a36 <LL_ADC_IsEnabled>
 8004de2:	4603      	mov	r3, r0
 8004de4:	431c      	orrs	r4, r3
 8004de6:	481a      	ldr	r0, [pc, #104]	; (8004e50 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004de8:	f7ff fe25 	bl	8004a36 <LL_ADC_IsEnabled>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4323      	orrs	r3, r4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d012      	beq.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e06:	f023 030f 	bic.w	r3, r3, #15
 8004e0a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e0c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e0e:	e009      	b.n	8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	f043 0220 	orr.w	r2, r3, #32
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e22:	e000      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3784      	adds	r7, #132	; 0x84
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	50000100 	.word	0x50000100
 8004e40:	50000400 	.word	0x50000400
 8004e44:	50000500 	.word	0x50000500
 8004e48:	50000300 	.word	0x50000300
 8004e4c:	50000700 	.word	0x50000700
 8004e50:	50000600 	.word	0x50000600

08004e54 <__NVIC_SetPriorityGrouping>:
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e64:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <__NVIC_SetPriorityGrouping+0x44>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e86:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <__NVIC_SetPriorityGrouping+0x44>)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	60d3      	str	r3, [r2, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <__NVIC_GetPriorityGrouping>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 0307 	and.w	r3, r3, #7
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000ed00 	.word	0xe000ed00

08004eb8 <__NVIC_EnableIRQ>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	db0b      	blt.n	8004ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	f003 021f 	and.w	r2, r3, #31
 8004ed0:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <__NVIC_EnableIRQ+0x38>)
 8004ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2001      	movs	r0, #1
 8004eda:	fa00 f202 	lsl.w	r2, r0, r2
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e100 	.word	0xe000e100

08004ef4 <__NVIC_SetPriority>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	4603      	mov	r3, r0
 8004efc:	6039      	str	r1, [r7, #0]
 8004efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db0a      	blt.n	8004f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	490c      	ldr	r1, [pc, #48]	; (8004f40 <__NVIC_SetPriority+0x4c>)
 8004f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f12:	0112      	lsls	r2, r2, #4
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	440b      	add	r3, r1
 8004f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f1c:	e00a      	b.n	8004f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4908      	ldr	r1, [pc, #32]	; (8004f44 <__NVIC_SetPriority+0x50>)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	0112      	lsls	r2, r2, #4
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	440b      	add	r3, r1
 8004f32:	761a      	strb	r2, [r3, #24]
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000e100 	.word	0xe000e100
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <NVIC_EncodePriority>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f1c3 0307 	rsb	r3, r3, #7
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	bf28      	it	cs
 8004f66:	2304      	movcs	r3, #4
 8004f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d902      	bls.n	8004f78 <NVIC_EncodePriority+0x30>
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	3b03      	subs	r3, #3
 8004f76:	e000      	b.n	8004f7a <NVIC_EncodePriority+0x32>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43da      	mvns	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	401a      	ands	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	43d9      	mvns	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa0:	4313      	orrs	r3, r2
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3724      	adds	r7, #36	; 0x24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <SysTick_Config>:
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc0:	d301      	bcc.n	8004fc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e00f      	b.n	8004fe6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <SysTick_Config+0x40>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fce:	210f      	movs	r1, #15
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd4:	f7ff ff8e 	bl	8004ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <SysTick_Config+0x40>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fde:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <SysTick_Config+0x40>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010

08004ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff29 	bl	8004e54 <__NVIC_SetPriorityGrouping>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b086      	sub	sp, #24
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005018:	f7ff ff40 	bl	8004e9c <__NVIC_GetPriorityGrouping>
 800501c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	6978      	ldr	r0, [r7, #20]
 8005024:	f7ff ff90 	bl	8004f48 <NVIC_EncodePriority>
 8005028:	4602      	mov	r2, r0
 800502a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff5f 	bl	8004ef4 <__NVIC_SetPriority>
}
 8005036:	bf00      	nop
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	4603      	mov	r3, r0
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff33 	bl	8004eb8 <__NVIC_EnableIRQ>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ffa4 	bl	8004fb0 <SysTick_Config>
 8005068:	4603      	mov	r3, r0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005082:	e15a      	b.n	800533a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 814c 	beq.w	8005334 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00b      	beq.n	80050bc <HAL_GPIO_Init+0x48>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d007      	beq.n	80050bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050b0:	2b11      	cmp	r3, #17
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b12      	cmp	r3, #18
 80050ba:	d130      	bne.n	800511e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	2203      	movs	r2, #3
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050f2:	2201      	movs	r2, #1
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	091b      	lsrs	r3, r3, #4
 8005108:	f003 0201 	and.w	r2, r3, #1
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	2203      	movs	r2, #3
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0xea>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b12      	cmp	r3, #18
 800515c:	d123      	bne.n	80051a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	08da      	lsrs	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3208      	adds	r2, #8
 8005166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	220f      	movs	r2, #15
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	08da      	lsrs	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3208      	adds	r2, #8
 80051a0:	6939      	ldr	r1, [r7, #16]
 80051a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	005b      	lsls	r3, r3, #1
 80051b0:	2203      	movs	r2, #3
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0203 	and.w	r2, r3, #3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80a6 	beq.w	8005334 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <HAL_GPIO_Init+0x2e4>)
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	4a5a      	ldr	r2, [pc, #360]	; (8005358 <HAL_GPIO_Init+0x2e4>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6613      	str	r3, [r2, #96]	; 0x60
 80051f4:	4b58      	ldr	r3, [pc, #352]	; (8005358 <HAL_GPIO_Init+0x2e4>)
 80051f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005200:	4a56      	ldr	r2, [pc, #344]	; (800535c <HAL_GPIO_Init+0x2e8>)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	3302      	adds	r3, #2
 8005208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	220f      	movs	r2, #15
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800522a:	d01f      	beq.n	800526c <HAL_GPIO_Init+0x1f8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a4c      	ldr	r2, [pc, #304]	; (8005360 <HAL_GPIO_Init+0x2ec>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d019      	beq.n	8005268 <HAL_GPIO_Init+0x1f4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a4b      	ldr	r2, [pc, #300]	; (8005364 <HAL_GPIO_Init+0x2f0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_GPIO_Init+0x1f0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a4a      	ldr	r2, [pc, #296]	; (8005368 <HAL_GPIO_Init+0x2f4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00d      	beq.n	8005260 <HAL_GPIO_Init+0x1ec>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a49      	ldr	r2, [pc, #292]	; (800536c <HAL_GPIO_Init+0x2f8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <HAL_GPIO_Init+0x1e8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a48      	ldr	r2, [pc, #288]	; (8005370 <HAL_GPIO_Init+0x2fc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_GPIO_Init+0x1e4>
 8005254:	2305      	movs	r3, #5
 8005256:	e00a      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 8005258:	2306      	movs	r3, #6
 800525a:	e008      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 800525c:	2304      	movs	r3, #4
 800525e:	e006      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 8005260:	2303      	movs	r3, #3
 8005262:	e004      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 8005264:	2302      	movs	r3, #2
 8005266:	e002      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <HAL_GPIO_Init+0x1fa>
 800526c:	2300      	movs	r3, #0
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	f002 0203 	and.w	r2, r2, #3
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	4093      	lsls	r3, r2
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800527e:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_GPIO_Init+0x2e8>)
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	3302      	adds	r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800528c:	4b39      	ldr	r3, [pc, #228]	; (8005374 <HAL_GPIO_Init+0x300>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43db      	mvns	r3, r3
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <HAL_GPIO_Init+0x300>)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <HAL_GPIO_Init+0x300>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80052da:	4a26      	ldr	r2, [pc, #152]	; (8005374 <HAL_GPIO_Init+0x300>)
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_GPIO_Init+0x300>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005304:	4a1b      	ldr	r2, [pc, #108]	; (8005374 <HAL_GPIO_Init+0x300>)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_GPIO_Init+0x300>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800532e:	4a11      	ldr	r2, [pc, #68]	; (8005374 <HAL_GPIO_Init+0x300>)
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3301      	adds	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	f47f ae9d 	bne.w	8005084 <HAL_GPIO_Init+0x10>
  }
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40021000 	.word	0x40021000
 800535c:	40010000 	.word	0x40010000
 8005360:	48000400 	.word	0x48000400
 8005364:	48000800 	.word	0x48000800
 8005368:	48000c00 	.word	0x48000c00
 800536c:	48001000 	.word	0x48001000
 8005370:	48001400 	.word	0x48001400
 8005374:	40010400 	.word	0x40010400

08005378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	807b      	strh	r3, [r7, #2]
 8005384:	4613      	mov	r3, r2
 8005386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005388:	787b      	ldrb	r3, [r7, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005394:	e002      	b.n	800539c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4013      	ands	r3, r2
 80053c0:	041a      	lsls	r2, r3, #16
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	43d9      	mvns	r1, r3
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	400b      	ands	r3, r1
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	619a      	str	r2, [r3, #24]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d006      	beq.n	8005400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053f2:	4a05      	ldr	r2, [pc, #20]	; (8005408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fc fa9e 	bl	800193c <HAL_GPIO_EXTI_Callback>
  }
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40010400 	.word	0x40010400

0800540c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d141      	bne.n	800549e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800541a:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005426:	d131      	bne.n	800548c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005428:	4b47      	ldr	r3, [pc, #284]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542e:	4a46      	ldr	r2, [pc, #280]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005438:	4b43      	ldr	r3, [pc, #268]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005440:	4a41      	ldr	r2, [pc, #260]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005448:	4b40      	ldr	r3, [pc, #256]	; (800554c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2232      	movs	r2, #50	; 0x32
 800544e:	fb02 f303 	mul.w	r3, r2, r3
 8005452:	4a3f      	ldr	r2, [pc, #252]	; (8005550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	0c9b      	lsrs	r3, r3, #18
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800545e:	e002      	b.n	8005466 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3b01      	subs	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d102      	bne.n	800547a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f2      	bne.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800547a:	4b33      	ldr	r3, [pc, #204]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005486:	d158      	bne.n	800553a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e057      	b.n	800553c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800548c:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	4a2d      	ldr	r2, [pc, #180]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800549c:	e04d      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a4:	d141      	bne.n	800552a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054a6:	4b28      	ldr	r3, [pc, #160]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b2:	d131      	bne.n	8005518 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ba:	4a23      	ldr	r2, [pc, #140]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054c4:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054cc:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054d4:	4b1d      	ldr	r3, [pc, #116]	; (800554c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2232      	movs	r2, #50	; 0x32
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	0c9b      	lsrs	r3, r3, #18
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ea:	e002      	b.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054f2:	4b15      	ldr	r3, [pc, #84]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fe:	d102      	bne.n	8005506 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f2      	bne.n	80054ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005506:	4b10      	ldr	r3, [pc, #64]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005512:	d112      	bne.n	800553a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e011      	b.n	800553c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551e:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005528:	e007      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005532:	4a05      	ldr	r2, [pc, #20]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005538:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	40007000 	.word	0x40007000
 800554c:	20000000 	.word	0x20000000
 8005550:	431bde83 	.word	0x431bde83

08005554 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800555e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005562:	6093      	str	r3, [r2, #8]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40007000 	.word	0x40007000

08005574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e306      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d075      	beq.n	800567e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005592:	4b97      	ldr	r3, [pc, #604]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800559c:	4b94      	ldr	r3, [pc, #592]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d102      	bne.n	80055b2 <HAL_RCC_OscConfig+0x3e>
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d002      	beq.n	80055b8 <HAL_RCC_OscConfig+0x44>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d10b      	bne.n	80055d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	4b8d      	ldr	r3, [pc, #564]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05b      	beq.n	800567c <HAL_RCC_OscConfig+0x108>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d157      	bne.n	800567c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e2e1      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d106      	bne.n	80055e8 <HAL_RCC_OscConfig+0x74>
 80055da:	4b85      	ldr	r3, [pc, #532]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a84      	ldr	r2, [pc, #528]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80055e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e01d      	b.n	8005624 <HAL_RCC_OscConfig+0xb0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0x98>
 80055f2:	4b7f      	ldr	r3, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a7e      	ldr	r2, [pc, #504]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80055f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b7c      	ldr	r3, [pc, #496]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7b      	ldr	r2, [pc, #492]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e00b      	b.n	8005624 <HAL_RCC_OscConfig+0xb0>
 800560c:	4b78      	ldr	r3, [pc, #480]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a77      	ldr	r2, [pc, #476]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	4b75      	ldr	r3, [pc, #468]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a74      	ldr	r2, [pc, #464]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800561e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d013      	beq.n	8005654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fd fbea 	bl	8002e04 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fd fbe6 	bl	8002e04 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e2a6      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005646:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0f0      	beq.n	8005634 <HAL_RCC_OscConfig+0xc0>
 8005652:	e014      	b.n	800567e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd fbd6 	bl	8002e04 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fd fbd2 	bl	8002e04 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e292      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800566e:	4b60      	ldr	r3, [pc, #384]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0xe8>
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800567c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d075      	beq.n	8005776 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800568a:	4b59      	ldr	r3, [pc, #356]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005694:	4b56      	ldr	r3, [pc, #344]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d102      	bne.n	80056aa <HAL_RCC_OscConfig+0x136>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d002      	beq.n	80056b0 <HAL_RCC_OscConfig+0x13c>
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d11f      	bne.n	80056f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b0:	4b4f      	ldr	r3, [pc, #316]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RCC_OscConfig+0x154>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e265      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c8:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	4946      	ldr	r1, [pc, #280]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056dc:	4b45      	ldr	r3, [pc, #276]	; (80057f4 <HAL_RCC_OscConfig+0x280>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd fb43 	bl	8002d6c <HAL_InitTick>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d043      	beq.n	8005774 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e251      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056f8:	4b3d      	ldr	r3, [pc, #244]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a3c      	ldr	r2, [pc, #240]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80056fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005704:	f7fd fb7e 	bl	8002e04 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570c:	f7fd fb7a 	bl	8002e04 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e23a      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571e:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572a:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	492d      	ldr	r1, [pc, #180]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
 800573e:	e01a      	b.n	8005776 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd fb5a 	bl	8002e04 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005754:	f7fd fb56 	bl	8002e04 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e216      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005766:	4b22      	ldr	r3, [pc, #136]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x1e0>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d041      	beq.n	8005806 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01c      	beq.n	80057c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800578a:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7fd fb33 	bl	8002e04 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fd fb2f 	bl	8002e04 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e1ef      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b4:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ef      	beq.n	80057a2 <HAL_RCC_OscConfig+0x22e>
 80057c2:	e020      	b.n	8005806 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80057c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ca:	4a09      	ldr	r2, [pc, #36]	; (80057f0 <HAL_RCC_OscConfig+0x27c>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d4:	f7fd fb16 	bl	8002e04 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057da:	e00d      	b.n	80057f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057dc:	f7fd fb12 	bl	8002e04 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d906      	bls.n	80057f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1d2      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f8:	4b8c      	ldr	r3, [pc, #560]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ea      	bne.n	80057dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80a6 	beq.w	8005960 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005814:	2300      	movs	r3, #0
 8005816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005818:	4b84      	ldr	r3, [pc, #528]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_OscConfig+0x2b4>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_RCC_OscConfig+0x2b6>
 8005828:	2300      	movs	r3, #0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582e:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	4a7e      	ldr	r2, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6593      	str	r3, [r2, #88]	; 0x58
 800583a:	4b7c      	ldr	r3, [pc, #496]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005846:	2301      	movs	r3, #1
 8005848:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800584a:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <HAL_RCC_OscConfig+0x4bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d118      	bne.n	8005888 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005856:	4b76      	ldr	r3, [pc, #472]	; (8005a30 <HAL_RCC_OscConfig+0x4bc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a75      	ldr	r2, [pc, #468]	; (8005a30 <HAL_RCC_OscConfig+0x4bc>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005862:	f7fd facf 	bl	8002e04 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fd facb 	bl	8002e04 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e18b      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800587c:	4b6c      	ldr	r3, [pc, #432]	; (8005a30 <HAL_RCC_OscConfig+0x4bc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d108      	bne.n	80058a2 <HAL_RCC_OscConfig+0x32e>
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a0:	e024      	b.n	80058ec <HAL_RCC_OscConfig+0x378>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d110      	bne.n	80058cc <HAL_RCC_OscConfig+0x358>
 80058aa:	4b60      	ldr	r3, [pc, #384]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	4a5e      	ldr	r2, [pc, #376]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058b2:	f043 0304 	orr.w	r3, r3, #4
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ba:	4b5c      	ldr	r3, [pc, #368]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	4a5a      	ldr	r2, [pc, #360]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ca:	e00f      	b.n	80058ec <HAL_RCC_OscConfig+0x378>
 80058cc:	4b57      	ldr	r3, [pc, #348]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	4a56      	ldr	r2, [pc, #344]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fd fa86 	bl	8002e04 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fd fa82 	bl	8002e04 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e140      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	4b46      	ldr	r3, [pc, #280]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ed      	beq.n	80058fc <HAL_RCC_OscConfig+0x388>
 8005920:	e015      	b.n	800594e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fd fa6f 	bl	8002e04 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fd fa6b 	bl	8002e04 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e129      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005940:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ed      	bne.n	800592a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800594e:	7ffb      	ldrb	r3, [r7, #31]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b35      	ldr	r3, [pc, #212]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4a34      	ldr	r2, [pc, #208]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01c      	beq.n	80059ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005974:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fd fa3e 	bl	8002e04 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598c:	f7fd fa3a 	bl	8002e04 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0fa      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80059a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ef      	beq.n	800598c <HAL_RCC_OscConfig+0x418>
 80059ac:	e01b      	b.n	80059e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059ae:	4b1f      	ldr	r3, [pc, #124]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80059b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b4:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fd fa21 	bl	8002e04 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c6:	f7fd fa1d 	bl	8002e04 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0dd      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d8:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80059da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ef      	bne.n	80059c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80d1 	beq.w	8005b92 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	f000 808b 	beq.w	8005b14 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d15e      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <HAL_RCC_OscConfig+0x4b8>)
 8005a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fd f9f7 	bl	8002e04 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a18:	e00c      	b.n	8005a34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1a:	f7fd f9f3 	bl	8002e04 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d905      	bls.n	8005a34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e0b3      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ec      	bne.n	8005a1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a40:	4b56      	ldr	r3, [pc, #344]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <HAL_RCC_OscConfig+0x62c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6a11      	ldr	r1, [r2, #32]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0112      	lsls	r2, r2, #4
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a5a:	0212      	lsls	r2, r2, #8
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a62:	0852      	lsrs	r2, r2, #1
 8005a64:	3a01      	subs	r2, #1
 8005a66:	0552      	lsls	r2, r2, #21
 8005a68:	4311      	orrs	r1, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a6e:	0852      	lsrs	r2, r2, #1
 8005a70:	3a01      	subs	r2, #1
 8005a72:	0652      	lsls	r2, r2, #25
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a7a:	06d2      	lsls	r2, r2, #27
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	4947      	ldr	r1, [pc, #284]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a84:	4b45      	ldr	r3, [pc, #276]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a44      	ldr	r2, [pc, #272]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a41      	ldr	r2, [pc, #260]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fd f9b2 	bl	8002e04 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa4:	f7fd f9ae 	bl	8002e04 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e06e      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x530>
 8005ac2:	e066      	b.n	8005b92 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac4:	4b35      	ldr	r3, [pc, #212]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a34      	ldr	r2, [pc, #208]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ad0:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ad6:	f023 0303 	bic.w	r3, r3, #3
 8005ada:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005adc:	4b2f      	ldr	r3, [pc, #188]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a2e      	ldr	r2, [pc, #184]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005ae2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fd f98a 	bl	8002e04 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fd f986 	bl	8002e04 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e046      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b06:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCC_OscConfig+0x580>
 8005b12:	e03e      	b.n	8005b92 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e039      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <HAL_RCC_OscConfig+0x628>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f003 0203 	and.w	r2, r3, #3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d12c      	bne.n	8005b8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d123      	bne.n	8005b8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d11b      	bne.n	8005b8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d113      	bne.n	8005b8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	3b01      	subs	r3, #1
 8005b74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d109      	bne.n	8005b8e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	085b      	lsrs	r3, r3, #1
 8005b86:	3b01      	subs	r3, #1
 8005b88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3720      	adds	r7, #32
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	019f800c 	.word	0x019f800c

08005ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e11e      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b91      	ldr	r3, [pc, #580]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d910      	bls.n	8005bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b8e      	ldr	r3, [pc, #568]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 020f 	bic.w	r2, r3, #15
 8005bd2:	498c      	ldr	r1, [pc, #560]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b8a      	ldr	r3, [pc, #552]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e106      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d073      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d129      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c00:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0f4      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c10:	f000 f99e 	bl	8005f50 <RCC_GetSysClockFreqFromPLLSource>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4a7c      	ldr	r2, [pc, #496]	; (8005e0c <HAL_RCC_ClockConfig+0x268>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d93f      	bls.n	8005c9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c1e:	4b7a      	ldr	r3, [pc, #488]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d033      	beq.n	8005c9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12f      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c3e:	4b72      	ldr	r3, [pc, #456]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c46:	4a70      	ldr	r2, [pc, #448]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e024      	b.n	8005c9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c5c:	4b6a      	ldr	r3, [pc, #424]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d109      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0c6      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6c:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0be      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c7c:	f000 f8ce 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4a61      	ldr	r2, [pc, #388]	; (8005e0c <HAL_RCC_ClockConfig+0x268>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d909      	bls.n	8005c9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c8a:	4b5f      	ldr	r3, [pc, #380]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c92:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	4b5a      	ldr	r3, [pc, #360]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4957      	ldr	r1, [pc, #348]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb0:	f7fd f8a8 	bl	8002e04 <HAL_GetTick>
 8005cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fd f8a4 	bl	8002e04 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e095      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	4b4e      	ldr	r3, [pc, #312]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 020c 	and.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1eb      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d023      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf8:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	4a42      	ldr	r2, [pc, #264]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d10:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d18:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d20:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4936      	ldr	r1, [pc, #216]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d105      	bne.n	8005d46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d3a:	4b33      	ldr	r3, [pc, #204]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a32      	ldr	r2, [pc, #200]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d46:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d21d      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d54:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f023 020f 	bic.w	r2, r3, #15
 8005d5c:	4929      	ldr	r1, [pc, #164]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d64:	f7fd f84e 	bl	8002e04 <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fd f84a 	bl	8002e04 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e03b      	b.n	8005dfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b20      	ldr	r3, [pc, #128]	; (8005e04 <HAL_RCC_ClockConfig+0x260>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1ed      	bne.n	8005d6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4917      	ldr	r1, [pc, #92]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	490f      	ldr	r1, [pc, #60]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dce:	f000 f825 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	490c      	ldr	r1, [pc, #48]	; (8005e10 <HAL_RCC_ClockConfig+0x26c>)
 8005de0:	5ccb      	ldrb	r3, [r1, r3]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <HAL_RCC_ClockConfig+0x270>)
 8005dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dee:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <HAL_RCC_ClockConfig+0x274>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fc ffba 	bl	8002d6c <HAL_InitTick>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40022000 	.word	0x40022000
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	04c4b400 	.word	0x04c4b400
 8005e10:	0800afc8 	.word	0x0800afc8
 8005e14:	20000000 	.word	0x20000000
 8005e18:	20000004 	.word	0x20000004

08005e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e22:	4b2c      	ldr	r3, [pc, #176]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d102      	bne.n	8005e34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e047      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 030c 	and.w	r3, r3, #12
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d102      	bne.n	8005e46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e40:	4b26      	ldr	r3, [pc, #152]	; (8005edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e03e      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e46:	4b23      	ldr	r3, [pc, #140]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b0c      	cmp	r3, #12
 8005e50:	d136      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e52:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	3301      	adds	r3, #1
 8005e68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d10c      	bne.n	8005e8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	4a16      	ldr	r2, [pc, #88]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7a:	68d2      	ldr	r2, [r2, #12]
 8005e7c:	0a12      	lsrs	r2, r2, #8
 8005e7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	617b      	str	r3, [r7, #20]
      break;
 8005e88:	e00c      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e8a:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e94:	68d2      	ldr	r2, [r2, #12]
 8005e96:	0a12      	lsrs	r2, r2, #8
 8005e98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
      break;
 8005ea2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0e5b      	lsrs	r3, r3, #25
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	e001      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ec4:	693b      	ldr	r3, [r7, #16]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	00f42400 	.word	0x00f42400
 8005edc:	016e3600 	.word	0x016e3600

08005ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000000 	.word	0x20000000

08005ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005efc:	f7ff fff0 	bl	8005ee0 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4904      	ldr	r1, [pc, #16]	; (8005f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	0800afd8 	.word	0x0800afd8

08005f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f28:	f7ff ffda 	bl	8005ee0 <HAL_RCC_GetHCLKFreq>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	0adb      	lsrs	r3, r3, #11
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	4904      	ldr	r1, [pc, #16]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f3a:	5ccb      	ldrb	r3, [r1, r3]
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	0800afd8 	.word	0x0800afd8

08005f50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f56:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d10c      	bne.n	8005f8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f74:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f7e:	68d2      	ldr	r2, [r2, #12]
 8005f80:	0a12      	lsrs	r2, r2, #8
 8005f82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	617b      	str	r3, [r7, #20]
    break;
 8005f8c:	e00c      	b.n	8005fa8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f8e:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	0a12      	lsrs	r2, r2, #8
 8005f9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fa0:	fb02 f303 	mul.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
    break;
 8005fa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	0e5b      	lsrs	r3, r3, #25
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fc2:	687b      	ldr	r3, [r7, #4]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	016e3600 	.word	0x016e3600
 8005fd8:	00f42400 	.word	0x00f42400

08005fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe8:	2300      	movs	r3, #0
 8005fea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8098 	beq.w	800612a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffe:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	4a3f      	ldr	r2, [pc, #252]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006014:	6593      	str	r3, [r2, #88]	; 0x58
 8006016:	4b3d      	ldr	r3, [pc, #244]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006022:	2301      	movs	r3, #1
 8006024:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006026:	4b3a      	ldr	r3, [pc, #232]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a39      	ldr	r2, [pc, #228]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006032:	f7fc fee7 	bl	8002e04 <HAL_GetTick>
 8006036:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006038:	e009      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800603a:	f7fc fee3 	bl	8002e04 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d902      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	74fb      	strb	r3, [r7, #19]
        break;
 800604c:	e005      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800604e:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0ef      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800605a:	7cfb      	ldrb	r3, [r7, #19]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d159      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006060:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01e      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	d019      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800607c:	4b23      	ldr	r3, [pc, #140]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006086:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006088:	4b20      	ldr	r3, [pc, #128]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	4a1f      	ldr	r2, [pc, #124]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006098:	4b1c      	ldr	r3, [pc, #112]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fc fea3 	bl	8002e04 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c0:	e00b      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fc fe9f 	bl	8002e04 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d902      	bls.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	74fb      	strb	r3, [r7, #19]
            break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ec      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060e8:	7cfb      	ldrb	r3, [r7, #19]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	4903      	ldr	r1, [pc, #12]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006104:	e008      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006106:	7cfb      	ldrb	r3, [r7, #19]
 8006108:	74bb      	strb	r3, [r7, #18]
 800610a:	e005      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800610c:	40021000 	.word	0x40021000
 8006110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	7cfb      	ldrb	r3, [r7, #19]
 8006116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006118:	7c7b      	ldrb	r3, [r7, #17]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800611e:	4ba7      	ldr	r3, [pc, #668]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	4aa6      	ldr	r2, [pc, #664]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006136:	4ba1      	ldr	r3, [pc, #644]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613c:	f023 0203 	bic.w	r2, r3, #3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	499d      	ldr	r1, [pc, #628]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006158:	4b98      	ldr	r3, [pc, #608]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 020c 	bic.w	r2, r3, #12
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4995      	ldr	r1, [pc, #596]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800617a:	4b90      	ldr	r3, [pc, #576]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	498c      	ldr	r1, [pc, #560]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800619c:	4b87      	ldr	r3, [pc, #540]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	4984      	ldr	r1, [pc, #528]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061be:	4b7f      	ldr	r3, [pc, #508]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	497b      	ldr	r1, [pc, #492]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061e0:	4b76      	ldr	r3, [pc, #472]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	4973      	ldr	r1, [pc, #460]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006202:	4b6e      	ldr	r3, [pc, #440]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	496a      	ldr	r1, [pc, #424]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006224:	4b65      	ldr	r3, [pc, #404]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	4962      	ldr	r1, [pc, #392]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006234:	4313      	orrs	r3, r2
 8006236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006246:	4b5d      	ldr	r3, [pc, #372]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	4959      	ldr	r1, [pc, #356]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006268:	4b54      	ldr	r3, [pc, #336]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800626e:	f023 0203 	bic.w	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	4951      	ldr	r1, [pc, #324]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628a:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4948      	ldr	r1, [pc, #288]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062ac:	4b43      	ldr	r3, [pc, #268]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	4940      	ldr	r1, [pc, #256]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ca:	d105      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a3a      	ldr	r2, [pc, #232]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062e4:	4b35      	ldr	r3, [pc, #212]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	4932      	ldr	r1, [pc, #200]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006304:	4b2d      	ldr	r3, [pc, #180]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a2c      	ldr	r2, [pc, #176]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800630a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800630e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	4924      	ldr	r1, [pc, #144]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800633a:	d105      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800633c:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006346:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006354:	4b19      	ldr	r3, [pc, #100]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	4916      	ldr	r1, [pc, #88]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006372:	d105      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006374:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a10      	ldr	r2, [pc, #64]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800637e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d019      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4908      	ldr	r1, [pc, #32]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063aa:	d109      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a02      	ldr	r2, [pc, #8]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b6:	60d3      	str	r3, [r2, #12]
 80063b8:	e002      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063cc:	4b29      	ldr	r3, [pc, #164]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	4926      	ldr	r1, [pc, #152]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ea:	d105      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063ec:	4b21      	ldr	r3, [pc, #132]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	4918      	ldr	r1, [pc, #96]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d105      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4a12      	ldr	r2, [pc, #72]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800642a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d015      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800643e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	490a      	ldr	r1, [pc, #40]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800645a:	d105      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a04      	ldr	r2, [pc, #16]	; (8006474 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006466:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006468:	7cbb      	ldrb	r3, [r7, #18]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000

08006478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e049      	b.n	800651e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fc faa0 	bl	80029e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f000 fb68 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d001      	beq.n	8006540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e054      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d022      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d01d      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d018      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <HAL_TIM_Base_Start_IT+0xd8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <HAL_TIM_Base_Start_IT+0xdc>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00e      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <HAL_TIM_Base_Start_IT+0xe0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d009      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <HAL_TIM_Base_Start_IT+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d004      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1b      	ldr	r2, [pc, #108]	; (8006610 <HAL_TIM_Base_Start_IT+0xe8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d115      	bne.n	80065d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	4b19      	ldr	r3, [pc, #100]	; (8006614 <HAL_TIM_Base_Start_IT+0xec>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b06      	cmp	r3, #6
 80065b8:	d015      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d011      	beq.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	e008      	b.n	80065e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e000      	b.n	80065e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40013400 	.word	0x40013400
 800660c:	40014000 	.word	0x40014000
 8006610:	40015000 	.word	0x40015000
 8006614:	00010007 	.word	0x00010007

08006618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d122      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d11b      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0202 	mvn.w	r2, #2
 8006644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa78 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa6a 	bl	8006b3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa7b 	bl	8006b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0204 	mvn.w	r2, #4
 8006698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa4e 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa40 	bl	8006b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa51 	bl	8006b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0208 	mvn.w	r2, #8
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa24 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa16 	bl	8006b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa27 	bl	8006b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b10      	cmp	r3, #16
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0210 	mvn.w	r2, #16
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2208      	movs	r2, #8
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9fa 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f9ec 	bl	8006b3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f9fd 	bl	8006b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10e      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0201 	mvn.w	r2, #1
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fc f964 	bl	8002a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d10e      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d107      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbc6 	bl	8006f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fbb9 	bl	8006f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d10e      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d107      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800681a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f9ab 	bl	8006b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0220 	mvn.w	r2, #32
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb79 	bl	8006f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800685c:	d10f      	bne.n	800687e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686c:	d107      	bne.n	800687e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fb7f 	bl	8006f7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800688c:	d10f      	bne.n	80068ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800689c:	d107      	bne.n	80068ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80068a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb71 	bl	8006f90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068bc:	d10f      	bne.n	80068de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068cc:	d107      	bne.n	80068de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80068d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fb63 	bl	8006fa4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068ec:	d10f      	bne.n	800690e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068fc:	d107      	bne.n	800690e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fb55 	bl	8006fb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_TIM_ConfigClockSource+0x18>
 800692c:	2302      	movs	r3, #2
 800692e:	e0f5      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x204>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800694e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006952:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6e      	ldr	r2, [pc, #440]	; (8006b24 <HAL_TIM_ConfigClockSource+0x20c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	f000 80c1 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006970:	4a6c      	ldr	r2, [pc, #432]	; (8006b24 <HAL_TIM_ConfigClockSource+0x20c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	f200 80c6 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006978:	4a6b      	ldr	r2, [pc, #428]	; (8006b28 <HAL_TIM_ConfigClockSource+0x210>)
 800697a:	4293      	cmp	r3, r2
 800697c:	f000 80b9 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006980:	4a69      	ldr	r2, [pc, #420]	; (8006b28 <HAL_TIM_ConfigClockSource+0x210>)
 8006982:	4293      	cmp	r3, r2
 8006984:	f200 80be 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006988:	4a68      	ldr	r2, [pc, #416]	; (8006b2c <HAL_TIM_ConfigClockSource+0x214>)
 800698a:	4293      	cmp	r3, r2
 800698c:	f000 80b1 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006990:	4a66      	ldr	r2, [pc, #408]	; (8006b2c <HAL_TIM_ConfigClockSource+0x214>)
 8006992:	4293      	cmp	r3, r2
 8006994:	f200 80b6 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006998:	4a65      	ldr	r2, [pc, #404]	; (8006b30 <HAL_TIM_ConfigClockSource+0x218>)
 800699a:	4293      	cmp	r3, r2
 800699c:	f000 80a9 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 80069a0:	4a63      	ldr	r2, [pc, #396]	; (8006b30 <HAL_TIM_ConfigClockSource+0x218>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	f200 80ae 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069a8:	4a62      	ldr	r2, [pc, #392]	; (8006b34 <HAL_TIM_ConfigClockSource+0x21c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	f000 80a1 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 80069b0:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <HAL_TIM_ConfigClockSource+0x21c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	f200 80a6 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069b8:	4a5f      	ldr	r2, [pc, #380]	; (8006b38 <HAL_TIM_ConfigClockSource+0x220>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	f000 8099 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 80069c0:	4a5d      	ldr	r2, [pc, #372]	; (8006b38 <HAL_TIM_ConfigClockSource+0x220>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	f200 809e 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069cc:	f000 8091 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 80069d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069d4:	f200 8096 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069dc:	f000 8089 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 80069e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e4:	f200 808e 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ec:	d03e      	beq.n	8006a6c <HAL_TIM_ConfigClockSource+0x154>
 80069ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f2:	f200 8087 	bhi.w	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	f000 8085 	beq.w	8006b08 <HAL_TIM_ConfigClockSource+0x1f0>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d87f      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a04:	2b70      	cmp	r3, #112	; 0x70
 8006a06:	d01a      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0x126>
 8006a08:	2b70      	cmp	r3, #112	; 0x70
 8006a0a:	d87b      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a0c:	2b60      	cmp	r3, #96	; 0x60
 8006a0e:	d050      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x19a>
 8006a10:	2b60      	cmp	r3, #96	; 0x60
 8006a12:	d877      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	d03c      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x17a>
 8006a18:	2b50      	cmp	r3, #80	; 0x50
 8006a1a:	d873      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d058      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x1ba>
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d86f      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a24:	2b30      	cmp	r3, #48	; 0x30
 8006a26:	d064      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006a28:	2b30      	cmp	r3, #48	; 0x30
 8006a2a:	d86b      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d060      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d867      	bhi.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d05c      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d05a      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a3c:	e062      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x1ec>
      TIM_ETR_SetConfig(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f000 f9c1 	bl	8006dd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	609a      	str	r2, [r3, #8]
      break;
 8006a6a:	e04e      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_ETR_SetConfig(htim->Instance,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6899      	ldr	r1, [r3, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f000 f9aa 	bl	8006dd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a8e:	609a      	str	r2, [r3, #8]
      break;
 8006a90:	e03b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f000 f91c 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2150      	movs	r1, #80	; 0x50
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f975 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006ab0:	e02b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6859      	ldr	r1, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f000 f93b 	bl	8006d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2160      	movs	r1, #96	; 0x60
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 f965 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006ad0:	e01b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f000 f8fc 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2140      	movs	r1, #64	; 0x40
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f955 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 8006af0:	e00b      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f000 f94c 	bl	8006d9a <TIM_ITRx_SetConfig>
        break;
 8006b02:	e002      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8006b04:	bf00      	nop
 8006b06:	e000      	b.n	8006b0a <HAL_TIM_ConfigClockSource+0x1f2>
      break;
 8006b08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	00100070 	.word	0x00100070
 8006b28:	00100060 	.word	0x00100060
 8006b2c:	00100050 	.word	0x00100050
 8006b30:	00100040 	.word	0x00100040
 8006b34:	00100030 	.word	0x00100030
 8006b38:	00100020 	.word	0x00100020

08006b3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a46      	ldr	r2, [pc, #280]	; (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d017      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d013      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a43      	ldr	r2, [pc, #268]	; (8006cbc <TIM_Base_SetConfig+0x130>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a42      	ldr	r2, [pc, #264]	; (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a41      	ldr	r2, [pc, #260]	; (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a40      	ldr	r2, [pc, #256]	; (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_Base_SetConfig+0x48>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3f      	ldr	r2, [pc, #252]	; (8006ccc <TIM_Base_SetConfig+0x140>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d108      	bne.n	8006be6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d023      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf4:	d01f      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a30      	ldr	r2, [pc, #192]	; (8006cbc <TIM_Base_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01b      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2f      	ldr	r2, [pc, #188]	; (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d017      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2e      	ldr	r2, [pc, #184]	; (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d013      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2d      	ldr	r2, [pc, #180]	; (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00f      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2d      	ldr	r2, [pc, #180]	; (8006cd0 <TIM_Base_SetConfig+0x144>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00b      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2c      	ldr	r2, [pc, #176]	; (8006cd4 <TIM_Base_SetConfig+0x148>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d007      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	; (8006cd8 <TIM_Base_SetConfig+0x14c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d003      	beq.n	8006c36 <TIM_Base_SetConfig+0xaa>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a26      	ldr	r2, [pc, #152]	; (8006ccc <TIM_Base_SetConfig+0x140>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d108      	bne.n	8006c48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <TIM_Base_SetConfig+0x110>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00f      	beq.n	8006c9c <TIM_Base_SetConfig+0x110>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <TIM_Base_SetConfig+0x144>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00b      	beq.n	8006c9c <TIM_Base_SetConfig+0x110>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <TIM_Base_SetConfig+0x148>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d007      	beq.n	8006c9c <TIM_Base_SetConfig+0x110>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <TIM_Base_SetConfig+0x14c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_Base_SetConfig+0x110>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0d      	ldr	r2, [pc, #52]	; (8006ccc <TIM_Base_SetConfig+0x140>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d103      	bne.n	8006ca4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	615a      	str	r2, [r3, #20]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40015000 	.word	0x40015000
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f023 0210 	bic.w	r2, r3, #16
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f043 0307 	orr.w	r3, r3, #7
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	021a      	lsls	r2, r3, #8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	609a      	str	r2, [r3, #8]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e074      	b.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a34      	ldr	r2, [pc, #208]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d009      	beq.n	8006e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a33      	ldr	r2, [pc, #204]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a31      	ldr	r2, [pc, #196]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d108      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d01d      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a1c      	ldr	r2, [pc, #112]	; (8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a11      	ldr	r2, [pc, #68]	; (8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d10c      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40013400 	.word	0x40013400
 8006f2c:	40015000 	.word	0x40015000
 8006f30:	40000400 	.word	0x40000400
 8006f34:	40000800 	.word	0x40000800
 8006f38:	40000c00 	.word	0x40000c00
 8006f3c:	40014000 	.word	0x40014000

08006f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e042      	b.n	8007064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7fb fe15 	bl	8002c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2224      	movs	r2, #36	; 0x24
 8006ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8c2 	bl	8007198 <UART_SetConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e022      	b.n	8007064 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fbb2 	bl	8007790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800703a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800704a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc39 	bl	80078d4 <UART_CheckIdleState>
 8007062:	4603      	mov	r3, r0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	; 0x28
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007082:	2b20      	cmp	r3, #32
 8007084:	f040 8083 	bne.w	800718e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_UART_Transmit+0x28>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e07b      	b.n	8007190 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Transmit+0x3a>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e074      	b.n	8007190 <HAL_UART_Transmit+0x124>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2221      	movs	r2, #33	; 0x21
 80070ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070be:	f7fb fea1 	bl	8002e04 <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070dc:	d108      	bne.n	80070f0 <HAL_UART_Transmit+0x84>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d104      	bne.n	80070f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	e003      	b.n	80070f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007100:	e02c      	b.n	800715c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2200      	movs	r2, #0
 800710a:	2180      	movs	r1, #128	; 0x80
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 fc2c 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e039      	b.n	8007190 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	3302      	adds	r3, #2
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e007      	b.n	800714a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3301      	adds	r3, #1
 8007148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1cc      	bne.n	8007102 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2200      	movs	r2, #0
 8007170:	2140      	movs	r1, #64	; 0x40
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fbf9 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e006      	b.n	8007190 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	e000      	b.n	8007190 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800718e:	2302      	movs	r3, #2
  }
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800719c:	b08c      	sub	sp, #48	; 0x30
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	4313      	orrs	r3, r2
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	4baa      	ldr	r3, [pc, #680]	; (8007470 <UART_SetConfig+0x2d8>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a9f      	ldr	r2, [pc, #636]	; (8007474 <UART_SetConfig+0x2dc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007200:	4313      	orrs	r3, r2
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800720e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	6812      	ldr	r2, [r2, #0]
 8007216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007218:	430b      	orrs	r3, r1
 800721a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	f023 010f 	bic.w	r1, r3, #15
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a90      	ldr	r2, [pc, #576]	; (8007478 <UART_SetConfig+0x2e0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d125      	bne.n	8007288 <UART_SetConfig+0xf0>
 800723c:	4b8f      	ldr	r3, [pc, #572]	; (800747c <UART_SetConfig+0x2e4>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b03      	cmp	r3, #3
 8007248:	d81a      	bhi.n	8007280 <UART_SetConfig+0xe8>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0xb8>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007261 	.word	0x08007261
 8007254:	08007271 	.word	0x08007271
 8007258:	08007269 	.word	0x08007269
 800725c:	08007279 	.word	0x08007279
 8007260:	2301      	movs	r3, #1
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e116      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007268:	2302      	movs	r3, #2
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e112      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e10e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800727e:	e10a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007286:	e106      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a7c      	ldr	r2, [pc, #496]	; (8007480 <UART_SetConfig+0x2e8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d138      	bne.n	8007304 <UART_SetConfig+0x16c>
 8007292:	4b7a      	ldr	r3, [pc, #488]	; (800747c <UART_SetConfig+0x2e4>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b0c      	cmp	r3, #12
 800729e:	d82d      	bhi.n	80072fc <UART_SetConfig+0x164>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <UART_SetConfig+0x110>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	080072fd 	.word	0x080072fd
 80072b4:	080072fd 	.word	0x080072fd
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	080072fd 	.word	0x080072fd
 80072c0:	080072fd 	.word	0x080072fd
 80072c4:	080072fd 	.word	0x080072fd
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072fd 	.word	0x080072fd
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	080072fd 	.word	0x080072fd
 80072d8:	080072f5 	.word	0x080072f5
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e0d8      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072e4:	2302      	movs	r3, #2
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e0d4      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072ec:	2304      	movs	r3, #4
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e0d0      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072f4:	2308      	movs	r3, #8
 80072f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fa:	e0cc      	b.n	8007496 <UART_SetConfig+0x2fe>
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007302:	e0c8      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5e      	ldr	r2, [pc, #376]	; (8007484 <UART_SetConfig+0x2ec>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d125      	bne.n	800735a <UART_SetConfig+0x1c2>
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <UART_SetConfig+0x2e4>)
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007318:	2b30      	cmp	r3, #48	; 0x30
 800731a:	d016      	beq.n	800734a <UART_SetConfig+0x1b2>
 800731c:	2b30      	cmp	r3, #48	; 0x30
 800731e:	d818      	bhi.n	8007352 <UART_SetConfig+0x1ba>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d00a      	beq.n	800733a <UART_SetConfig+0x1a2>
 8007324:	2b20      	cmp	r3, #32
 8007326:	d814      	bhi.n	8007352 <UART_SetConfig+0x1ba>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <UART_SetConfig+0x19a>
 800732c:	2b10      	cmp	r3, #16
 800732e:	d008      	beq.n	8007342 <UART_SetConfig+0x1aa>
 8007330:	e00f      	b.n	8007352 <UART_SetConfig+0x1ba>
 8007332:	2300      	movs	r3, #0
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007338:	e0ad      	b.n	8007496 <UART_SetConfig+0x2fe>
 800733a:	2302      	movs	r3, #2
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007340:	e0a9      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007342:	2304      	movs	r3, #4
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007348:	e0a5      	b.n	8007496 <UART_SetConfig+0x2fe>
 800734a:	2308      	movs	r3, #8
 800734c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007350:	e0a1      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007352:	2310      	movs	r3, #16
 8007354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007358:	e09d      	b.n	8007496 <UART_SetConfig+0x2fe>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a4a      	ldr	r2, [pc, #296]	; (8007488 <UART_SetConfig+0x2f0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d125      	bne.n	80073b0 <UART_SetConfig+0x218>
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <UART_SetConfig+0x2e4>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800736e:	2bc0      	cmp	r3, #192	; 0xc0
 8007370:	d016      	beq.n	80073a0 <UART_SetConfig+0x208>
 8007372:	2bc0      	cmp	r3, #192	; 0xc0
 8007374:	d818      	bhi.n	80073a8 <UART_SetConfig+0x210>
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d00a      	beq.n	8007390 <UART_SetConfig+0x1f8>
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d814      	bhi.n	80073a8 <UART_SetConfig+0x210>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <UART_SetConfig+0x1f0>
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d008      	beq.n	8007398 <UART_SetConfig+0x200>
 8007386:	e00f      	b.n	80073a8 <UART_SetConfig+0x210>
 8007388:	2300      	movs	r3, #0
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e082      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007390:	2302      	movs	r3, #2
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e07e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007398:	2304      	movs	r3, #4
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e07a      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073a0:	2308      	movs	r3, #8
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a6:	e076      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073a8:	2310      	movs	r3, #16
 80073aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ae:	e072      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a35      	ldr	r2, [pc, #212]	; (800748c <UART_SetConfig+0x2f4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d12a      	bne.n	8007410 <UART_SetConfig+0x278>
 80073ba:	4b30      	ldr	r3, [pc, #192]	; (800747c <UART_SetConfig+0x2e4>)
 80073bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c8:	d01a      	beq.n	8007400 <UART_SetConfig+0x268>
 80073ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ce:	d81b      	bhi.n	8007408 <UART_SetConfig+0x270>
 80073d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d4:	d00c      	beq.n	80073f0 <UART_SetConfig+0x258>
 80073d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073da:	d815      	bhi.n	8007408 <UART_SetConfig+0x270>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <UART_SetConfig+0x250>
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	d008      	beq.n	80073f8 <UART_SetConfig+0x260>
 80073e6:	e00f      	b.n	8007408 <UART_SetConfig+0x270>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e052      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e04e      	b.n	8007496 <UART_SetConfig+0x2fe>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e04a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e046      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740e:	e042      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a17      	ldr	r2, [pc, #92]	; (8007474 <UART_SetConfig+0x2dc>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d13a      	bne.n	8007490 <UART_SetConfig+0x2f8>
 800741a:	4b18      	ldr	r3, [pc, #96]	; (800747c <UART_SetConfig+0x2e4>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007428:	d01a      	beq.n	8007460 <UART_SetConfig+0x2c8>
 800742a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742e:	d81b      	bhi.n	8007468 <UART_SetConfig+0x2d0>
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007434:	d00c      	beq.n	8007450 <UART_SetConfig+0x2b8>
 8007436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743a:	d815      	bhi.n	8007468 <UART_SetConfig+0x2d0>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <UART_SetConfig+0x2b0>
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007444:	d008      	beq.n	8007458 <UART_SetConfig+0x2c0>
 8007446:	e00f      	b.n	8007468 <UART_SetConfig+0x2d0>
 8007448:	2300      	movs	r3, #0
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e022      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007450:	2302      	movs	r3, #2
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e01e      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e01a      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e016      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e012      	b.n	8007496 <UART_SetConfig+0x2fe>
 8007470:	cfff69f3 	.word	0xcfff69f3
 8007474:	40008000 	.word	0x40008000
 8007478:	40013800 	.word	0x40013800
 800747c:	40021000 	.word	0x40021000
 8007480:	40004400 	.word	0x40004400
 8007484:	40004800 	.word	0x40004800
 8007488:	40004c00 	.word	0x40004c00
 800748c:	40005000 	.word	0x40005000
 8007490:	2310      	movs	r3, #16
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4aae      	ldr	r2, [pc, #696]	; (8007754 <UART_SetConfig+0x5bc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	f040 8097 	bne.w	80075d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074a6:	2b08      	cmp	r3, #8
 80074a8:	d823      	bhi.n	80074f2 <UART_SetConfig+0x35a>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <UART_SetConfig+0x318>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074f3 	.word	0x080074f3
 80074b8:	080074dd 	.word	0x080074dd
 80074bc:	080074f3 	.word	0x080074f3
 80074c0:	080074e3 	.word	0x080074e3
 80074c4:	080074f3 	.word	0x080074f3
 80074c8:	080074f3 	.word	0x080074f3
 80074cc:	080074f3 	.word	0x080074f3
 80074d0:	080074eb 	.word	0x080074eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d4:	f7fe fd10 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 80074d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074da:	e010      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074dc:	4b9e      	ldr	r3, [pc, #632]	; (8007758 <UART_SetConfig+0x5c0>)
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074e0:	e00d      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e2:	f7fe fc9b 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 80074e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074e8:	e009      	b.n	80074fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074f0:	e005      	b.n	80074fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8130 	beq.w	8007766 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	4a94      	ldr	r2, [pc, #592]	; (800775c <UART_SetConfig+0x5c4>)
 800750c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007510:	461a      	mov	r2, r3
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	fbb3 f3f2 	udiv	r3, r3, r2
 8007518:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	4413      	add	r3, r2
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	d305      	bcc.n	8007536 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	429a      	cmp	r2, r3
 8007534:	d903      	bls.n	800753e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800753c:	e113      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2200      	movs	r2, #0
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	60fa      	str	r2, [r7, #12]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	4a84      	ldr	r2, [pc, #528]	; (800775c <UART_SetConfig+0x5c4>)
 800754c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007550:	b29b      	uxth	r3, r3
 8007552:	2200      	movs	r2, #0
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800755c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007560:	f7f9 fb9a 	bl	8000c98 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	020b      	lsls	r3, r1, #8
 8007576:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800757a:	0202      	lsls	r2, r0, #8
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	6849      	ldr	r1, [r1, #4]
 8007580:	0849      	lsrs	r1, r1, #1
 8007582:	2000      	movs	r0, #0
 8007584:	460c      	mov	r4, r1
 8007586:	4605      	mov	r5, r0
 8007588:	eb12 0804 	adds.w	r8, r2, r4
 800758c:	eb43 0905 	adc.w	r9, r3, r5
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	469a      	mov	sl, r3
 8007598:	4693      	mov	fp, r2
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f9 fb79 	bl	8000c98 <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4613      	mov	r3, r2
 80075ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b4:	d308      	bcc.n	80075c8 <UART_SetConfig+0x430>
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075bc:	d204      	bcs.n	80075c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	e0ce      	b.n	8007766 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075ce:	e0ca      	b.n	8007766 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d8:	d167      	bne.n	80076aa <UART_SetConfig+0x512>
  {
    switch (clocksource)
 80075da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075de:	2b08      	cmp	r3, #8
 80075e0:	d827      	bhi.n	8007632 <UART_SetConfig+0x49a>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <UART_SetConfig+0x450>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	08007633 	.word	0x08007633
 80075f8:	08007623 	.word	0x08007623
 80075fc:	08007633 	.word	0x08007633
 8007600:	08007633 	.word	0x08007633
 8007604:	08007633 	.word	0x08007633
 8007608:	0800762b 	.word	0x0800762b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fe fc74 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007612:	e014      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fe fc86 	bl	8005f24 <HAL_RCC_GetPCLK2Freq>
 8007618:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800761a:	e010      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <UART_SetConfig+0x5c0>)
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007620:	e00d      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007622:	f7fe fbfb 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 8007626:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007628:	e009      	b.n	800763e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007630:	e005      	b.n	800763e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800763c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 8090 	beq.w	8007766 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	4a44      	ldr	r2, [pc, #272]	; (800775c <UART_SetConfig+0x5c4>)
 800764c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007650:	461a      	mov	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	fbb3 f3f2 	udiv	r3, r3, r2
 8007658:	005a      	lsls	r2, r3, #1
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	441a      	add	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	fbb2 f3f3 	udiv	r3, r2, r3
 800766a:	b29b      	uxth	r3, r3
 800766c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b0f      	cmp	r3, #15
 8007672:	d916      	bls.n	80076a2 <UART_SetConfig+0x50a>
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767a:	d212      	bcs.n	80076a2 <UART_SetConfig+0x50a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f023 030f 	bic.w	r3, r3, #15
 8007684:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	b29b      	uxth	r3, r3
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	b29a      	uxth	r2, r3
 8007692:	8bfb      	ldrh	r3, [r7, #30]
 8007694:	4313      	orrs	r3, r2
 8007696:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	8bfa      	ldrh	r2, [r7, #30]
 800769e:	60da      	str	r2, [r3, #12]
 80076a0:	e061      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076a8:	e05d      	b.n	8007766 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d827      	bhi.n	8007702 <UART_SetConfig+0x56a>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x520>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076e5 	.word	0x080076e5
 80076c0:	080076ed 	.word	0x080076ed
 80076c4:	08007703 	.word	0x08007703
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	08007703 	.word	0x08007703
 80076d0:	08007703 	.word	0x08007703
 80076d4:	08007703 	.word	0x08007703
 80076d8:	080076fb 	.word	0x080076fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076dc:	f7fe fc0c 	bl	8005ef8 <HAL_RCC_GetPCLK1Freq>
 80076e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e2:	e014      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e4:	f7fe fc1e 	bl	8005f24 <HAL_RCC_GetPCLK2Freq>
 80076e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076ea:	e010      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <UART_SetConfig+0x5c0>)
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076f0:	e00d      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fe fb93 	bl	8005e1c <HAL_RCC_GetSysClockFreq>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076f8:	e009      	b.n	800770e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007700:	e005      	b.n	800770e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800770c:	bf00      	nop
    }

    if (pclk != 0U)
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d028      	beq.n	8007766 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	4a10      	ldr	r2, [pc, #64]	; (800775c <UART_SetConfig+0x5c4>)
 800771a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800771e:	461a      	mov	r2, r3
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	fbb3 f2f2 	udiv	r2, r3, r2
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	441a      	add	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	fbb2 f3f3 	udiv	r3, r2, r3
 8007736:	b29b      	uxth	r3, r3
 8007738:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	2b0f      	cmp	r3, #15
 800773e:	d90f      	bls.n	8007760 <UART_SetConfig+0x5c8>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007746:	d20b      	bcs.n	8007760 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = usartdiv;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	e009      	b.n	8007766 <UART_SetConfig+0x5ce>
 8007752:	bf00      	nop
 8007754:	40008000 	.word	0x40008000
 8007758:	00f42400 	.word	0x00f42400
 800775c:	0800afe0 	.word	0x0800afe0
      }
      else
      {
        ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2201      	movs	r2, #1
 800776a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2201      	movs	r2, #1
 8007772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2200      	movs	r2, #0
 800777a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007782:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007786:	4618      	mov	r0, r3
 8007788:	3730      	adds	r7, #48	; 0x30
 800778a:	46bd      	mov	sp, r7
 800778c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00a      	beq.n	80077fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d01a      	beq.n	80078a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788e:	d10a      	bne.n	80078a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00a      	beq.n	80078c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	605a      	str	r2, [r3, #4]
  }
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078e4:	f7fb fa8e 	bl	8002e04 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10e      	bne.n	8007916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f82f 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e025      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b04      	cmp	r3, #4
 8007922:	d10e      	bne.n	8007942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f819 	bl	800796a <UART_WaitOnFlagUntilTimeout>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e00f      	b.n	8007962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800797a:	e062      	b.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007982:	d05e      	beq.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007984:	f7fb fa3e 	bl	8002e04 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	d302      	bcc.n	800799a <UART_WaitOnFlagUntilTimeout+0x30>
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d11d      	bne.n	80079d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e045      	b.n	8007a62 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d02e      	beq.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f2:	d126      	bne.n	8007a42 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e00f      	b.n	8007a62 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	bf0c      	ite	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	2300      	movne	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d08d      	beq.n	800797c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e027      	b.n	8007ad0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2224      	movs	r2, #36	; 0x24
 8007a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007aae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e02d      	b.n	8007b50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2224      	movs	r2, #36	; 0x24
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0201 	bic.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f84f 	bl	8007bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e02d      	b.n	8007bcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	; 0x24
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f811 	bl	8007bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d108      	bne.n	8007bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bf4:	e031      	b.n	8007c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	0e5b      	lsrs	r3, r3, #25
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	0f5b      	lsrs	r3, r3, #29
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 0307 	and.w	r3, r3, #7
 8007c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	7b3a      	ldrb	r2, [r7, #12]
 8007c22:	4911      	ldr	r1, [pc, #68]	; (8007c68 <UARTEx_SetNbDataToProcess+0x94>)
 8007c24:	5c8a      	ldrb	r2, [r1, r2]
 8007c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c2a:	7b3a      	ldrb	r2, [r7, #12]
 8007c2c:	490f      	ldr	r1, [pc, #60]	; (8007c6c <UARTEx_SetNbDataToProcess+0x98>)
 8007c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	7b7a      	ldrb	r2, [r7, #13]
 8007c40:	4909      	ldr	r1, [pc, #36]	; (8007c68 <UARTEx_SetNbDataToProcess+0x94>)
 8007c42:	5c8a      	ldrb	r2, [r1, r2]
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c48:	7b7a      	ldrb	r2, [r7, #13]
 8007c4a:	4908      	ldr	r1, [pc, #32]	; (8007c6c <UARTEx_SetNbDataToProcess+0x98>)
 8007c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	0800aff8 	.word	0x0800aff8
 8007c6c:	0800b000 	.word	0x0800b000

08007c70 <__errno>:
 8007c70:	4b01      	ldr	r3, [pc, #4]	; (8007c78 <__errno+0x8>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	2000000c 	.word	0x2000000c

08007c7c <__libc_init_array>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	4d0d      	ldr	r5, [pc, #52]	; (8007cb4 <__libc_init_array+0x38>)
 8007c80:	4c0d      	ldr	r4, [pc, #52]	; (8007cb8 <__libc_init_array+0x3c>)
 8007c82:	1b64      	subs	r4, r4, r5
 8007c84:	10a4      	asrs	r4, r4, #2
 8007c86:	2600      	movs	r6, #0
 8007c88:	42a6      	cmp	r6, r4
 8007c8a:	d109      	bne.n	8007ca0 <__libc_init_array+0x24>
 8007c8c:	4d0b      	ldr	r5, [pc, #44]	; (8007cbc <__libc_init_array+0x40>)
 8007c8e:	4c0c      	ldr	r4, [pc, #48]	; (8007cc0 <__libc_init_array+0x44>)
 8007c90:	f003 f8cc 	bl	800ae2c <_init>
 8007c94:	1b64      	subs	r4, r4, r5
 8007c96:	10a4      	asrs	r4, r4, #2
 8007c98:	2600      	movs	r6, #0
 8007c9a:	42a6      	cmp	r6, r4
 8007c9c:	d105      	bne.n	8007caa <__libc_init_array+0x2e>
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca4:	4798      	blx	r3
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7ee      	b.n	8007c88 <__libc_init_array+0xc>
 8007caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cae:	4798      	blx	r3
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	e7f2      	b.n	8007c9a <__libc_init_array+0x1e>
 8007cb4:	0800b3ec 	.word	0x0800b3ec
 8007cb8:	0800b3ec 	.word	0x0800b3ec
 8007cbc:	0800b3ec 	.word	0x0800b3ec
 8007cc0:	0800b3f0 	.word	0x0800b3f0

08007cc4 <malloc>:
 8007cc4:	4b02      	ldr	r3, [pc, #8]	; (8007cd0 <malloc+0xc>)
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f000 b877 	b.w	8007dbc <_malloc_r>
 8007cce:	bf00      	nop
 8007cd0:	2000000c 	.word	0x2000000c

08007cd4 <memset>:
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d100      	bne.n	8007cde <memset+0xa>
 8007cdc:	4770      	bx	lr
 8007cde:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce2:	e7f9      	b.n	8007cd8 <memset+0x4>

08007ce4 <_free_r>:
 8007ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d044      	beq.n	8007d74 <_free_r+0x90>
 8007cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cf6:	bfb8      	it	lt
 8007cf8:	18e4      	addlt	r4, r4, r3
 8007cfa:	f001 ff7d 	bl	8009bf8 <__malloc_lock>
 8007cfe:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <_free_r+0x94>)
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	b933      	cbnz	r3, 8007d14 <_free_r+0x30>
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	6014      	str	r4, [r2, #0]
 8007d0a:	b003      	add	sp, #12
 8007d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d10:	f001 bf78 	b.w	8009c04 <__malloc_unlock>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d908      	bls.n	8007d2a <_free_r+0x46>
 8007d18:	6825      	ldr	r5, [r4, #0]
 8007d1a:	1961      	adds	r1, r4, r5
 8007d1c:	428b      	cmp	r3, r1
 8007d1e:	bf01      	itttt	eq
 8007d20:	6819      	ldreq	r1, [r3, #0]
 8007d22:	685b      	ldreq	r3, [r3, #4]
 8007d24:	1949      	addeq	r1, r1, r5
 8007d26:	6021      	streq	r1, [r4, #0]
 8007d28:	e7ed      	b.n	8007d06 <_free_r+0x22>
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b10b      	cbz	r3, 8007d34 <_free_r+0x50>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d9fa      	bls.n	8007d2a <_free_r+0x46>
 8007d34:	6811      	ldr	r1, [r2, #0]
 8007d36:	1855      	adds	r5, r2, r1
 8007d38:	42a5      	cmp	r5, r4
 8007d3a:	d10b      	bne.n	8007d54 <_free_r+0x70>
 8007d3c:	6824      	ldr	r4, [r4, #0]
 8007d3e:	4421      	add	r1, r4
 8007d40:	1854      	adds	r4, r2, r1
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	d1e0      	bne.n	8007d0a <_free_r+0x26>
 8007d48:	681c      	ldr	r4, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	4421      	add	r1, r4
 8007d50:	6011      	str	r1, [r2, #0]
 8007d52:	e7da      	b.n	8007d0a <_free_r+0x26>
 8007d54:	d902      	bls.n	8007d5c <_free_r+0x78>
 8007d56:	230c      	movs	r3, #12
 8007d58:	6003      	str	r3, [r0, #0]
 8007d5a:	e7d6      	b.n	8007d0a <_free_r+0x26>
 8007d5c:	6825      	ldr	r5, [r4, #0]
 8007d5e:	1961      	adds	r1, r4, r5
 8007d60:	428b      	cmp	r3, r1
 8007d62:	bf04      	itt	eq
 8007d64:	6819      	ldreq	r1, [r3, #0]
 8007d66:	685b      	ldreq	r3, [r3, #4]
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	bf04      	itt	eq
 8007d6c:	1949      	addeq	r1, r1, r5
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	6054      	str	r4, [r2, #4]
 8007d72:	e7ca      	b.n	8007d0a <_free_r+0x26>
 8007d74:	b003      	add	sp, #12
 8007d76:	bd30      	pop	{r4, r5, pc}
 8007d78:	200004ec 	.word	0x200004ec

08007d7c <sbrk_aligned>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4e0e      	ldr	r6, [pc, #56]	; (8007db8 <sbrk_aligned+0x3c>)
 8007d80:	460c      	mov	r4, r1
 8007d82:	6831      	ldr	r1, [r6, #0]
 8007d84:	4605      	mov	r5, r0
 8007d86:	b911      	cbnz	r1, 8007d8e <sbrk_aligned+0x12>
 8007d88:	f000 fd9a 	bl	80088c0 <_sbrk_r>
 8007d8c:	6030      	str	r0, [r6, #0]
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 fd95 	bl	80088c0 <_sbrk_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d00a      	beq.n	8007db0 <sbrk_aligned+0x34>
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d007      	beq.n	8007db4 <sbrk_aligned+0x38>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 fd8a 	bl	80088c0 <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d101      	bne.n	8007db4 <sbrk_aligned+0x38>
 8007db0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	200004f0 	.word	0x200004f0

08007dbc <_malloc_r>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	1ccd      	adds	r5, r1, #3
 8007dc2:	f025 0503 	bic.w	r5, r5, #3
 8007dc6:	3508      	adds	r5, #8
 8007dc8:	2d0c      	cmp	r5, #12
 8007dca:	bf38      	it	cc
 8007dcc:	250c      	movcc	r5, #12
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	db01      	blt.n	8007dd8 <_malloc_r+0x1c>
 8007dd4:	42a9      	cmp	r1, r5
 8007dd6:	d905      	bls.n	8007de4 <_malloc_r+0x28>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	2600      	movs	r6, #0
 8007dde:	4630      	mov	r0, r6
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	4e2e      	ldr	r6, [pc, #184]	; (8007ea0 <_malloc_r+0xe4>)
 8007de6:	f001 ff07 	bl	8009bf8 <__malloc_lock>
 8007dea:	6833      	ldr	r3, [r6, #0]
 8007dec:	461c      	mov	r4, r3
 8007dee:	bb34      	cbnz	r4, 8007e3e <_malloc_r+0x82>
 8007df0:	4629      	mov	r1, r5
 8007df2:	4638      	mov	r0, r7
 8007df4:	f7ff ffc2 	bl	8007d7c <sbrk_aligned>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	d14d      	bne.n	8007e9a <_malloc_r+0xde>
 8007dfe:	6834      	ldr	r4, [r6, #0]
 8007e00:	4626      	mov	r6, r4
 8007e02:	2e00      	cmp	r6, #0
 8007e04:	d140      	bne.n	8007e88 <_malloc_r+0xcc>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	4631      	mov	r1, r6
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	eb04 0803 	add.w	r8, r4, r3
 8007e10:	f000 fd56 	bl	80088c0 <_sbrk_r>
 8007e14:	4580      	cmp	r8, r0
 8007e16:	d13a      	bne.n	8007e8e <_malloc_r+0xd2>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	3503      	adds	r5, #3
 8007e1c:	1a6d      	subs	r5, r5, r1
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7ff ffa5 	bl	8007d7c <sbrk_aligned>
 8007e32:	3001      	adds	r0, #1
 8007e34:	d02b      	beq.n	8007e8e <_malloc_r+0xd2>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	442b      	add	r3, r5
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	e00e      	b.n	8007e5c <_malloc_r+0xa0>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	1b52      	subs	r2, r2, r5
 8007e42:	d41e      	bmi.n	8007e82 <_malloc_r+0xc6>
 8007e44:	2a0b      	cmp	r2, #11
 8007e46:	d916      	bls.n	8007e76 <_malloc_r+0xba>
 8007e48:	1961      	adds	r1, r4, r5
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	6025      	str	r5, [r4, #0]
 8007e4e:	bf18      	it	ne
 8007e50:	6059      	strne	r1, [r3, #4]
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	bf08      	it	eq
 8007e56:	6031      	streq	r1, [r6, #0]
 8007e58:	5162      	str	r2, [r4, r5]
 8007e5a:	604b      	str	r3, [r1, #4]
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f104 060b 	add.w	r6, r4, #11
 8007e62:	f001 fecf 	bl	8009c04 <__malloc_unlock>
 8007e66:	f026 0607 	bic.w	r6, r6, #7
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	1af2      	subs	r2, r6, r3
 8007e6e:	d0b6      	beq.n	8007dde <_malloc_r+0x22>
 8007e70:	1b9b      	subs	r3, r3, r6
 8007e72:	50a3      	str	r3, [r4, r2]
 8007e74:	e7b3      	b.n	8007dde <_malloc_r+0x22>
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	bf0c      	ite	eq
 8007e7c:	6032      	streq	r2, [r6, #0]
 8007e7e:	605a      	strne	r2, [r3, #4]
 8007e80:	e7ec      	b.n	8007e5c <_malloc_r+0xa0>
 8007e82:	4623      	mov	r3, r4
 8007e84:	6864      	ldr	r4, [r4, #4]
 8007e86:	e7b2      	b.n	8007dee <_malloc_r+0x32>
 8007e88:	4634      	mov	r4, r6
 8007e8a:	6876      	ldr	r6, [r6, #4]
 8007e8c:	e7b9      	b.n	8007e02 <_malloc_r+0x46>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	603b      	str	r3, [r7, #0]
 8007e92:	4638      	mov	r0, r7
 8007e94:	f001 feb6 	bl	8009c04 <__malloc_unlock>
 8007e98:	e7a1      	b.n	8007dde <_malloc_r+0x22>
 8007e9a:	6025      	str	r5, [r4, #0]
 8007e9c:	e7de      	b.n	8007e5c <_malloc_r+0xa0>
 8007e9e:	bf00      	nop
 8007ea0:	200004ec 	.word	0x200004ec

08007ea4 <__cvt>:
 8007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	ec55 4b10 	vmov	r4, r5, d0
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	460e      	mov	r6, r1
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	bfbb      	ittet	lt
 8007eb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007eba:	461d      	movlt	r5, r3
 8007ebc:	2300      	movge	r3, #0
 8007ebe:	232d      	movlt	r3, #45	; 0x2d
 8007ec0:	700b      	strb	r3, [r1, #0]
 8007ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ec8:	4691      	mov	r9, r2
 8007eca:	f023 0820 	bic.w	r8, r3, #32
 8007ece:	bfbc      	itt	lt
 8007ed0:	4622      	movlt	r2, r4
 8007ed2:	4614      	movlt	r4, r2
 8007ed4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ed8:	d005      	beq.n	8007ee6 <__cvt+0x42>
 8007eda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ede:	d100      	bne.n	8007ee2 <__cvt+0x3e>
 8007ee0:	3601      	adds	r6, #1
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	e000      	b.n	8007ee8 <__cvt+0x44>
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9301      	str	r3, [sp, #4]
 8007eec:	ab02      	add	r3, sp, #8
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	ec45 4b10 	vmov	d0, r4, r5
 8007ef4:	4653      	mov	r3, sl
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	f000 fe5e 	bl	8008bb8 <_dtoa_r>
 8007efc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f00:	4607      	mov	r7, r0
 8007f02:	d102      	bne.n	8007f0a <__cvt+0x66>
 8007f04:	f019 0f01 	tst.w	r9, #1
 8007f08:	d022      	beq.n	8007f50 <__cvt+0xac>
 8007f0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f0e:	eb07 0906 	add.w	r9, r7, r6
 8007f12:	d110      	bne.n	8007f36 <__cvt+0x92>
 8007f14:	783b      	ldrb	r3, [r7, #0]
 8007f16:	2b30      	cmp	r3, #48	; 0x30
 8007f18:	d10a      	bne.n	8007f30 <__cvt+0x8c>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fdf9 	bl	8000b18 <__aeabi_dcmpeq>
 8007f26:	b918      	cbnz	r0, 8007f30 <__cvt+0x8c>
 8007f28:	f1c6 0601 	rsb	r6, r6, #1
 8007f2c:	f8ca 6000 	str.w	r6, [sl]
 8007f30:	f8da 3000 	ldr.w	r3, [sl]
 8007f34:	4499      	add	r9, r3
 8007f36:	2200      	movs	r2, #0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	f7f8 fdeb 	bl	8000b18 <__aeabi_dcmpeq>
 8007f42:	b108      	cbz	r0, 8007f48 <__cvt+0xa4>
 8007f44:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f48:	2230      	movs	r2, #48	; 0x30
 8007f4a:	9b03      	ldr	r3, [sp, #12]
 8007f4c:	454b      	cmp	r3, r9
 8007f4e:	d307      	bcc.n	8007f60 <__cvt+0xbc>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f54:	1bdb      	subs	r3, r3, r7
 8007f56:	4638      	mov	r0, r7
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	b004      	add	sp, #16
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	1c59      	adds	r1, r3, #1
 8007f62:	9103      	str	r1, [sp, #12]
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	e7f0      	b.n	8007f4a <__cvt+0xa6>

08007f68 <__exponent>:
 8007f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	bfb8      	it	lt
 8007f70:	4249      	neglt	r1, r1
 8007f72:	f803 2b02 	strb.w	r2, [r3], #2
 8007f76:	bfb4      	ite	lt
 8007f78:	222d      	movlt	r2, #45	; 0x2d
 8007f7a:	222b      	movge	r2, #43	; 0x2b
 8007f7c:	2909      	cmp	r1, #9
 8007f7e:	7042      	strb	r2, [r0, #1]
 8007f80:	dd2a      	ble.n	8007fd8 <__exponent+0x70>
 8007f82:	f10d 0407 	add.w	r4, sp, #7
 8007f86:	46a4      	mov	ip, r4
 8007f88:	270a      	movs	r7, #10
 8007f8a:	46a6      	mov	lr, r4
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f92:	fb07 1516 	mls	r5, r7, r6, r1
 8007f96:	3530      	adds	r5, #48	; 0x30
 8007f98:	2a63      	cmp	r2, #99	; 0x63
 8007f9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	dcf1      	bgt.n	8007f8a <__exponent+0x22>
 8007fa6:	3130      	adds	r1, #48	; 0x30
 8007fa8:	f1ae 0502 	sub.w	r5, lr, #2
 8007fac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fb0:	1c44      	adds	r4, r0, #1
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4561      	cmp	r1, ip
 8007fb6:	d30a      	bcc.n	8007fce <__exponent+0x66>
 8007fb8:	f10d 0209 	add.w	r2, sp, #9
 8007fbc:	eba2 020e 	sub.w	r2, r2, lr
 8007fc0:	4565      	cmp	r5, ip
 8007fc2:	bf88      	it	hi
 8007fc4:	2200      	movhi	r2, #0
 8007fc6:	4413      	add	r3, r2
 8007fc8:	1a18      	subs	r0, r3, r0
 8007fca:	b003      	add	sp, #12
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007fd6:	e7ed      	b.n	8007fb4 <__exponent+0x4c>
 8007fd8:	2330      	movs	r3, #48	; 0x30
 8007fda:	3130      	adds	r1, #48	; 0x30
 8007fdc:	7083      	strb	r3, [r0, #2]
 8007fde:	70c1      	strb	r1, [r0, #3]
 8007fe0:	1d03      	adds	r3, r0, #4
 8007fe2:	e7f1      	b.n	8007fc8 <__exponent+0x60>

08007fe4 <_printf_float>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	ed2d 8b02 	vpush	{d8}
 8007fec:	b08d      	sub	sp, #52	; 0x34
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	461f      	mov	r7, r3
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	f001 fd83 	bl	8009b04 <_localeconv_r>
 8007ffe:	f8d0 a000 	ldr.w	sl, [r0]
 8008002:	4650      	mov	r0, sl
 8008004:	f7f8 f90c 	bl	8000220 <strlen>
 8008008:	2300      	movs	r3, #0
 800800a:	930a      	str	r3, [sp, #40]	; 0x28
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	9305      	str	r3, [sp, #20]
 8008010:	f8d8 3000 	ldr.w	r3, [r8]
 8008014:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008018:	3307      	adds	r3, #7
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	f103 0208 	add.w	r2, r3, #8
 8008022:	f8c8 2000 	str.w	r2, [r8]
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800802e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008032:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008036:	9307      	str	r3, [sp, #28]
 8008038:	f8cd 8018 	str.w	r8, [sp, #24]
 800803c:	ee08 0a10 	vmov	s16, r0
 8008040:	4b9f      	ldr	r3, [pc, #636]	; (80082c0 <_printf_float+0x2dc>)
 8008042:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800804a:	f7f8 fd97 	bl	8000b7c <__aeabi_dcmpun>
 800804e:	bb88      	cbnz	r0, 80080b4 <_printf_float+0xd0>
 8008050:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008054:	4b9a      	ldr	r3, [pc, #616]	; (80082c0 <_printf_float+0x2dc>)
 8008056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805a:	f7f8 fd71 	bl	8000b40 <__aeabi_dcmple>
 800805e:	bb48      	cbnz	r0, 80080b4 <_printf_float+0xd0>
 8008060:	2200      	movs	r2, #0
 8008062:	2300      	movs	r3, #0
 8008064:	4640      	mov	r0, r8
 8008066:	4649      	mov	r1, r9
 8008068:	f7f8 fd60 	bl	8000b2c <__aeabi_dcmplt>
 800806c:	b110      	cbz	r0, 8008074 <_printf_float+0x90>
 800806e:	232d      	movs	r3, #45	; 0x2d
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008074:	4b93      	ldr	r3, [pc, #588]	; (80082c4 <_printf_float+0x2e0>)
 8008076:	4894      	ldr	r0, [pc, #592]	; (80082c8 <_printf_float+0x2e4>)
 8008078:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800807c:	bf94      	ite	ls
 800807e:	4698      	movls	r8, r3
 8008080:	4680      	movhi	r8, r0
 8008082:	2303      	movs	r3, #3
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	9b05      	ldr	r3, [sp, #20]
 8008088:	f023 0204 	bic.w	r2, r3, #4
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	f04f 0900 	mov.w	r9, #0
 8008092:	9700      	str	r7, [sp, #0]
 8008094:	4633      	mov	r3, r6
 8008096:	aa0b      	add	r2, sp, #44	; 0x2c
 8008098:	4621      	mov	r1, r4
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f9d8 	bl	8008450 <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	f040 8090 	bne.w	80081c6 <_printf_float+0x1e2>
 80080a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080aa:	b00d      	add	sp, #52	; 0x34
 80080ac:	ecbd 8b02 	vpop	{d8}
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b4:	4642      	mov	r2, r8
 80080b6:	464b      	mov	r3, r9
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 fd5e 	bl	8000b7c <__aeabi_dcmpun>
 80080c0:	b140      	cbz	r0, 80080d4 <_printf_float+0xf0>
 80080c2:	464b      	mov	r3, r9
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	bfbc      	itt	lt
 80080c8:	232d      	movlt	r3, #45	; 0x2d
 80080ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ce:	487f      	ldr	r0, [pc, #508]	; (80082cc <_printf_float+0x2e8>)
 80080d0:	4b7f      	ldr	r3, [pc, #508]	; (80082d0 <_printf_float+0x2ec>)
 80080d2:	e7d1      	b.n	8008078 <_printf_float+0x94>
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080da:	9206      	str	r2, [sp, #24]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	d13f      	bne.n	8008160 <_printf_float+0x17c>
 80080e0:	2306      	movs	r3, #6
 80080e2:	6063      	str	r3, [r4, #4]
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	6861      	ldr	r1, [r4, #4]
 80080e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080ec:	2300      	movs	r3, #0
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	ab0a      	add	r3, sp, #40	; 0x28
 80080f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80080f6:	ab09      	add	r3, sp, #36	; 0x24
 80080f8:	ec49 8b10 	vmov	d0, r8, r9
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	6022      	str	r2, [r4, #0]
 8008100:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008104:	4628      	mov	r0, r5
 8008106:	f7ff fecd 	bl	8007ea4 <__cvt>
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800810e:	2b47      	cmp	r3, #71	; 0x47
 8008110:	4680      	mov	r8, r0
 8008112:	d108      	bne.n	8008126 <_printf_float+0x142>
 8008114:	1cc8      	adds	r0, r1, #3
 8008116:	db02      	blt.n	800811e <_printf_float+0x13a>
 8008118:	6863      	ldr	r3, [r4, #4]
 800811a:	4299      	cmp	r1, r3
 800811c:	dd41      	ble.n	80081a2 <_printf_float+0x1be>
 800811e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008122:	fa5f fb8b 	uxtb.w	fp, fp
 8008126:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800812a:	d820      	bhi.n	800816e <_printf_float+0x18a>
 800812c:	3901      	subs	r1, #1
 800812e:	465a      	mov	r2, fp
 8008130:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008134:	9109      	str	r1, [sp, #36]	; 0x24
 8008136:	f7ff ff17 	bl	8007f68 <__exponent>
 800813a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813c:	1813      	adds	r3, r2, r0
 800813e:	2a01      	cmp	r2, #1
 8008140:	4681      	mov	r9, r0
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	dc02      	bgt.n	800814c <_printf_float+0x168>
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	07d2      	lsls	r2, r2, #31
 800814a:	d501      	bpl.n	8008150 <_printf_float+0x16c>
 800814c:	3301      	adds	r3, #1
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008154:	2b00      	cmp	r3, #0
 8008156:	d09c      	beq.n	8008092 <_printf_float+0xae>
 8008158:	232d      	movs	r3, #45	; 0x2d
 800815a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800815e:	e798      	b.n	8008092 <_printf_float+0xae>
 8008160:	9a06      	ldr	r2, [sp, #24]
 8008162:	2a47      	cmp	r2, #71	; 0x47
 8008164:	d1be      	bne.n	80080e4 <_printf_float+0x100>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1bc      	bne.n	80080e4 <_printf_float+0x100>
 800816a:	2301      	movs	r3, #1
 800816c:	e7b9      	b.n	80080e2 <_printf_float+0xfe>
 800816e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008172:	d118      	bne.n	80081a6 <_printf_float+0x1c2>
 8008174:	2900      	cmp	r1, #0
 8008176:	6863      	ldr	r3, [r4, #4]
 8008178:	dd0b      	ble.n	8008192 <_printf_float+0x1ae>
 800817a:	6121      	str	r1, [r4, #16]
 800817c:	b913      	cbnz	r3, 8008184 <_printf_float+0x1a0>
 800817e:	6822      	ldr	r2, [r4, #0]
 8008180:	07d0      	lsls	r0, r2, #31
 8008182:	d502      	bpl.n	800818a <_printf_float+0x1a6>
 8008184:	3301      	adds	r3, #1
 8008186:	440b      	add	r3, r1
 8008188:	6123      	str	r3, [r4, #16]
 800818a:	65a1      	str	r1, [r4, #88]	; 0x58
 800818c:	f04f 0900 	mov.w	r9, #0
 8008190:	e7de      	b.n	8008150 <_printf_float+0x16c>
 8008192:	b913      	cbnz	r3, 800819a <_printf_float+0x1b6>
 8008194:	6822      	ldr	r2, [r4, #0]
 8008196:	07d2      	lsls	r2, r2, #31
 8008198:	d501      	bpl.n	800819e <_printf_float+0x1ba>
 800819a:	3302      	adds	r3, #2
 800819c:	e7f4      	b.n	8008188 <_printf_float+0x1a4>
 800819e:	2301      	movs	r3, #1
 80081a0:	e7f2      	b.n	8008188 <_printf_float+0x1a4>
 80081a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	4299      	cmp	r1, r3
 80081aa:	db05      	blt.n	80081b8 <_printf_float+0x1d4>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	6121      	str	r1, [r4, #16]
 80081b0:	07d8      	lsls	r0, r3, #31
 80081b2:	d5ea      	bpl.n	800818a <_printf_float+0x1a6>
 80081b4:	1c4b      	adds	r3, r1, #1
 80081b6:	e7e7      	b.n	8008188 <_printf_float+0x1a4>
 80081b8:	2900      	cmp	r1, #0
 80081ba:	bfd4      	ite	le
 80081bc:	f1c1 0202 	rsble	r2, r1, #2
 80081c0:	2201      	movgt	r2, #1
 80081c2:	4413      	add	r3, r2
 80081c4:	e7e0      	b.n	8008188 <_printf_float+0x1a4>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	055a      	lsls	r2, r3, #21
 80081ca:	d407      	bmi.n	80081dc <_printf_float+0x1f8>
 80081cc:	6923      	ldr	r3, [r4, #16]
 80081ce:	4642      	mov	r2, r8
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	d12c      	bne.n	8008234 <_printf_float+0x250>
 80081da:	e764      	b.n	80080a6 <_printf_float+0xc2>
 80081dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081e0:	f240 80e0 	bls.w	80083a4 <_printf_float+0x3c0>
 80081e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081e8:	2200      	movs	r2, #0
 80081ea:	2300      	movs	r3, #0
 80081ec:	f7f8 fc94 	bl	8000b18 <__aeabi_dcmpeq>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d034      	beq.n	800825e <_printf_float+0x27a>
 80081f4:	4a37      	ldr	r2, [pc, #220]	; (80082d4 <_printf_float+0x2f0>)
 80081f6:	2301      	movs	r3, #1
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af51 	beq.w	80080a6 <_printf_float+0xc2>
 8008204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008208:	429a      	cmp	r2, r3
 800820a:	db02      	blt.n	8008212 <_printf_float+0x22e>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07d8      	lsls	r0, r3, #31
 8008210:	d510      	bpl.n	8008234 <_printf_float+0x250>
 8008212:	ee18 3a10 	vmov	r3, s16
 8008216:	4652      	mov	r2, sl
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f af41 	beq.w	80080a6 <_printf_float+0xc2>
 8008224:	f04f 0800 	mov.w	r8, #0
 8008228:	f104 091a 	add.w	r9, r4, #26
 800822c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822e:	3b01      	subs	r3, #1
 8008230:	4543      	cmp	r3, r8
 8008232:	dc09      	bgt.n	8008248 <_printf_float+0x264>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	079b      	lsls	r3, r3, #30
 8008238:	f100 8105 	bmi.w	8008446 <_printf_float+0x462>
 800823c:	68e0      	ldr	r0, [r4, #12]
 800823e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008240:	4298      	cmp	r0, r3
 8008242:	bfb8      	it	lt
 8008244:	4618      	movlt	r0, r3
 8008246:	e730      	b.n	80080aa <_printf_float+0xc6>
 8008248:	2301      	movs	r3, #1
 800824a:	464a      	mov	r2, r9
 800824c:	4631      	mov	r1, r6
 800824e:	4628      	mov	r0, r5
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f af27 	beq.w	80080a6 <_printf_float+0xc2>
 8008258:	f108 0801 	add.w	r8, r8, #1
 800825c:	e7e6      	b.n	800822c <_printf_float+0x248>
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	dc39      	bgt.n	80082d8 <_printf_float+0x2f4>
 8008264:	4a1b      	ldr	r2, [pc, #108]	; (80082d4 <_printf_float+0x2f0>)
 8008266:	2301      	movs	r3, #1
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af19 	beq.w	80080a6 <_printf_float+0xc2>
 8008274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008278:	4313      	orrs	r3, r2
 800827a:	d102      	bne.n	8008282 <_printf_float+0x29e>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	07d9      	lsls	r1, r3, #31
 8008280:	d5d8      	bpl.n	8008234 <_printf_float+0x250>
 8008282:	ee18 3a10 	vmov	r3, s16
 8008286:	4652      	mov	r2, sl
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	f43f af09 	beq.w	80080a6 <_printf_float+0xc2>
 8008294:	f04f 0900 	mov.w	r9, #0
 8008298:	f104 0a1a 	add.w	sl, r4, #26
 800829c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829e:	425b      	negs	r3, r3
 80082a0:	454b      	cmp	r3, r9
 80082a2:	dc01      	bgt.n	80082a8 <_printf_float+0x2c4>
 80082a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a6:	e792      	b.n	80081ce <_printf_float+0x1ea>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4652      	mov	r2, sl
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f aef7 	beq.w	80080a6 <_printf_float+0xc2>
 80082b8:	f109 0901 	add.w	r9, r9, #1
 80082bc:	e7ee      	b.n	800829c <_printf_float+0x2b8>
 80082be:	bf00      	nop
 80082c0:	7fefffff 	.word	0x7fefffff
 80082c4:	0800b00c 	.word	0x0800b00c
 80082c8:	0800b010 	.word	0x0800b010
 80082cc:	0800b018 	.word	0x0800b018
 80082d0:	0800b014 	.word	0x0800b014
 80082d4:	0800b01c 	.word	0x0800b01c
 80082d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082dc:	429a      	cmp	r2, r3
 80082de:	bfa8      	it	ge
 80082e0:	461a      	movge	r2, r3
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	4691      	mov	r9, r2
 80082e6:	dc37      	bgt.n	8008358 <_printf_float+0x374>
 80082e8:	f04f 0b00 	mov.w	fp, #0
 80082ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082f0:	f104 021a 	add.w	r2, r4, #26
 80082f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082f6:	9305      	str	r3, [sp, #20]
 80082f8:	eba3 0309 	sub.w	r3, r3, r9
 80082fc:	455b      	cmp	r3, fp
 80082fe:	dc33      	bgt.n	8008368 <_printf_float+0x384>
 8008300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008304:	429a      	cmp	r2, r3
 8008306:	db3b      	blt.n	8008380 <_printf_float+0x39c>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	07da      	lsls	r2, r3, #31
 800830c:	d438      	bmi.n	8008380 <_printf_float+0x39c>
 800830e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008314:	1a9a      	subs	r2, r3, r2
 8008316:	eba3 0901 	sub.w	r9, r3, r1
 800831a:	4591      	cmp	r9, r2
 800831c:	bfa8      	it	ge
 800831e:	4691      	movge	r9, r2
 8008320:	f1b9 0f00 	cmp.w	r9, #0
 8008324:	dc35      	bgt.n	8008392 <_printf_float+0x3ae>
 8008326:	f04f 0800 	mov.w	r8, #0
 800832a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800832e:	f104 0a1a 	add.w	sl, r4, #26
 8008332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	eba3 0309 	sub.w	r3, r3, r9
 800833c:	4543      	cmp	r3, r8
 800833e:	f77f af79 	ble.w	8008234 <_printf_float+0x250>
 8008342:	2301      	movs	r3, #1
 8008344:	4652      	mov	r2, sl
 8008346:	4631      	mov	r1, r6
 8008348:	4628      	mov	r0, r5
 800834a:	47b8      	blx	r7
 800834c:	3001      	adds	r0, #1
 800834e:	f43f aeaa 	beq.w	80080a6 <_printf_float+0xc2>
 8008352:	f108 0801 	add.w	r8, r8, #1
 8008356:	e7ec      	b.n	8008332 <_printf_float+0x34e>
 8008358:	4613      	mov	r3, r2
 800835a:	4631      	mov	r1, r6
 800835c:	4642      	mov	r2, r8
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	d1c0      	bne.n	80082e8 <_printf_float+0x304>
 8008366:	e69e      	b.n	80080a6 <_printf_float+0xc2>
 8008368:	2301      	movs	r3, #1
 800836a:	4631      	mov	r1, r6
 800836c:	4628      	mov	r0, r5
 800836e:	9205      	str	r2, [sp, #20]
 8008370:	47b8      	blx	r7
 8008372:	3001      	adds	r0, #1
 8008374:	f43f ae97 	beq.w	80080a6 <_printf_float+0xc2>
 8008378:	9a05      	ldr	r2, [sp, #20]
 800837a:	f10b 0b01 	add.w	fp, fp, #1
 800837e:	e7b9      	b.n	80082f4 <_printf_float+0x310>
 8008380:	ee18 3a10 	vmov	r3, s16
 8008384:	4652      	mov	r2, sl
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	47b8      	blx	r7
 800838c:	3001      	adds	r0, #1
 800838e:	d1be      	bne.n	800830e <_printf_float+0x32a>
 8008390:	e689      	b.n	80080a6 <_printf_float+0xc2>
 8008392:	9a05      	ldr	r2, [sp, #20]
 8008394:	464b      	mov	r3, r9
 8008396:	4442      	add	r2, r8
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	d1c1      	bne.n	8008326 <_printf_float+0x342>
 80083a2:	e680      	b.n	80080a6 <_printf_float+0xc2>
 80083a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a6:	2a01      	cmp	r2, #1
 80083a8:	dc01      	bgt.n	80083ae <_printf_float+0x3ca>
 80083aa:	07db      	lsls	r3, r3, #31
 80083ac:	d538      	bpl.n	8008420 <_printf_float+0x43c>
 80083ae:	2301      	movs	r3, #1
 80083b0:	4642      	mov	r2, r8
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f ae74 	beq.w	80080a6 <_printf_float+0xc2>
 80083be:	ee18 3a10 	vmov	r3, s16
 80083c2:	4652      	mov	r2, sl
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f ae6b 	beq.w	80080a6 <_printf_float+0xc2>
 80083d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083d4:	2200      	movs	r2, #0
 80083d6:	2300      	movs	r3, #0
 80083d8:	f7f8 fb9e 	bl	8000b18 <__aeabi_dcmpeq>
 80083dc:	b9d8      	cbnz	r0, 8008416 <_printf_float+0x432>
 80083de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e0:	f108 0201 	add.w	r2, r8, #1
 80083e4:	3b01      	subs	r3, #1
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b8      	blx	r7
 80083ec:	3001      	adds	r0, #1
 80083ee:	d10e      	bne.n	800840e <_printf_float+0x42a>
 80083f0:	e659      	b.n	80080a6 <_printf_float+0xc2>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4631      	mov	r1, r6
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b8      	blx	r7
 80083fc:	3001      	adds	r0, #1
 80083fe:	f43f ae52 	beq.w	80080a6 <_printf_float+0xc2>
 8008402:	f108 0801 	add.w	r8, r8, #1
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	3b01      	subs	r3, #1
 800840a:	4543      	cmp	r3, r8
 800840c:	dcf1      	bgt.n	80083f2 <_printf_float+0x40e>
 800840e:	464b      	mov	r3, r9
 8008410:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008414:	e6dc      	b.n	80081d0 <_printf_float+0x1ec>
 8008416:	f04f 0800 	mov.w	r8, #0
 800841a:	f104 0a1a 	add.w	sl, r4, #26
 800841e:	e7f2      	b.n	8008406 <_printf_float+0x422>
 8008420:	2301      	movs	r3, #1
 8008422:	4642      	mov	r2, r8
 8008424:	e7df      	b.n	80083e6 <_printf_float+0x402>
 8008426:	2301      	movs	r3, #1
 8008428:	464a      	mov	r2, r9
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	f43f ae38 	beq.w	80080a6 <_printf_float+0xc2>
 8008436:	f108 0801 	add.w	r8, r8, #1
 800843a:	68e3      	ldr	r3, [r4, #12]
 800843c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800843e:	1a5b      	subs	r3, r3, r1
 8008440:	4543      	cmp	r3, r8
 8008442:	dcf0      	bgt.n	8008426 <_printf_float+0x442>
 8008444:	e6fa      	b.n	800823c <_printf_float+0x258>
 8008446:	f04f 0800 	mov.w	r8, #0
 800844a:	f104 0919 	add.w	r9, r4, #25
 800844e:	e7f4      	b.n	800843a <_printf_float+0x456>

08008450 <_printf_common>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	4616      	mov	r6, r2
 8008456:	4699      	mov	r9, r3
 8008458:	688a      	ldr	r2, [r1, #8]
 800845a:	690b      	ldr	r3, [r1, #16]
 800845c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008460:	4293      	cmp	r3, r2
 8008462:	bfb8      	it	lt
 8008464:	4613      	movlt	r3, r2
 8008466:	6033      	str	r3, [r6, #0]
 8008468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800846c:	4607      	mov	r7, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b10a      	cbz	r2, 8008476 <_printf_common+0x26>
 8008472:	3301      	adds	r3, #1
 8008474:	6033      	str	r3, [r6, #0]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	0699      	lsls	r1, r3, #26
 800847a:	bf42      	ittt	mi
 800847c:	6833      	ldrmi	r3, [r6, #0]
 800847e:	3302      	addmi	r3, #2
 8008480:	6033      	strmi	r3, [r6, #0]
 8008482:	6825      	ldr	r5, [r4, #0]
 8008484:	f015 0506 	ands.w	r5, r5, #6
 8008488:	d106      	bne.n	8008498 <_printf_common+0x48>
 800848a:	f104 0a19 	add.w	sl, r4, #25
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	6832      	ldr	r2, [r6, #0]
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	42ab      	cmp	r3, r5
 8008496:	dc26      	bgt.n	80084e6 <_printf_common+0x96>
 8008498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800849c:	1e13      	subs	r3, r2, #0
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	bf18      	it	ne
 80084a2:	2301      	movne	r3, #1
 80084a4:	0692      	lsls	r2, r2, #26
 80084a6:	d42b      	bmi.n	8008500 <_printf_common+0xb0>
 80084a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ac:	4649      	mov	r1, r9
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d01e      	beq.n	80084f4 <_printf_common+0xa4>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	68e5      	ldr	r5, [r4, #12]
 80084ba:	6832      	ldr	r2, [r6, #0]
 80084bc:	f003 0306 	and.w	r3, r3, #6
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	bf08      	it	eq
 80084c4:	1aad      	subeq	r5, r5, r2
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	6922      	ldr	r2, [r4, #16]
 80084ca:	bf0c      	ite	eq
 80084cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d0:	2500      	movne	r5, #0
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bfc4      	itt	gt
 80084d6:	1a9b      	subgt	r3, r3, r2
 80084d8:	18ed      	addgt	r5, r5, r3
 80084da:	2600      	movs	r6, #0
 80084dc:	341a      	adds	r4, #26
 80084de:	42b5      	cmp	r5, r6
 80084e0:	d11a      	bne.n	8008518 <_printf_common+0xc8>
 80084e2:	2000      	movs	r0, #0
 80084e4:	e008      	b.n	80084f8 <_printf_common+0xa8>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4652      	mov	r2, sl
 80084ea:	4649      	mov	r1, r9
 80084ec:	4638      	mov	r0, r7
 80084ee:	47c0      	blx	r8
 80084f0:	3001      	adds	r0, #1
 80084f2:	d103      	bne.n	80084fc <_printf_common+0xac>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fc:	3501      	adds	r5, #1
 80084fe:	e7c6      	b.n	800848e <_printf_common+0x3e>
 8008500:	18e1      	adds	r1, r4, r3
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	2030      	movs	r0, #48	; 0x30
 8008506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800850a:	4422      	add	r2, r4
 800850c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008514:	3302      	adds	r3, #2
 8008516:	e7c7      	b.n	80084a8 <_printf_common+0x58>
 8008518:	2301      	movs	r3, #1
 800851a:	4622      	mov	r2, r4
 800851c:	4649      	mov	r1, r9
 800851e:	4638      	mov	r0, r7
 8008520:	47c0      	blx	r8
 8008522:	3001      	adds	r0, #1
 8008524:	d0e6      	beq.n	80084f4 <_printf_common+0xa4>
 8008526:	3601      	adds	r6, #1
 8008528:	e7d9      	b.n	80084de <_printf_common+0x8e>
	...

0800852c <_printf_i>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	7e0f      	ldrb	r7, [r1, #24]
 8008532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008534:	2f78      	cmp	r7, #120	; 0x78
 8008536:	4691      	mov	r9, r2
 8008538:	4680      	mov	r8, r0
 800853a:	460c      	mov	r4, r1
 800853c:	469a      	mov	sl, r3
 800853e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008542:	d807      	bhi.n	8008554 <_printf_i+0x28>
 8008544:	2f62      	cmp	r7, #98	; 0x62
 8008546:	d80a      	bhi.n	800855e <_printf_i+0x32>
 8008548:	2f00      	cmp	r7, #0
 800854a:	f000 80d8 	beq.w	80086fe <_printf_i+0x1d2>
 800854e:	2f58      	cmp	r7, #88	; 0x58
 8008550:	f000 80a3 	beq.w	800869a <_printf_i+0x16e>
 8008554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800855c:	e03a      	b.n	80085d4 <_printf_i+0xa8>
 800855e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008562:	2b15      	cmp	r3, #21
 8008564:	d8f6      	bhi.n	8008554 <_printf_i+0x28>
 8008566:	a101      	add	r1, pc, #4	; (adr r1, 800856c <_printf_i+0x40>)
 8008568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800856c:	080085c5 	.word	0x080085c5
 8008570:	080085d9 	.word	0x080085d9
 8008574:	08008555 	.word	0x08008555
 8008578:	08008555 	.word	0x08008555
 800857c:	08008555 	.word	0x08008555
 8008580:	08008555 	.word	0x08008555
 8008584:	080085d9 	.word	0x080085d9
 8008588:	08008555 	.word	0x08008555
 800858c:	08008555 	.word	0x08008555
 8008590:	08008555 	.word	0x08008555
 8008594:	08008555 	.word	0x08008555
 8008598:	080086e5 	.word	0x080086e5
 800859c:	08008609 	.word	0x08008609
 80085a0:	080086c7 	.word	0x080086c7
 80085a4:	08008555 	.word	0x08008555
 80085a8:	08008555 	.word	0x08008555
 80085ac:	08008707 	.word	0x08008707
 80085b0:	08008555 	.word	0x08008555
 80085b4:	08008609 	.word	0x08008609
 80085b8:	08008555 	.word	0x08008555
 80085bc:	08008555 	.word	0x08008555
 80085c0:	080086cf 	.word	0x080086cf
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	1d1a      	adds	r2, r3, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	602a      	str	r2, [r5, #0]
 80085cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0a3      	b.n	8008720 <_printf_i+0x1f4>
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	6829      	ldr	r1, [r5, #0]
 80085dc:	0606      	lsls	r6, r0, #24
 80085de:	f101 0304 	add.w	r3, r1, #4
 80085e2:	d50a      	bpl.n	80085fa <_printf_i+0xce>
 80085e4:	680e      	ldr	r6, [r1, #0]
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	da03      	bge.n	80085f4 <_printf_i+0xc8>
 80085ec:	232d      	movs	r3, #45	; 0x2d
 80085ee:	4276      	negs	r6, r6
 80085f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f4:	485e      	ldr	r0, [pc, #376]	; (8008770 <_printf_i+0x244>)
 80085f6:	230a      	movs	r3, #10
 80085f8:	e019      	b.n	800862e <_printf_i+0x102>
 80085fa:	680e      	ldr	r6, [r1, #0]
 80085fc:	602b      	str	r3, [r5, #0]
 80085fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008602:	bf18      	it	ne
 8008604:	b236      	sxthne	r6, r6
 8008606:	e7ef      	b.n	80085e8 <_printf_i+0xbc>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	6820      	ldr	r0, [r4, #0]
 800860c:	1d19      	adds	r1, r3, #4
 800860e:	6029      	str	r1, [r5, #0]
 8008610:	0601      	lsls	r1, r0, #24
 8008612:	d501      	bpl.n	8008618 <_printf_i+0xec>
 8008614:	681e      	ldr	r6, [r3, #0]
 8008616:	e002      	b.n	800861e <_printf_i+0xf2>
 8008618:	0646      	lsls	r6, r0, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0xe8>
 800861c:	881e      	ldrh	r6, [r3, #0]
 800861e:	4854      	ldr	r0, [pc, #336]	; (8008770 <_printf_i+0x244>)
 8008620:	2f6f      	cmp	r7, #111	; 0x6f
 8008622:	bf0c      	ite	eq
 8008624:	2308      	moveq	r3, #8
 8008626:	230a      	movne	r3, #10
 8008628:	2100      	movs	r1, #0
 800862a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800862e:	6865      	ldr	r5, [r4, #4]
 8008630:	60a5      	str	r5, [r4, #8]
 8008632:	2d00      	cmp	r5, #0
 8008634:	bfa2      	ittt	ge
 8008636:	6821      	ldrge	r1, [r4, #0]
 8008638:	f021 0104 	bicge.w	r1, r1, #4
 800863c:	6021      	strge	r1, [r4, #0]
 800863e:	b90e      	cbnz	r6, 8008644 <_printf_i+0x118>
 8008640:	2d00      	cmp	r5, #0
 8008642:	d04d      	beq.n	80086e0 <_printf_i+0x1b4>
 8008644:	4615      	mov	r5, r2
 8008646:	fbb6 f1f3 	udiv	r1, r6, r3
 800864a:	fb03 6711 	mls	r7, r3, r1, r6
 800864e:	5dc7      	ldrb	r7, [r0, r7]
 8008650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008654:	4637      	mov	r7, r6
 8008656:	42bb      	cmp	r3, r7
 8008658:	460e      	mov	r6, r1
 800865a:	d9f4      	bls.n	8008646 <_printf_i+0x11a>
 800865c:	2b08      	cmp	r3, #8
 800865e:	d10b      	bne.n	8008678 <_printf_i+0x14c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07de      	lsls	r6, r3, #31
 8008664:	d508      	bpl.n	8008678 <_printf_i+0x14c>
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	6861      	ldr	r1, [r4, #4]
 800866a:	4299      	cmp	r1, r3
 800866c:	bfde      	ittt	le
 800866e:	2330      	movle	r3, #48	; 0x30
 8008670:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008674:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008678:	1b52      	subs	r2, r2, r5
 800867a:	6122      	str	r2, [r4, #16]
 800867c:	f8cd a000 	str.w	sl, [sp]
 8008680:	464b      	mov	r3, r9
 8008682:	aa03      	add	r2, sp, #12
 8008684:	4621      	mov	r1, r4
 8008686:	4640      	mov	r0, r8
 8008688:	f7ff fee2 	bl	8008450 <_printf_common>
 800868c:	3001      	adds	r0, #1
 800868e:	d14c      	bne.n	800872a <_printf_i+0x1fe>
 8008690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008694:	b004      	add	sp, #16
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869a:	4835      	ldr	r0, [pc, #212]	; (8008770 <_printf_i+0x244>)
 800869c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086a0:	6829      	ldr	r1, [r5, #0]
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80086a8:	6029      	str	r1, [r5, #0]
 80086aa:	061d      	lsls	r5, r3, #24
 80086ac:	d514      	bpl.n	80086d8 <_printf_i+0x1ac>
 80086ae:	07df      	lsls	r7, r3, #31
 80086b0:	bf44      	itt	mi
 80086b2:	f043 0320 	orrmi.w	r3, r3, #32
 80086b6:	6023      	strmi	r3, [r4, #0]
 80086b8:	b91e      	cbnz	r6, 80086c2 <_printf_i+0x196>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f023 0320 	bic.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	2310      	movs	r3, #16
 80086c4:	e7b0      	b.n	8008628 <_printf_i+0xfc>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	f043 0320 	orr.w	r3, r3, #32
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	2378      	movs	r3, #120	; 0x78
 80086d0:	4828      	ldr	r0, [pc, #160]	; (8008774 <_printf_i+0x248>)
 80086d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086d6:	e7e3      	b.n	80086a0 <_printf_i+0x174>
 80086d8:	0659      	lsls	r1, r3, #25
 80086da:	bf48      	it	mi
 80086dc:	b2b6      	uxthmi	r6, r6
 80086de:	e7e6      	b.n	80086ae <_printf_i+0x182>
 80086e0:	4615      	mov	r5, r2
 80086e2:	e7bb      	b.n	800865c <_printf_i+0x130>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	6826      	ldr	r6, [r4, #0]
 80086e8:	6961      	ldr	r1, [r4, #20]
 80086ea:	1d18      	adds	r0, r3, #4
 80086ec:	6028      	str	r0, [r5, #0]
 80086ee:	0635      	lsls	r5, r6, #24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0x1cc>
 80086f4:	6019      	str	r1, [r3, #0]
 80086f6:	e002      	b.n	80086fe <_printf_i+0x1d2>
 80086f8:	0670      	lsls	r0, r6, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0x1c8>
 80086fc:	8019      	strh	r1, [r3, #0]
 80086fe:	2300      	movs	r3, #0
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	4615      	mov	r5, r2
 8008704:	e7ba      	b.n	800867c <_printf_i+0x150>
 8008706:	682b      	ldr	r3, [r5, #0]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	681d      	ldr	r5, [r3, #0]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	2100      	movs	r1, #0
 8008712:	4628      	mov	r0, r5
 8008714:	f7f7 fd8c 	bl	8000230 <memchr>
 8008718:	b108      	cbz	r0, 800871e <_printf_i+0x1f2>
 800871a:	1b40      	subs	r0, r0, r5
 800871c:	6060      	str	r0, [r4, #4]
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008728:	e7a8      	b.n	800867c <_printf_i+0x150>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	462a      	mov	r2, r5
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d0ab      	beq.n	8008690 <_printf_i+0x164>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	d413      	bmi.n	8008766 <_printf_i+0x23a>
 800873e:	68e0      	ldr	r0, [r4, #12]
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	4298      	cmp	r0, r3
 8008744:	bfb8      	it	lt
 8008746:	4618      	movlt	r0, r3
 8008748:	e7a4      	b.n	8008694 <_printf_i+0x168>
 800874a:	2301      	movs	r3, #1
 800874c:	4632      	mov	r2, r6
 800874e:	4649      	mov	r1, r9
 8008750:	4640      	mov	r0, r8
 8008752:	47d0      	blx	sl
 8008754:	3001      	adds	r0, #1
 8008756:	d09b      	beq.n	8008690 <_printf_i+0x164>
 8008758:	3501      	adds	r5, #1
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	9903      	ldr	r1, [sp, #12]
 800875e:	1a5b      	subs	r3, r3, r1
 8008760:	42ab      	cmp	r3, r5
 8008762:	dcf2      	bgt.n	800874a <_printf_i+0x21e>
 8008764:	e7eb      	b.n	800873e <_printf_i+0x212>
 8008766:	2500      	movs	r5, #0
 8008768:	f104 0619 	add.w	r6, r4, #25
 800876c:	e7f5      	b.n	800875a <_printf_i+0x22e>
 800876e:	bf00      	nop
 8008770:	0800b01e 	.word	0x0800b01e
 8008774:	0800b02f 	.word	0x0800b02f

08008778 <iprintf>:
 8008778:	b40f      	push	{r0, r1, r2, r3}
 800877a:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <iprintf+0x2c>)
 800877c:	b513      	push	{r0, r1, r4, lr}
 800877e:	681c      	ldr	r4, [r3, #0]
 8008780:	b124      	cbz	r4, 800878c <iprintf+0x14>
 8008782:	69a3      	ldr	r3, [r4, #24]
 8008784:	b913      	cbnz	r3, 800878c <iprintf+0x14>
 8008786:	4620      	mov	r0, r4
 8008788:	f001 f91e 	bl	80099c8 <__sinit>
 800878c:	ab05      	add	r3, sp, #20
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	68a1      	ldr	r1, [r4, #8]
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	4620      	mov	r0, r4
 8008796:	f001 ff5b 	bl	800a650 <_vfiprintf_r>
 800879a:	b002      	add	sp, #8
 800879c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a0:	b004      	add	sp, #16
 80087a2:	4770      	bx	lr
 80087a4:	2000000c 	.word	0x2000000c

080087a8 <putchar>:
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <putchar+0x28>)
 80087aa:	b513      	push	{r0, r1, r4, lr}
 80087ac:	681c      	ldr	r4, [r3, #0]
 80087ae:	4601      	mov	r1, r0
 80087b0:	b134      	cbz	r4, 80087c0 <putchar+0x18>
 80087b2:	69a3      	ldr	r3, [r4, #24]
 80087b4:	b923      	cbnz	r3, 80087c0 <putchar+0x18>
 80087b6:	9001      	str	r0, [sp, #4]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 f905 	bl	80099c8 <__sinit>
 80087be:	9901      	ldr	r1, [sp, #4]
 80087c0:	68a2      	ldr	r2, [r4, #8]
 80087c2:	4620      	mov	r0, r4
 80087c4:	b002      	add	sp, #8
 80087c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ca:	f002 b871 	b.w	800a8b0 <_putc_r>
 80087ce:	bf00      	nop
 80087d0:	2000000c 	.word	0x2000000c

080087d4 <_puts_r>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	460e      	mov	r6, r1
 80087d8:	4605      	mov	r5, r0
 80087da:	b118      	cbz	r0, 80087e4 <_puts_r+0x10>
 80087dc:	6983      	ldr	r3, [r0, #24]
 80087de:	b90b      	cbnz	r3, 80087e4 <_puts_r+0x10>
 80087e0:	f001 f8f2 	bl	80099c8 <__sinit>
 80087e4:	69ab      	ldr	r3, [r5, #24]
 80087e6:	68ac      	ldr	r4, [r5, #8]
 80087e8:	b913      	cbnz	r3, 80087f0 <_puts_r+0x1c>
 80087ea:	4628      	mov	r0, r5
 80087ec:	f001 f8ec 	bl	80099c8 <__sinit>
 80087f0:	4b2c      	ldr	r3, [pc, #176]	; (80088a4 <_puts_r+0xd0>)
 80087f2:	429c      	cmp	r4, r3
 80087f4:	d120      	bne.n	8008838 <_puts_r+0x64>
 80087f6:	686c      	ldr	r4, [r5, #4]
 80087f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087fa:	07db      	lsls	r3, r3, #31
 80087fc:	d405      	bmi.n	800880a <_puts_r+0x36>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	0598      	lsls	r0, r3, #22
 8008802:	d402      	bmi.n	800880a <_puts_r+0x36>
 8008804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008806:	f001 f982 	bl	8009b0e <__retarget_lock_acquire_recursive>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	0719      	lsls	r1, r3, #28
 800880e:	d51d      	bpl.n	800884c <_puts_r+0x78>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b1db      	cbz	r3, 800884c <_puts_r+0x78>
 8008814:	3e01      	subs	r6, #1
 8008816:	68a3      	ldr	r3, [r4, #8]
 8008818:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800881c:	3b01      	subs	r3, #1
 800881e:	60a3      	str	r3, [r4, #8]
 8008820:	bb39      	cbnz	r1, 8008872 <_puts_r+0x9e>
 8008822:	2b00      	cmp	r3, #0
 8008824:	da38      	bge.n	8008898 <_puts_r+0xc4>
 8008826:	4622      	mov	r2, r4
 8008828:	210a      	movs	r1, #10
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f878 	bl	8008920 <__swbuf_r>
 8008830:	3001      	adds	r0, #1
 8008832:	d011      	beq.n	8008858 <_puts_r+0x84>
 8008834:	250a      	movs	r5, #10
 8008836:	e011      	b.n	800885c <_puts_r+0x88>
 8008838:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <_puts_r+0xd4>)
 800883a:	429c      	cmp	r4, r3
 800883c:	d101      	bne.n	8008842 <_puts_r+0x6e>
 800883e:	68ac      	ldr	r4, [r5, #8]
 8008840:	e7da      	b.n	80087f8 <_puts_r+0x24>
 8008842:	4b1a      	ldr	r3, [pc, #104]	; (80088ac <_puts_r+0xd8>)
 8008844:	429c      	cmp	r4, r3
 8008846:	bf08      	it	eq
 8008848:	68ec      	ldreq	r4, [r5, #12]
 800884a:	e7d5      	b.n	80087f8 <_puts_r+0x24>
 800884c:	4621      	mov	r1, r4
 800884e:	4628      	mov	r0, r5
 8008850:	f000 f8b8 	bl	80089c4 <__swsetup_r>
 8008854:	2800      	cmp	r0, #0
 8008856:	d0dd      	beq.n	8008814 <_puts_r+0x40>
 8008858:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800885c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d405      	bmi.n	800886e <_puts_r+0x9a>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	059b      	lsls	r3, r3, #22
 8008866:	d402      	bmi.n	800886e <_puts_r+0x9a>
 8008868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886a:	f001 f951 	bl	8009b10 <__retarget_lock_release_recursive>
 800886e:	4628      	mov	r0, r5
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	2b00      	cmp	r3, #0
 8008874:	da04      	bge.n	8008880 <_puts_r+0xac>
 8008876:	69a2      	ldr	r2, [r4, #24]
 8008878:	429a      	cmp	r2, r3
 800887a:	dc06      	bgt.n	800888a <_puts_r+0xb6>
 800887c:	290a      	cmp	r1, #10
 800887e:	d004      	beq.n	800888a <_puts_r+0xb6>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	6022      	str	r2, [r4, #0]
 8008886:	7019      	strb	r1, [r3, #0]
 8008888:	e7c5      	b.n	8008816 <_puts_r+0x42>
 800888a:	4622      	mov	r2, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f000 f847 	bl	8008920 <__swbuf_r>
 8008892:	3001      	adds	r0, #1
 8008894:	d1bf      	bne.n	8008816 <_puts_r+0x42>
 8008896:	e7df      	b.n	8008858 <_puts_r+0x84>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	250a      	movs	r5, #10
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	701d      	strb	r5, [r3, #0]
 80088a2:	e7db      	b.n	800885c <_puts_r+0x88>
 80088a4:	0800b0f0 	.word	0x0800b0f0
 80088a8:	0800b110 	.word	0x0800b110
 80088ac:	0800b0d0 	.word	0x0800b0d0

080088b0 <puts>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	; (80088bc <puts+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f7ff bf8d 	b.w	80087d4 <_puts_r>
 80088ba:	bf00      	nop
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <_sbrk_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	; (80088dc <_sbrk_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f9 ffa0 	bl	8002810 <_sbrk>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_sbrk_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_sbrk_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	200004f8 	.word	0x200004f8

080088e0 <siprintf>:
 80088e0:	b40e      	push	{r1, r2, r3}
 80088e2:	b500      	push	{lr}
 80088e4:	b09c      	sub	sp, #112	; 0x70
 80088e6:	ab1d      	add	r3, sp, #116	; 0x74
 80088e8:	9002      	str	r0, [sp, #8]
 80088ea:	9006      	str	r0, [sp, #24]
 80088ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <siprintf+0x38>)
 80088f2:	9107      	str	r1, [sp, #28]
 80088f4:	9104      	str	r1, [sp, #16]
 80088f6:	4909      	ldr	r1, [pc, #36]	; (800891c <siprintf+0x3c>)
 80088f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fc:	9105      	str	r1, [sp, #20]
 80088fe:	6800      	ldr	r0, [r0, #0]
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	a902      	add	r1, sp, #8
 8008904:	f001 fd7a 	bl	800a3fc <_svfiprintf_r>
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	b01c      	add	sp, #112	; 0x70
 8008910:	f85d eb04 	ldr.w	lr, [sp], #4
 8008914:	b003      	add	sp, #12
 8008916:	4770      	bx	lr
 8008918:	2000000c 	.word	0x2000000c
 800891c:	ffff0208 	.word	0xffff0208

08008920 <__swbuf_r>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	460e      	mov	r6, r1
 8008924:	4614      	mov	r4, r2
 8008926:	4605      	mov	r5, r0
 8008928:	b118      	cbz	r0, 8008932 <__swbuf_r+0x12>
 800892a:	6983      	ldr	r3, [r0, #24]
 800892c:	b90b      	cbnz	r3, 8008932 <__swbuf_r+0x12>
 800892e:	f001 f84b 	bl	80099c8 <__sinit>
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <__swbuf_r+0x98>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d12b      	bne.n	8008990 <__swbuf_r+0x70>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	69a3      	ldr	r3, [r4, #24]
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	071a      	lsls	r2, r3, #28
 8008942:	d52f      	bpl.n	80089a4 <__swbuf_r+0x84>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b36b      	cbz	r3, 80089a4 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	1ac0      	subs	r0, r0, r3
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	b2f6      	uxtb	r6, r6
 8008952:	4283      	cmp	r3, r0
 8008954:	4637      	mov	r7, r6
 8008956:	dc04      	bgt.n	8008962 <__swbuf_r+0x42>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 ffa0 	bl	80098a0 <_fflush_r>
 8008960:	bb30      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	701e      	strb	r6, [r3, #0]
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	3001      	adds	r0, #1
 8008974:	4283      	cmp	r3, r0
 8008976:	d004      	beq.n	8008982 <__swbuf_r+0x62>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d506      	bpl.n	800898c <__swbuf_r+0x6c>
 800897e:	2e0a      	cmp	r6, #10
 8008980:	d104      	bne.n	800898c <__swbuf_r+0x6c>
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	f000 ff8b 	bl	80098a0 <_fflush_r>
 800898a:	b988      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 800898c:	4638      	mov	r0, r7
 800898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <__swbuf_r+0x9c>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d101      	bne.n	800899a <__swbuf_r+0x7a>
 8008996:	68ac      	ldr	r4, [r5, #8]
 8008998:	e7cf      	b.n	800893a <__swbuf_r+0x1a>
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__swbuf_r+0xa0>)
 800899c:	429c      	cmp	r4, r3
 800899e:	bf08      	it	eq
 80089a0:	68ec      	ldreq	r4, [r5, #12]
 80089a2:	e7ca      	b.n	800893a <__swbuf_r+0x1a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f80c 	bl	80089c4 <__swsetup_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0cb      	beq.n	8008948 <__swbuf_r+0x28>
 80089b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80089b4:	e7ea      	b.n	800898c <__swbuf_r+0x6c>
 80089b6:	bf00      	nop
 80089b8:	0800b0f0 	.word	0x0800b0f0
 80089bc:	0800b110 	.word	0x0800b110
 80089c0:	0800b0d0 	.word	0x0800b0d0

080089c4 <__swsetup_r>:
 80089c4:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <__swsetup_r+0xcc>)
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	681d      	ldr	r5, [r3, #0]
 80089ca:	4606      	mov	r6, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	b125      	cbz	r5, 80089da <__swsetup_r+0x16>
 80089d0:	69ab      	ldr	r3, [r5, #24]
 80089d2:	b913      	cbnz	r3, 80089da <__swsetup_r+0x16>
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 fff7 	bl	80099c8 <__sinit>
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <__swsetup_r+0xd0>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d10f      	bne.n	8008a00 <__swsetup_r+0x3c>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e8:	0719      	lsls	r1, r3, #28
 80089ea:	d42c      	bmi.n	8008a46 <__swsetup_r+0x82>
 80089ec:	06dd      	lsls	r5, r3, #27
 80089ee:	d411      	bmi.n	8008a14 <__swsetup_r+0x50>
 80089f0:	2309      	movs	r3, #9
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089fe:	e03e      	b.n	8008a7e <__swsetup_r+0xba>
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <__swsetup_r+0xd4>)
 8008a02:	429c      	cmp	r4, r3
 8008a04:	d101      	bne.n	8008a0a <__swsetup_r+0x46>
 8008a06:	68ac      	ldr	r4, [r5, #8]
 8008a08:	e7eb      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <__swsetup_r+0xd8>)
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	bf08      	it	eq
 8008a10:	68ec      	ldreq	r4, [r5, #12]
 8008a12:	e7e6      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a14:	0758      	lsls	r0, r3, #29
 8008a16:	d512      	bpl.n	8008a3e <__swsetup_r+0x7a>
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	b141      	cbz	r1, 8008a2e <__swsetup_r+0x6a>
 8008a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <__swsetup_r+0x66>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7ff f95d 	bl	8007ce4 <_free_r>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0308 	orr.w	r3, r3, #8
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	b94b      	cbnz	r3, 8008a5e <__swsetup_r+0x9a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a54:	d003      	beq.n	8008a5e <__swsetup_r+0x9a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f001 f87f 	bl	8009b5c <__smakebuf_r>
 8008a5e:	89a0      	ldrh	r0, [r4, #12]
 8008a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a64:	f010 0301 	ands.w	r3, r0, #1
 8008a68:	d00a      	beq.n	8008a80 <__swsetup_r+0xbc>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6963      	ldr	r3, [r4, #20]
 8008a70:	425b      	negs	r3, r3
 8008a72:	61a3      	str	r3, [r4, #24]
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	b943      	cbnz	r3, 8008a8a <__swsetup_r+0xc6>
 8008a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a7c:	d1ba      	bne.n	80089f4 <__swsetup_r+0x30>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	0781      	lsls	r1, r0, #30
 8008a82:	bf58      	it	pl
 8008a84:	6963      	ldrpl	r3, [r4, #20]
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	e7f4      	b.n	8008a74 <__swsetup_r+0xb0>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e7f7      	b.n	8008a7e <__swsetup_r+0xba>
 8008a8e:	bf00      	nop
 8008a90:	2000000c 	.word	0x2000000c
 8008a94:	0800b0f0 	.word	0x0800b0f0
 8008a98:	0800b110 	.word	0x0800b110
 8008a9c:	0800b0d0 	.word	0x0800b0d0

08008aa0 <quorem>:
 8008aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	6903      	ldr	r3, [r0, #16]
 8008aa6:	690c      	ldr	r4, [r1, #16]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	4607      	mov	r7, r0
 8008aac:	f2c0 8081 	blt.w	8008bb2 <quorem+0x112>
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	f101 0814 	add.w	r8, r1, #20
 8008ab6:	f100 0514 	add.w	r5, r0, #20
 8008aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ad8:	d331      	bcc.n	8008b3e <quorem+0x9e>
 8008ada:	f04f 0e00 	mov.w	lr, #0
 8008ade:	4640      	mov	r0, r8
 8008ae0:	46ac      	mov	ip, r5
 8008ae2:	46f2      	mov	sl, lr
 8008ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ae8:	b293      	uxth	r3, r2
 8008aea:	fb06 e303 	mla	r3, r6, r3, lr
 8008aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	ebaa 0303 	sub.w	r3, sl, r3
 8008af8:	f8dc a000 	ldr.w	sl, [ip]
 8008afc:	0c12      	lsrs	r2, r2, #16
 8008afe:	fa13 f38a 	uxtah	r3, r3, sl
 8008b02:	fb06 e202 	mla	r2, r6, r2, lr
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	9b00      	ldr	r3, [sp, #0]
 8008b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b18:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b1c:	4581      	cmp	r9, r0
 8008b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b22:	f84c 3b04 	str.w	r3, [ip], #4
 8008b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b2a:	d2db      	bcs.n	8008ae4 <quorem+0x44>
 8008b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b30:	b92b      	cbnz	r3, 8008b3e <quorem+0x9e>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	429d      	cmp	r5, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	d32e      	bcc.n	8008b9a <quorem+0xfa>
 8008b3c:	613c      	str	r4, [r7, #16]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f001 fae8 	bl	800a114 <__mcmp>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	db24      	blt.n	8008b92 <quorem+0xf2>
 8008b48:	3601      	adds	r6, #1
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f04f 0c00 	mov.w	ip, #0
 8008b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b54:	f8d0 e000 	ldr.w	lr, [r0]
 8008b58:	b293      	uxth	r3, r2
 8008b5a:	ebac 0303 	sub.w	r3, ip, r3
 8008b5e:	0c12      	lsrs	r2, r2, #16
 8008b60:	fa13 f38e 	uxtah	r3, r3, lr
 8008b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b72:	45c1      	cmp	r9, r8
 8008b74:	f840 3b04 	str.w	r3, [r0], #4
 8008b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b7c:	d2e8      	bcs.n	8008b50 <quorem+0xb0>
 8008b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b86:	b922      	cbnz	r2, 8008b92 <quorem+0xf2>
 8008b88:	3b04      	subs	r3, #4
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	d30a      	bcc.n	8008ba6 <quorem+0x106>
 8008b90:	613c      	str	r4, [r7, #16]
 8008b92:	4630      	mov	r0, r6
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d1cc      	bne.n	8008b3c <quorem+0x9c>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	e7c7      	b.n	8008b36 <quorem+0x96>
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d1f0      	bne.n	8008b90 <quorem+0xf0>
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	e7eb      	b.n	8008b8a <quorem+0xea>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e7ee      	b.n	8008b94 <quorem+0xf4>
	...

08008bb8 <_dtoa_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b04 	vpush	{d8-d9}
 8008bc0:	ec57 6b10 	vmov	r6, r7, d0
 8008bc4:	b093      	sub	sp, #76	; 0x4c
 8008bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bcc:	9106      	str	r1, [sp, #24]
 8008bce:	ee10 aa10 	vmov	sl, s0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd8:	46bb      	mov	fp, r7
 8008bda:	b975      	cbnz	r5, 8008bfa <_dtoa_r+0x42>
 8008bdc:	2010      	movs	r0, #16
 8008bde:	f7ff f871 	bl	8007cc4 <malloc>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6260      	str	r0, [r4, #36]	; 0x24
 8008be6:	b920      	cbnz	r0, 8008bf2 <_dtoa_r+0x3a>
 8008be8:	4ba7      	ldr	r3, [pc, #668]	; (8008e88 <_dtoa_r+0x2d0>)
 8008bea:	21ea      	movs	r1, #234	; 0xea
 8008bec:	48a7      	ldr	r0, [pc, #668]	; (8008e8c <_dtoa_r+0x2d4>)
 8008bee:	f001 fefd 	bl	800a9ec <__assert_func>
 8008bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bf6:	6005      	str	r5, [r0, #0]
 8008bf8:	60c5      	str	r5, [r0, #12]
 8008bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	b151      	cbz	r1, 8008c16 <_dtoa_r+0x5e>
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	604a      	str	r2, [r1, #4]
 8008c04:	2301      	movs	r3, #1
 8008c06:	4093      	lsls	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f001 f840 	bl	8009c90 <_Bfree>
 8008c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	1e3b      	subs	r3, r7, #0
 8008c18:	bfaa      	itet	ge
 8008c1a:	2300      	movge	r3, #0
 8008c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c20:	f8c8 3000 	strge.w	r3, [r8]
 8008c24:	4b9a      	ldr	r3, [pc, #616]	; (8008e90 <_dtoa_r+0x2d8>)
 8008c26:	bfbc      	itt	lt
 8008c28:	2201      	movlt	r2, #1
 8008c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c2e:	ea33 030b 	bics.w	r3, r3, fp
 8008c32:	d11b      	bne.n	8008c6c <_dtoa_r+0xb4>
 8008c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c40:	4333      	orrs	r3, r6
 8008c42:	f000 8592 	beq.w	800976a <_dtoa_r+0xbb2>
 8008c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c48:	b963      	cbnz	r3, 8008c64 <_dtoa_r+0xac>
 8008c4a:	4b92      	ldr	r3, [pc, #584]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c4c:	e022      	b.n	8008c94 <_dtoa_r+0xdc>
 8008c4e:	4b92      	ldr	r3, [pc, #584]	; (8008e98 <_dtoa_r+0x2e0>)
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	3308      	adds	r3, #8
 8008c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	b013      	add	sp, #76	; 0x4c
 8008c5c:	ecbd 8b04 	vpop	{d8-d9}
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	4b8b      	ldr	r3, [pc, #556]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	3303      	adds	r3, #3
 8008c6a:	e7f3      	b.n	8008c54 <_dtoa_r+0x9c>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4650      	mov	r0, sl
 8008c72:	4659      	mov	r1, fp
 8008c74:	f7f7 ff50 	bl	8000b18 <__aeabi_dcmpeq>
 8008c78:	ec4b ab19 	vmov	d9, sl, fp
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	b158      	cbz	r0, 8008c98 <_dtoa_r+0xe0>
 8008c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c82:	2301      	movs	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 856b 	beq.w	8009764 <_dtoa_r+0xbac>
 8008c8e:	4883      	ldr	r0, [pc, #524]	; (8008e9c <_dtoa_r+0x2e4>)
 8008c90:	6018      	str	r0, [r3, #0]
 8008c92:	1e43      	subs	r3, r0, #1
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	e7df      	b.n	8008c58 <_dtoa_r+0xa0>
 8008c98:	ec4b ab10 	vmov	d0, sl, fp
 8008c9c:	aa10      	add	r2, sp, #64	; 0x40
 8008c9e:	a911      	add	r1, sp, #68	; 0x44
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 fadd 	bl	800a260 <__d2b>
 8008ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008caa:	ee08 0a10 	vmov	s16, r0
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f000 8084 	beq.w	8008dbc <_dtoa_r+0x204>
 8008cb4:	ee19 3a90 	vmov	r3, s19
 8008cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cc0:	4656      	mov	r6, sl
 8008cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cce:	4b74      	ldr	r3, [pc, #464]	; (8008ea0 <_dtoa_r+0x2e8>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 faff 	bl	80002d8 <__aeabi_dsub>
 8008cda:	a365      	add	r3, pc, #404	; (adr r3, 8008e70 <_dtoa_r+0x2b8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fcb2 	bl	8000648 <__aeabi_dmul>
 8008ce4:	a364      	add	r3, pc, #400	; (adr r3, 8008e78 <_dtoa_r+0x2c0>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 faf7 	bl	80002dc <__adddf3>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	f7f7 fc3e 	bl	8000574 <__aeabi_i2d>
 8008cf8:	a361      	add	r3, pc, #388	; (adr r3, 8008e80 <_dtoa_r+0x2c8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fca3 	bl	8000648 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	f7f7 fae7 	bl	80002dc <__adddf3>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	f7f7 ff49 	bl	8000ba8 <__aeabi_d2iz>
 8008d16:	2200      	movs	r2, #0
 8008d18:	9000      	str	r0, [sp, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 ff04 	bl	8000b2c <__aeabi_dcmplt>
 8008d24:	b150      	cbz	r0, 8008d3c <_dtoa_r+0x184>
 8008d26:	9800      	ldr	r0, [sp, #0]
 8008d28:	f7f7 fc24 	bl	8000574 <__aeabi_i2d>
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	f7f7 fef2 	bl	8000b18 <__aeabi_dcmpeq>
 8008d34:	b910      	cbnz	r0, 8008d3c <_dtoa_r+0x184>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b16      	cmp	r3, #22
 8008d40:	d85a      	bhi.n	8008df8 <_dtoa_r+0x240>
 8008d42:	9a00      	ldr	r2, [sp, #0]
 8008d44:	4b57      	ldr	r3, [pc, #348]	; (8008ea4 <_dtoa_r+0x2ec>)
 8008d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	ec51 0b19 	vmov	r0, r1, d9
 8008d52:	f7f7 feeb 	bl	8000b2c <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d050      	beq.n	8008dfc <_dtoa_r+0x244>
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d66:	1b5d      	subs	r5, r3, r5
 8008d68:	1e6b      	subs	r3, r5, #1
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	bf45      	ittet	mi
 8008d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d72:	9304      	strmi	r3, [sp, #16]
 8008d74:	2300      	movpl	r3, #0
 8008d76:	2300      	movmi	r3, #0
 8008d78:	bf4c      	ite	mi
 8008d7a:	9305      	strmi	r3, [sp, #20]
 8008d7c:	9304      	strpl	r3, [sp, #16]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db3d      	blt.n	8008e00 <_dtoa_r+0x248>
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	9a00      	ldr	r2, [sp, #0]
 8008d88:	920a      	str	r2, [sp, #40]	; 0x28
 8008d8a:	4413      	add	r3, r2
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b09      	cmp	r3, #9
 8008d96:	f200 8089 	bhi.w	8008eac <_dtoa_r+0x2f4>
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	bfc4      	itt	gt
 8008d9e:	3b04      	subgt	r3, #4
 8008da0:	9306      	strgt	r3, [sp, #24]
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	f1a3 0302 	sub.w	r3, r3, #2
 8008da8:	bfcc      	ite	gt
 8008daa:	2500      	movgt	r5, #0
 8008dac:	2501      	movle	r5, #1
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	f200 8087 	bhi.w	8008ec2 <_dtoa_r+0x30a>
 8008db4:	e8df f003 	tbb	[pc, r3]
 8008db8:	59383a2d 	.word	0x59383a2d
 8008dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dc0:	441d      	add	r5, r3
 8008dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	bfc1      	itttt	gt
 8008dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dda:	bfda      	itte	le
 8008ddc:	f1c3 0320 	rsble	r3, r3, #32
 8008de0:	fa06 f003 	lslle.w	r0, r6, r3
 8008de4:	4318      	orrgt	r0, r3
 8008de6:	f7f7 fbb5 	bl	8000554 <__aeabi_ui2d>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4606      	mov	r6, r0
 8008dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008df2:	3d01      	subs	r5, #1
 8008df4:	930e      	str	r3, [sp, #56]	; 0x38
 8008df6:	e76a      	b.n	8008cce <_dtoa_r+0x116>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7b2      	b.n	8008d62 <_dtoa_r+0x1aa>
 8008dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dfe:	e7b1      	b.n	8008d64 <_dtoa_r+0x1ac>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	9a00      	ldr	r2, [sp, #0]
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	4253      	negs	r3, r2
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e10:	e7bf      	b.n	8008d92 <_dtoa_r+0x1da>
 8008e12:	2300      	movs	r3, #0
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dc55      	bgt.n	8008ec8 <_dtoa_r+0x310>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e22:	461a      	mov	r2, r3
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	e00c      	b.n	8008e42 <_dtoa_r+0x28a>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7f3      	b.n	8008e14 <_dtoa_r+0x25c>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	bfb8      	it	lt
 8008e40:	2301      	movlt	r3, #1
 8008e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e44:	2200      	movs	r2, #0
 8008e46:	6042      	str	r2, [r0, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	f102 0614 	add.w	r6, r2, #20
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	6841      	ldr	r1, [r0, #4]
 8008e52:	d93d      	bls.n	8008ed0 <_dtoa_r+0x318>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fedb 	bl	8009c10 <_Balloc>
 8008e5a:	9001      	str	r0, [sp, #4]
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d13b      	bne.n	8008ed8 <_dtoa_r+0x320>
 8008e60:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <_dtoa_r+0x2f0>)
 8008e62:	4602      	mov	r2, r0
 8008e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e68:	e6c0      	b.n	8008bec <_dtoa_r+0x34>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e7df      	b.n	8008e2e <_dtoa_r+0x276>
 8008e6e:	bf00      	nop
 8008e70:	636f4361 	.word	0x636f4361
 8008e74:	3fd287a7 	.word	0x3fd287a7
 8008e78:	8b60c8b3 	.word	0x8b60c8b3
 8008e7c:	3fc68a28 	.word	0x3fc68a28
 8008e80:	509f79fb 	.word	0x509f79fb
 8008e84:	3fd34413 	.word	0x3fd34413
 8008e88:	0800b04d 	.word	0x0800b04d
 8008e8c:	0800b064 	.word	0x0800b064
 8008e90:	7ff00000 	.word	0x7ff00000
 8008e94:	0800b049 	.word	0x0800b049
 8008e98:	0800b040 	.word	0x0800b040
 8008e9c:	0800b01d 	.word	0x0800b01d
 8008ea0:	3ff80000 	.word	0x3ff80000
 8008ea4:	0800b1b8 	.word	0x0800b1b8
 8008ea8:	0800b0bf 	.word	0x0800b0bf
 8008eac:	2501      	movs	r5, #1
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	9508      	str	r5, [sp, #32]
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2312      	movs	r3, #18
 8008ec0:	e7b0      	b.n	8008e24 <_dtoa_r+0x26c>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9308      	str	r3, [sp, #32]
 8008ec6:	e7f5      	b.n	8008eb4 <_dtoa_r+0x2fc>
 8008ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ece:	e7b8      	b.n	8008e42 <_dtoa_r+0x28a>
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	6041      	str	r1, [r0, #4]
 8008ed4:	0052      	lsls	r2, r2, #1
 8008ed6:	e7b8      	b.n	8008e4a <_dtoa_r+0x292>
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	2b0e      	cmp	r3, #14
 8008ee2:	f200 809d 	bhi.w	8009020 <_dtoa_r+0x468>
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	f000 809a 	beq.w	8009020 <_dtoa_r+0x468>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd32      	ble.n	8008f58 <_dtoa_r+0x3a0>
 8008ef2:	4ab7      	ldr	r2, [pc, #732]	; (80091d0 <_dtoa_r+0x618>)
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	05d8      	lsls	r0, r3, #23
 8008f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f08:	d516      	bpl.n	8008f38 <_dtoa_r+0x380>
 8008f0a:	4bb2      	ldr	r3, [pc, #712]	; (80091d4 <_dtoa_r+0x61c>)
 8008f0c:	ec51 0b19 	vmov	r0, r1, d9
 8008f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f14:	f7f7 fcc2 	bl	800089c <__aeabi_ddiv>
 8008f18:	f007 070f 	and.w	r7, r7, #15
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	2503      	movs	r5, #3
 8008f22:	4eac      	ldr	r6, [pc, #688]	; (80091d4 <_dtoa_r+0x61c>)
 8008f24:	b957      	cbnz	r7, 8008f3c <_dtoa_r+0x384>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	f7f7 fcb5 	bl	800089c <__aeabi_ddiv>
 8008f32:	4682      	mov	sl, r0
 8008f34:	468b      	mov	fp, r1
 8008f36:	e028      	b.n	8008f8a <_dtoa_r+0x3d2>
 8008f38:	2502      	movs	r5, #2
 8008f3a:	e7f2      	b.n	8008f22 <_dtoa_r+0x36a>
 8008f3c:	07f9      	lsls	r1, r7, #31
 8008f3e:	d508      	bpl.n	8008f52 <_dtoa_r+0x39a>
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f48:	f7f7 fb7e 	bl	8000648 <__aeabi_dmul>
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	4680      	mov	r8, r0
 8008f50:	4689      	mov	r9, r1
 8008f52:	107f      	asrs	r7, r7, #1
 8008f54:	3608      	adds	r6, #8
 8008f56:	e7e5      	b.n	8008f24 <_dtoa_r+0x36c>
 8008f58:	f000 809b 	beq.w	8009092 <_dtoa_r+0x4da>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	4f9d      	ldr	r7, [pc, #628]	; (80091d4 <_dtoa_r+0x61c>)
 8008f60:	425e      	negs	r6, r3
 8008f62:	4b9b      	ldr	r3, [pc, #620]	; (80091d0 <_dtoa_r+0x618>)
 8008f64:	f006 020f 	and.w	r2, r6, #15
 8008f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	ec51 0b19 	vmov	r0, r1, d9
 8008f74:	f7f7 fb68 	bl	8000648 <__aeabi_dmul>
 8008f78:	1136      	asrs	r6, r6, #4
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2502      	movs	r5, #2
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d17a      	bne.n	800907c <_dtoa_r+0x4c4>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d3      	bne.n	8008f32 <_dtoa_r+0x37a>
 8008f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8082 	beq.w	8009096 <_dtoa_r+0x4de>
 8008f92:	4b91      	ldr	r3, [pc, #580]	; (80091d8 <_dtoa_r+0x620>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d079      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d076      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd36      	ble.n	800901c <_dtoa_r+0x464>
 8008fae:	9b00      	ldr	r3, [sp, #0]
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	1e5f      	subs	r7, r3, #1
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4b88      	ldr	r3, [pc, #544]	; (80091dc <_dtoa_r+0x624>)
 8008fba:	f7f7 fb45 	bl	8000648 <__aeabi_dmul>
 8008fbe:	9e02      	ldr	r6, [sp, #8]
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7f7 fad4 	bl	8000574 <__aeabi_i2d>
 8008fcc:	4652      	mov	r2, sl
 8008fce:	465b      	mov	r3, fp
 8008fd0:	f7f7 fb3a 	bl	8000648 <__aeabi_dmul>
 8008fd4:	4b82      	ldr	r3, [pc, #520]	; (80091e0 <_dtoa_r+0x628>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f7f7 f980 	bl	80002dc <__adddf3>
 8008fdc:	46d0      	mov	r8, sl
 8008fde:	46d9      	mov	r9, fp
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	d158      	bne.n	800909c <_dtoa_r+0x4e4>
 8008fea:	4b7e      	ldr	r3, [pc, #504]	; (80091e4 <_dtoa_r+0x62c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	f7f7 f971 	bl	80002d8 <__aeabi_dsub>
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	f7f7 fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f040 8295 	bne.w	8009532 <_dtoa_r+0x97a>
 8009008:	4652      	mov	r2, sl
 800900a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8289 	bne.w	800952e <_dtoa_r+0x976>
 800901c:	ec5b ab19 	vmov	sl, fp, d9
 8009020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009022:	2b00      	cmp	r3, #0
 8009024:	f2c0 8148 	blt.w	80092b8 <_dtoa_r+0x700>
 8009028:	9a00      	ldr	r2, [sp, #0]
 800902a:	2a0e      	cmp	r2, #14
 800902c:	f300 8144 	bgt.w	80092b8 <_dtoa_r+0x700>
 8009030:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <_dtoa_r+0x618>)
 8009032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	f280 80d5 	bge.w	80091ec <_dtoa_r+0x634>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f300 80d1 	bgt.w	80091ec <_dtoa_r+0x634>
 800904a:	f040 826f 	bne.w	800952c <_dtoa_r+0x974>
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <_dtoa_r+0x62c>)
 8009050:	2200      	movs	r2, #0
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 faf7 	bl	8000648 <__aeabi_dmul>
 800905a:	4652      	mov	r2, sl
 800905c:	465b      	mov	r3, fp
 800905e:	f7f7 fd79 	bl	8000b54 <__aeabi_dcmpge>
 8009062:	9e03      	ldr	r6, [sp, #12]
 8009064:	4637      	mov	r7, r6
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8245 	bne.w	80094f6 <_dtoa_r+0x93e>
 800906c:	9d01      	ldr	r5, [sp, #4]
 800906e:	2331      	movs	r3, #49	; 0x31
 8009070:	f805 3b01 	strb.w	r3, [r5], #1
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	e240      	b.n	80094fe <_dtoa_r+0x946>
 800907c:	07f2      	lsls	r2, r6, #31
 800907e:	d505      	bpl.n	800908c <_dtoa_r+0x4d4>
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f7f7 fae0 	bl	8000648 <__aeabi_dmul>
 8009088:	3501      	adds	r5, #1
 800908a:	2301      	movs	r3, #1
 800908c:	1076      	asrs	r6, r6, #1
 800908e:	3708      	adds	r7, #8
 8009090:	e777      	b.n	8008f82 <_dtoa_r+0x3ca>
 8009092:	2502      	movs	r5, #2
 8009094:	e779      	b.n	8008f8a <_dtoa_r+0x3d2>
 8009096:	9f00      	ldr	r7, [sp, #0]
 8009098:	9e03      	ldr	r6, [sp, #12]
 800909a:	e794      	b.n	8008fc6 <_dtoa_r+0x40e>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	4b4c      	ldr	r3, [pc, #304]	; (80091d0 <_dtoa_r+0x618>)
 80090a0:	4431      	add	r1, r6
 80090a2:	910d      	str	r1, [sp, #52]	; 0x34
 80090a4:	9908      	ldr	r1, [sp, #32]
 80090a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d043      	beq.n	800913a <_dtoa_r+0x582>
 80090b2:	494d      	ldr	r1, [pc, #308]	; (80091e8 <_dtoa_r+0x630>)
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7f7 fbf1 	bl	800089c <__aeabi_ddiv>
 80090ba:	4652      	mov	r2, sl
 80090bc:	465b      	mov	r3, fp
 80090be:	f7f7 f90b 	bl	80002d8 <__aeabi_dsub>
 80090c2:	9d01      	ldr	r5, [sp, #4]
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	4649      	mov	r1, r9
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7f7 fd6c 	bl	8000ba8 <__aeabi_d2iz>
 80090d0:	4606      	mov	r6, r0
 80090d2:	f7f7 fa4f 	bl	8000574 <__aeabi_i2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f8fb 	bl	80002d8 <__aeabi_dsub>
 80090e2:	3630      	adds	r6, #48	; 0x30
 80090e4:	f805 6b01 	strb.w	r6, [r5], #1
 80090e8:	4652      	mov	r2, sl
 80090ea:	465b      	mov	r3, fp
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	f7f7 fd1c 	bl	8000b2c <__aeabi_dcmplt>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d163      	bne.n	80091c0 <_dtoa_r+0x608>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	4936      	ldr	r1, [pc, #216]	; (80091d8 <_dtoa_r+0x620>)
 80090fe:	2000      	movs	r0, #0
 8009100:	f7f7 f8ea 	bl	80002d8 <__aeabi_dsub>
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	f7f7 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	f040 80b5 	bne.w	800927c <_dtoa_r+0x6c4>
 8009112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009114:	429d      	cmp	r5, r3
 8009116:	d081      	beq.n	800901c <_dtoa_r+0x464>
 8009118:	4b30      	ldr	r3, [pc, #192]	; (80091dc <_dtoa_r+0x624>)
 800911a:	2200      	movs	r2, #0
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	f7f7 fa92 	bl	8000648 <__aeabi_dmul>
 8009124:	4b2d      	ldr	r3, [pc, #180]	; (80091dc <_dtoa_r+0x624>)
 8009126:	4682      	mov	sl, r0
 8009128:	468b      	mov	fp, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	2200      	movs	r2, #0
 8009130:	f7f7 fa8a 	bl	8000648 <__aeabi_dmul>
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	e7c6      	b.n	80090c8 <_dtoa_r+0x510>
 800913a:	4650      	mov	r0, sl
 800913c:	4659      	mov	r1, fp
 800913e:	f7f7 fa83 	bl	8000648 <__aeabi_dmul>
 8009142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009144:	9d01      	ldr	r5, [sp, #4]
 8009146:	930f      	str	r3, [sp, #60]	; 0x3c
 8009148:	4682      	mov	sl, r0
 800914a:	468b      	mov	fp, r1
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	f7f7 fd2a 	bl	8000ba8 <__aeabi_d2iz>
 8009154:	4606      	mov	r6, r0
 8009156:	f7f7 fa0d 	bl	8000574 <__aeabi_i2d>
 800915a:	3630      	adds	r6, #48	; 0x30
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 f8b8 	bl	80002d8 <__aeabi_dsub>
 8009168:	f805 6b01 	strb.w	r6, [r5], #1
 800916c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916e:	429d      	cmp	r5, r3
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	d124      	bne.n	80091c4 <_dtoa_r+0x60c>
 800917a:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <_dtoa_r+0x630>)
 800917c:	4650      	mov	r0, sl
 800917e:	4659      	mov	r1, fp
 8009180:	f7f7 f8ac 	bl	80002dc <__adddf3>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8009190:	2800      	cmp	r0, #0
 8009192:	d173      	bne.n	800927c <_dtoa_r+0x6c4>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	4913      	ldr	r1, [pc, #76]	; (80091e8 <_dtoa_r+0x630>)
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 f89c 	bl	80002d8 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f43f af35 	beq.w	800901c <_dtoa_r+0x464>
 80091b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091b4:	1e6b      	subs	r3, r5, #1
 80091b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d0f8      	beq.n	80091b2 <_dtoa_r+0x5fa>
 80091c0:	9700      	str	r7, [sp, #0]
 80091c2:	e049      	b.n	8009258 <_dtoa_r+0x6a0>
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <_dtoa_r+0x624>)
 80091c6:	f7f7 fa3f 	bl	8000648 <__aeabi_dmul>
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	e7bd      	b.n	800914c <_dtoa_r+0x594>
 80091d0:	0800b1b8 	.word	0x0800b1b8
 80091d4:	0800b190 	.word	0x0800b190
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	40240000 	.word	0x40240000
 80091e0:	401c0000 	.word	0x401c0000
 80091e4:	40140000 	.word	0x40140000
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	9d01      	ldr	r5, [sp, #4]
 80091ee:	4656      	mov	r6, sl
 80091f0:	465f      	mov	r7, fp
 80091f2:	4642      	mov	r2, r8
 80091f4:	464b      	mov	r3, r9
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fb4f 	bl	800089c <__aeabi_ddiv>
 80091fe:	f7f7 fcd3 	bl	8000ba8 <__aeabi_d2iz>
 8009202:	4682      	mov	sl, r0
 8009204:	f7f7 f9b6 	bl	8000574 <__aeabi_i2d>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	f7f7 fa1c 	bl	8000648 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800921c:	f7f7 f85c 	bl	80002d8 <__aeabi_dsub>
 8009220:	f805 6b01 	strb.w	r6, [r5], #1
 8009224:	9e01      	ldr	r6, [sp, #4]
 8009226:	9f03      	ldr	r7, [sp, #12]
 8009228:	1bae      	subs	r6, r5, r6
 800922a:	42b7      	cmp	r7, r6
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	d135      	bne.n	800929e <_dtoa_r+0x6e6>
 8009232:	f7f7 f853 	bl	80002dc <__adddf3>
 8009236:	4642      	mov	r2, r8
 8009238:	464b      	mov	r3, r9
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	f7f7 fc93 	bl	8000b68 <__aeabi_dcmpgt>
 8009242:	b9d0      	cbnz	r0, 800927a <_dtoa_r+0x6c2>
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8009250:	b110      	cbz	r0, 8009258 <_dtoa_r+0x6a0>
 8009252:	f01a 0f01 	tst.w	sl, #1
 8009256:	d110      	bne.n	800927a <_dtoa_r+0x6c2>
 8009258:	4620      	mov	r0, r4
 800925a:	ee18 1a10 	vmov	r1, s16
 800925e:	f000 fd17 	bl	8009c90 <_Bfree>
 8009262:	2300      	movs	r3, #0
 8009264:	9800      	ldr	r0, [sp, #0]
 8009266:	702b      	strb	r3, [r5, #0]
 8009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800926a:	3001      	adds	r0, #1
 800926c:	6018      	str	r0, [r3, #0]
 800926e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009270:	2b00      	cmp	r3, #0
 8009272:	f43f acf1 	beq.w	8008c58 <_dtoa_r+0xa0>
 8009276:	601d      	str	r5, [r3, #0]
 8009278:	e4ee      	b.n	8008c58 <_dtoa_r+0xa0>
 800927a:	9f00      	ldr	r7, [sp, #0]
 800927c:	462b      	mov	r3, r5
 800927e:	461d      	mov	r5, r3
 8009280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009284:	2a39      	cmp	r2, #57	; 0x39
 8009286:	d106      	bne.n	8009296 <_dtoa_r+0x6de>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d1f7      	bne.n	800927e <_dtoa_r+0x6c6>
 800928e:	9901      	ldr	r1, [sp, #4]
 8009290:	2230      	movs	r2, #48	; 0x30
 8009292:	3701      	adds	r7, #1
 8009294:	700a      	strb	r2, [r1, #0]
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	3201      	adds	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e790      	b.n	80091c0 <_dtoa_r+0x608>
 800929e:	4ba6      	ldr	r3, [pc, #664]	; (8009538 <_dtoa_r+0x980>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f9d1 	bl	8000648 <__aeabi_dmul>
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4606      	mov	r6, r0
 80092ac:	460f      	mov	r7, r1
 80092ae:	f7f7 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d09d      	beq.n	80091f2 <_dtoa_r+0x63a>
 80092b6:	e7cf      	b.n	8009258 <_dtoa_r+0x6a0>
 80092b8:	9a08      	ldr	r2, [sp, #32]
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f000 80d7 	beq.w	800946e <_dtoa_r+0x8b6>
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	f300 80ba 	bgt.w	800943c <_dtoa_r+0x884>
 80092c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	f000 80b2 	beq.w	8009434 <_dtoa_r+0x87c>
 80092d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092d4:	9e07      	ldr	r6, [sp, #28]
 80092d6:	9d04      	ldr	r5, [sp, #16]
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	441a      	add	r2, r3
 80092dc:	9204      	str	r2, [sp, #16]
 80092de:	9a05      	ldr	r2, [sp, #20]
 80092e0:	2101      	movs	r1, #1
 80092e2:	441a      	add	r2, r3
 80092e4:	4620      	mov	r0, r4
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	f000 fd8a 	bl	8009e00 <__i2b>
 80092ec:	4607      	mov	r7, r0
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	dd0c      	ble.n	800930c <_dtoa_r+0x754>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd09      	ble.n	800930c <_dtoa_r+0x754>
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	bfa8      	it	ge
 80092fe:	462b      	movge	r3, r5
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	9204      	str	r2, [sp, #16]
 8009304:	9a05      	ldr	r2, [sp, #20]
 8009306:	1aed      	subs	r5, r5, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	b31b      	cbz	r3, 8009358 <_dtoa_r+0x7a0>
 8009310:	9b08      	ldr	r3, [sp, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80af 	beq.w	8009476 <_dtoa_r+0x8be>
 8009318:	2e00      	cmp	r6, #0
 800931a:	dd13      	ble.n	8009344 <_dtoa_r+0x78c>
 800931c:	4639      	mov	r1, r7
 800931e:	4632      	mov	r2, r6
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fe2d 	bl	8009f80 <__pow5mult>
 8009326:	ee18 2a10 	vmov	r2, s16
 800932a:	4601      	mov	r1, r0
 800932c:	4607      	mov	r7, r0
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fd7c 	bl	8009e2c <__multiply>
 8009334:	ee18 1a10 	vmov	r1, s16
 8009338:	4680      	mov	r8, r0
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fca8 	bl	8009c90 <_Bfree>
 8009340:	ee08 8a10 	vmov	s16, r8
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	1b9a      	subs	r2, r3, r6
 8009348:	d006      	beq.n	8009358 <_dtoa_r+0x7a0>
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fe16 	bl	8009f80 <__pow5mult>
 8009354:	ee08 0a10 	vmov	s16, r0
 8009358:	2101      	movs	r1, #1
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fd50 	bl	8009e00 <__i2b>
 8009360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	4606      	mov	r6, r0
 8009366:	f340 8088 	ble.w	800947a <_dtoa_r+0x8c2>
 800936a:	461a      	mov	r2, r3
 800936c:	4601      	mov	r1, r0
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fe06 	bl	8009f80 <__pow5mult>
 8009374:	9b06      	ldr	r3, [sp, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	4606      	mov	r6, r0
 800937a:	f340 8081 	ble.w	8009480 <_dtoa_r+0x8c8>
 800937e:	f04f 0800 	mov.w	r8, #0
 8009382:	6933      	ldr	r3, [r6, #16]
 8009384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009388:	6918      	ldr	r0, [r3, #16]
 800938a:	f000 fce9 	bl	8009d60 <__hi0bits>
 800938e:	f1c0 0020 	rsb	r0, r0, #32
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	4418      	add	r0, r3
 8009396:	f010 001f 	ands.w	r0, r0, #31
 800939a:	f000 8092 	beq.w	80094c2 <_dtoa_r+0x90a>
 800939e:	f1c0 0320 	rsb	r3, r0, #32
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	f340 808a 	ble.w	80094bc <_dtoa_r+0x904>
 80093a8:	f1c0 001c 	rsb	r0, r0, #28
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	4403      	add	r3, r0
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9b05      	ldr	r3, [sp, #20]
 80093b4:	4403      	add	r3, r0
 80093b6:	4405      	add	r5, r0
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd07      	ble.n	80093d0 <_dtoa_r+0x818>
 80093c0:	ee18 1a10 	vmov	r1, s16
 80093c4:	461a      	mov	r2, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fe34 	bl	800a034 <__lshift>
 80093cc:	ee08 0a10 	vmov	s16, r0
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dd05      	ble.n	80093e2 <_dtoa_r+0x82a>
 80093d6:	4631      	mov	r1, r6
 80093d8:	461a      	mov	r2, r3
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fe2a 	bl	800a034 <__lshift>
 80093e0:	4606      	mov	r6, r0
 80093e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d06e      	beq.n	80094c6 <_dtoa_r+0x90e>
 80093e8:	ee18 0a10 	vmov	r0, s16
 80093ec:	4631      	mov	r1, r6
 80093ee:	f000 fe91 	bl	800a114 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	da67      	bge.n	80094c6 <_dtoa_r+0x90e>
 80093f6:	9b00      	ldr	r3, [sp, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	ee18 1a10 	vmov	r1, s16
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	220a      	movs	r2, #10
 8009402:	2300      	movs	r3, #0
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fc65 	bl	8009cd4 <__multadd>
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	ee08 0a10 	vmov	s16, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 81b1 	beq.w	8009778 <_dtoa_r+0xbc0>
 8009416:	2300      	movs	r3, #0
 8009418:	4639      	mov	r1, r7
 800941a:	220a      	movs	r2, #10
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fc59 	bl	8009cd4 <__multadd>
 8009422:	9b02      	ldr	r3, [sp, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	4607      	mov	r7, r0
 8009428:	f300 808e 	bgt.w	8009548 <_dtoa_r+0x990>
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	dc51      	bgt.n	80094d6 <_dtoa_r+0x91e>
 8009432:	e089      	b.n	8009548 <_dtoa_r+0x990>
 8009434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800943a:	e74b      	b.n	80092d4 <_dtoa_r+0x71c>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	1e5e      	subs	r6, r3, #1
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	42b3      	cmp	r3, r6
 8009444:	bfbf      	itttt	lt
 8009446:	9b07      	ldrlt	r3, [sp, #28]
 8009448:	9607      	strlt	r6, [sp, #28]
 800944a:	1af2      	sublt	r2, r6, r3
 800944c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800944e:	bfb6      	itet	lt
 8009450:	189b      	addlt	r3, r3, r2
 8009452:	1b9e      	subge	r6, r3, r6
 8009454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	bfb8      	it	lt
 800945a:	2600      	movlt	r6, #0
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfb7      	itett	lt
 8009460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009468:	1a9d      	sublt	r5, r3, r2
 800946a:	2300      	movlt	r3, #0
 800946c:	e734      	b.n	80092d8 <_dtoa_r+0x720>
 800946e:	9e07      	ldr	r6, [sp, #28]
 8009470:	9d04      	ldr	r5, [sp, #16]
 8009472:	9f08      	ldr	r7, [sp, #32]
 8009474:	e73b      	b.n	80092ee <_dtoa_r+0x736>
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	e767      	b.n	800934a <_dtoa_r+0x792>
 800947a:	9b06      	ldr	r3, [sp, #24]
 800947c:	2b01      	cmp	r3, #1
 800947e:	dc18      	bgt.n	80094b2 <_dtoa_r+0x8fa>
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	d115      	bne.n	80094b2 <_dtoa_r+0x8fa>
 8009486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800948a:	b993      	cbnz	r3, 80094b2 <_dtoa_r+0x8fa>
 800948c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009490:	0d1b      	lsrs	r3, r3, #20
 8009492:	051b      	lsls	r3, r3, #20
 8009494:	b183      	cbz	r3, 80094b8 <_dtoa_r+0x900>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	3301      	adds	r3, #1
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	f04f 0801 	mov.w	r8, #1
 80094a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f47f af6a 	bne.w	8009382 <_dtoa_r+0x7ca>
 80094ae:	2001      	movs	r0, #1
 80094b0:	e76f      	b.n	8009392 <_dtoa_r+0x7da>
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	e7f6      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094b8:	4698      	mov	r8, r3
 80094ba:	e7f4      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094bc:	f43f af7d 	beq.w	80093ba <_dtoa_r+0x802>
 80094c0:	4618      	mov	r0, r3
 80094c2:	301c      	adds	r0, #28
 80094c4:	e772      	b.n	80093ac <_dtoa_r+0x7f4>
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc37      	bgt.n	800953c <_dtoa_r+0x984>
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	dd34      	ble.n	800953c <_dtoa_r+0x984>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	9302      	str	r3, [sp, #8]
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	b96b      	cbnz	r3, 80094f6 <_dtoa_r+0x93e>
 80094da:	4631      	mov	r1, r6
 80094dc:	2205      	movs	r2, #5
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 fbf8 	bl	8009cd4 <__multadd>
 80094e4:	4601      	mov	r1, r0
 80094e6:	4606      	mov	r6, r0
 80094e8:	ee18 0a10 	vmov	r0, s16
 80094ec:	f000 fe12 	bl	800a114 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f73f adbb 	bgt.w	800906c <_dtoa_r+0x4b4>
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	9d01      	ldr	r5, [sp, #4]
 80094fa:	43db      	mvns	r3, r3
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fbc3 	bl	8009c90 <_Bfree>
 800950a:	2f00      	cmp	r7, #0
 800950c:	f43f aea4 	beq.w	8009258 <_dtoa_r+0x6a0>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d005      	beq.n	8009522 <_dtoa_r+0x96a>
 8009516:	45b8      	cmp	r8, r7
 8009518:	d003      	beq.n	8009522 <_dtoa_r+0x96a>
 800951a:	4641      	mov	r1, r8
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fbb7 	bl	8009c90 <_Bfree>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fbb3 	bl	8009c90 <_Bfree>
 800952a:	e695      	b.n	8009258 <_dtoa_r+0x6a0>
 800952c:	2600      	movs	r6, #0
 800952e:	4637      	mov	r7, r6
 8009530:	e7e1      	b.n	80094f6 <_dtoa_r+0x93e>
 8009532:	9700      	str	r7, [sp, #0]
 8009534:	4637      	mov	r7, r6
 8009536:	e599      	b.n	800906c <_dtoa_r+0x4b4>
 8009538:	40240000 	.word	0x40240000
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ca 	beq.w	80096d8 <_dtoa_r+0xb20>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	2d00      	cmp	r5, #0
 800954a:	dd05      	ble.n	8009558 <_dtoa_r+0x9a0>
 800954c:	4639      	mov	r1, r7
 800954e:	462a      	mov	r2, r5
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fd6f 	bl	800a034 <__lshift>
 8009556:	4607      	mov	r7, r0
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d05b      	beq.n	8009616 <_dtoa_r+0xa5e>
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fb55 	bl	8009c10 <_Balloc>
 8009566:	4605      	mov	r5, r0
 8009568:	b928      	cbnz	r0, 8009576 <_dtoa_r+0x9be>
 800956a:	4b87      	ldr	r3, [pc, #540]	; (8009788 <_dtoa_r+0xbd0>)
 800956c:	4602      	mov	r2, r0
 800956e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009572:	f7ff bb3b 	b.w	8008bec <_dtoa_r+0x34>
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	f107 010c 	add.w	r1, r7, #12
 8009580:	300c      	adds	r0, #12
 8009582:	f000 fb2b 	bl	8009bdc <memcpy>
 8009586:	2201      	movs	r2, #1
 8009588:	4629      	mov	r1, r5
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fd52 	bl	800a034 <__lshift>
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	f103 0901 	add.w	r9, r3, #1
 8009596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800959a:	4413      	add	r3, r2
 800959c:	9305      	str	r3, [sp, #20]
 800959e:	f00a 0301 	and.w	r3, sl, #1
 80095a2:	46b8      	mov	r8, r7
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	4607      	mov	r7, r0
 80095a8:	4631      	mov	r1, r6
 80095aa:	ee18 0a10 	vmov	r0, s16
 80095ae:	f7ff fa77 	bl	8008aa0 <quorem>
 80095b2:	4641      	mov	r1, r8
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095ba:	ee18 0a10 	vmov	r0, s16
 80095be:	f000 fda9 	bl	800a114 <__mcmp>
 80095c2:	463a      	mov	r2, r7
 80095c4:	9003      	str	r0, [sp, #12]
 80095c6:	4631      	mov	r1, r6
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fdbf 	bl	800a14c <__mdiff>
 80095ce:	68c2      	ldr	r2, [r0, #12]
 80095d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80095d4:	4605      	mov	r5, r0
 80095d6:	bb02      	cbnz	r2, 800961a <_dtoa_r+0xa62>
 80095d8:	4601      	mov	r1, r0
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	f000 fd99 	bl	800a114 <__mcmp>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4629      	mov	r1, r5
 80095e6:	4620      	mov	r0, r4
 80095e8:	9207      	str	r2, [sp, #28]
 80095ea:	f000 fb51 	bl	8009c90 <_Bfree>
 80095ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095f2:	ea43 0102 	orr.w	r1, r3, r2
 80095f6:	9b04      	ldr	r3, [sp, #16]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	464d      	mov	r5, r9
 80095fc:	d10f      	bne.n	800961e <_dtoa_r+0xa66>
 80095fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009602:	d02a      	beq.n	800965a <_dtoa_r+0xaa2>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dd02      	ble.n	8009610 <_dtoa_r+0xa58>
 800960a:	9b02      	ldr	r3, [sp, #8]
 800960c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009610:	f88b a000 	strb.w	sl, [fp]
 8009614:	e775      	b.n	8009502 <_dtoa_r+0x94a>
 8009616:	4638      	mov	r0, r7
 8009618:	e7ba      	b.n	8009590 <_dtoa_r+0x9d8>
 800961a:	2201      	movs	r2, #1
 800961c:	e7e2      	b.n	80095e4 <_dtoa_r+0xa2c>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	db04      	blt.n	800962e <_dtoa_r+0xa76>
 8009624:	9906      	ldr	r1, [sp, #24]
 8009626:	430b      	orrs	r3, r1
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	430b      	orrs	r3, r1
 800962c:	d122      	bne.n	8009674 <_dtoa_r+0xabc>
 800962e:	2a00      	cmp	r2, #0
 8009630:	ddee      	ble.n	8009610 <_dtoa_r+0xa58>
 8009632:	ee18 1a10 	vmov	r1, s16
 8009636:	2201      	movs	r2, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fcfb 	bl	800a034 <__lshift>
 800963e:	4631      	mov	r1, r6
 8009640:	ee08 0a10 	vmov	s16, r0
 8009644:	f000 fd66 	bl	800a114 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dc03      	bgt.n	8009654 <_dtoa_r+0xa9c>
 800964c:	d1e0      	bne.n	8009610 <_dtoa_r+0xa58>
 800964e:	f01a 0f01 	tst.w	sl, #1
 8009652:	d0dd      	beq.n	8009610 <_dtoa_r+0xa58>
 8009654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009658:	d1d7      	bne.n	800960a <_dtoa_r+0xa52>
 800965a:	2339      	movs	r3, #57	; 0x39
 800965c:	f88b 3000 	strb.w	r3, [fp]
 8009660:	462b      	mov	r3, r5
 8009662:	461d      	mov	r5, r3
 8009664:	3b01      	subs	r3, #1
 8009666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800966a:	2a39      	cmp	r2, #57	; 0x39
 800966c:	d071      	beq.n	8009752 <_dtoa_r+0xb9a>
 800966e:	3201      	adds	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e746      	b.n	8009502 <_dtoa_r+0x94a>
 8009674:	2a00      	cmp	r2, #0
 8009676:	dd07      	ble.n	8009688 <_dtoa_r+0xad0>
 8009678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800967c:	d0ed      	beq.n	800965a <_dtoa_r+0xaa2>
 800967e:	f10a 0301 	add.w	r3, sl, #1
 8009682:	f88b 3000 	strb.w	r3, [fp]
 8009686:	e73c      	b.n	8009502 <_dtoa_r+0x94a>
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800968e:	4599      	cmp	r9, r3
 8009690:	d047      	beq.n	8009722 <_dtoa_r+0xb6a>
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fb1a 	bl	8009cd4 <__multadd>
 80096a0:	45b8      	cmp	r8, r7
 80096a2:	ee08 0a10 	vmov	s16, r0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	f04f 020a 	mov.w	r2, #10
 80096ae:	4641      	mov	r1, r8
 80096b0:	4620      	mov	r0, r4
 80096b2:	d106      	bne.n	80096c2 <_dtoa_r+0xb0a>
 80096b4:	f000 fb0e 	bl	8009cd4 <__multadd>
 80096b8:	4680      	mov	r8, r0
 80096ba:	4607      	mov	r7, r0
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e772      	b.n	80095a8 <_dtoa_r+0x9f0>
 80096c2:	f000 fb07 	bl	8009cd4 <__multadd>
 80096c6:	4639      	mov	r1, r7
 80096c8:	4680      	mov	r8, r0
 80096ca:	2300      	movs	r3, #0
 80096cc:	220a      	movs	r2, #10
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fb00 	bl	8009cd4 <__multadd>
 80096d4:	4607      	mov	r7, r0
 80096d6:	e7f1      	b.n	80096bc <_dtoa_r+0xb04>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	9302      	str	r3, [sp, #8]
 80096dc:	9d01      	ldr	r5, [sp, #4]
 80096de:	ee18 0a10 	vmov	r0, s16
 80096e2:	4631      	mov	r1, r6
 80096e4:	f7ff f9dc 	bl	8008aa0 <quorem>
 80096e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	f805 ab01 	strb.w	sl, [r5], #1
 80096f2:	1aea      	subs	r2, r5, r3
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	dd09      	ble.n	800970e <_dtoa_r+0xb56>
 80096fa:	ee18 1a10 	vmov	r1, s16
 80096fe:	2300      	movs	r3, #0
 8009700:	220a      	movs	r2, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f000 fae6 	bl	8009cd4 <__multadd>
 8009708:	ee08 0a10 	vmov	s16, r0
 800970c:	e7e7      	b.n	80096de <_dtoa_r+0xb26>
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfc8      	it	gt
 8009714:	461d      	movgt	r5, r3
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	bfd8      	it	le
 800971a:	2501      	movle	r5, #1
 800971c:	441d      	add	r5, r3
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	ee18 1a10 	vmov	r1, s16
 8009726:	2201      	movs	r2, #1
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fc83 	bl	800a034 <__lshift>
 800972e:	4631      	mov	r1, r6
 8009730:	ee08 0a10 	vmov	s16, r0
 8009734:	f000 fcee 	bl	800a114 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	dc91      	bgt.n	8009660 <_dtoa_r+0xaa8>
 800973c:	d102      	bne.n	8009744 <_dtoa_r+0xb8c>
 800973e:	f01a 0f01 	tst.w	sl, #1
 8009742:	d18d      	bne.n	8009660 <_dtoa_r+0xaa8>
 8009744:	462b      	mov	r3, r5
 8009746:	461d      	mov	r5, r3
 8009748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800974c:	2a30      	cmp	r2, #48	; 0x30
 800974e:	d0fa      	beq.n	8009746 <_dtoa_r+0xb8e>
 8009750:	e6d7      	b.n	8009502 <_dtoa_r+0x94a>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d184      	bne.n	8009662 <_dtoa_r+0xaaa>
 8009758:	9b00      	ldr	r3, [sp, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2331      	movs	r3, #49	; 0x31
 8009760:	7013      	strb	r3, [r2, #0]
 8009762:	e6ce      	b.n	8009502 <_dtoa_r+0x94a>
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <_dtoa_r+0xbd4>)
 8009766:	f7ff ba95 	b.w	8008c94 <_dtoa_r+0xdc>
 800976a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f aa6e 	bne.w	8008c4e <_dtoa_r+0x96>
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <_dtoa_r+0xbd8>)
 8009774:	f7ff ba8e 	b.w	8008c94 <_dtoa_r+0xdc>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dcae      	bgt.n	80096dc <_dtoa_r+0xb24>
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	2b02      	cmp	r3, #2
 8009782:	f73f aea8 	bgt.w	80094d6 <_dtoa_r+0x91e>
 8009786:	e7a9      	b.n	80096dc <_dtoa_r+0xb24>
 8009788:	0800b0bf 	.word	0x0800b0bf
 800978c:	0800b01c 	.word	0x0800b01c
 8009790:	0800b040 	.word	0x0800b040

08009794 <__sflush_r>:
 8009794:	898a      	ldrh	r2, [r1, #12]
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	4605      	mov	r5, r0
 800979c:	0710      	lsls	r0, r2, #28
 800979e:	460c      	mov	r4, r1
 80097a0:	d458      	bmi.n	8009854 <__sflush_r+0xc0>
 80097a2:	684b      	ldr	r3, [r1, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dc05      	bgt.n	80097b4 <__sflush_r+0x20>
 80097a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dc02      	bgt.n	80097b4 <__sflush_r+0x20>
 80097ae:	2000      	movs	r0, #0
 80097b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	d0f9      	beq.n	80097ae <__sflush_r+0x1a>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097c0:	682f      	ldr	r7, [r5, #0]
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	d032      	beq.n	800982c <__sflush_r+0x98>
 80097c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	075a      	lsls	r2, r3, #29
 80097cc:	d505      	bpl.n	80097da <__sflush_r+0x46>
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	1ac0      	subs	r0, r0, r3
 80097d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097d4:	b10b      	cbz	r3, 80097da <__sflush_r+0x46>
 80097d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d8:	1ac0      	subs	r0, r0, r3
 80097da:	2300      	movs	r3, #0
 80097dc:	4602      	mov	r2, r0
 80097de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097e0:	6a21      	ldr	r1, [r4, #32]
 80097e2:	4628      	mov	r0, r5
 80097e4:	47b0      	blx	r6
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	d106      	bne.n	80097fa <__sflush_r+0x66>
 80097ec:	6829      	ldr	r1, [r5, #0]
 80097ee:	291d      	cmp	r1, #29
 80097f0:	d82c      	bhi.n	800984c <__sflush_r+0xb8>
 80097f2:	4a2a      	ldr	r2, [pc, #168]	; (800989c <__sflush_r+0x108>)
 80097f4:	40ca      	lsrs	r2, r1
 80097f6:	07d6      	lsls	r6, r2, #31
 80097f8:	d528      	bpl.n	800984c <__sflush_r+0xb8>
 80097fa:	2200      	movs	r2, #0
 80097fc:	6062      	str	r2, [r4, #4]
 80097fe:	04d9      	lsls	r1, r3, #19
 8009800:	6922      	ldr	r2, [r4, #16]
 8009802:	6022      	str	r2, [r4, #0]
 8009804:	d504      	bpl.n	8009810 <__sflush_r+0x7c>
 8009806:	1c42      	adds	r2, r0, #1
 8009808:	d101      	bne.n	800980e <__sflush_r+0x7a>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b903      	cbnz	r3, 8009810 <__sflush_r+0x7c>
 800980e:	6560      	str	r0, [r4, #84]	; 0x54
 8009810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009812:	602f      	str	r7, [r5, #0]
 8009814:	2900      	cmp	r1, #0
 8009816:	d0ca      	beq.n	80097ae <__sflush_r+0x1a>
 8009818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800981c:	4299      	cmp	r1, r3
 800981e:	d002      	beq.n	8009826 <__sflush_r+0x92>
 8009820:	4628      	mov	r0, r5
 8009822:	f7fe fa5f 	bl	8007ce4 <_free_r>
 8009826:	2000      	movs	r0, #0
 8009828:	6360      	str	r0, [r4, #52]	; 0x34
 800982a:	e7c1      	b.n	80097b0 <__sflush_r+0x1c>
 800982c:	6a21      	ldr	r1, [r4, #32]
 800982e:	2301      	movs	r3, #1
 8009830:	4628      	mov	r0, r5
 8009832:	47b0      	blx	r6
 8009834:	1c41      	adds	r1, r0, #1
 8009836:	d1c7      	bne.n	80097c8 <__sflush_r+0x34>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0c4      	beq.n	80097c8 <__sflush_r+0x34>
 800983e:	2b1d      	cmp	r3, #29
 8009840:	d001      	beq.n	8009846 <__sflush_r+0xb2>
 8009842:	2b16      	cmp	r3, #22
 8009844:	d101      	bne.n	800984a <__sflush_r+0xb6>
 8009846:	602f      	str	r7, [r5, #0]
 8009848:	e7b1      	b.n	80097ae <__sflush_r+0x1a>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009850:	81a3      	strh	r3, [r4, #12]
 8009852:	e7ad      	b.n	80097b0 <__sflush_r+0x1c>
 8009854:	690f      	ldr	r7, [r1, #16]
 8009856:	2f00      	cmp	r7, #0
 8009858:	d0a9      	beq.n	80097ae <__sflush_r+0x1a>
 800985a:	0793      	lsls	r3, r2, #30
 800985c:	680e      	ldr	r6, [r1, #0]
 800985e:	bf08      	it	eq
 8009860:	694b      	ldreq	r3, [r1, #20]
 8009862:	600f      	str	r7, [r1, #0]
 8009864:	bf18      	it	ne
 8009866:	2300      	movne	r3, #0
 8009868:	eba6 0807 	sub.w	r8, r6, r7
 800986c:	608b      	str	r3, [r1, #8]
 800986e:	f1b8 0f00 	cmp.w	r8, #0
 8009872:	dd9c      	ble.n	80097ae <__sflush_r+0x1a>
 8009874:	6a21      	ldr	r1, [r4, #32]
 8009876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009878:	4643      	mov	r3, r8
 800987a:	463a      	mov	r2, r7
 800987c:	4628      	mov	r0, r5
 800987e:	47b0      	blx	r6
 8009880:	2800      	cmp	r0, #0
 8009882:	dc06      	bgt.n	8009892 <__sflush_r+0xfe>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009890:	e78e      	b.n	80097b0 <__sflush_r+0x1c>
 8009892:	4407      	add	r7, r0
 8009894:	eba8 0800 	sub.w	r8, r8, r0
 8009898:	e7e9      	b.n	800986e <__sflush_r+0xda>
 800989a:	bf00      	nop
 800989c:	20400001 	.word	0x20400001

080098a0 <_fflush_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	4605      	mov	r5, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	b913      	cbnz	r3, 80098b0 <_fflush_r+0x10>
 80098aa:	2500      	movs	r5, #0
 80098ac:	4628      	mov	r0, r5
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	b118      	cbz	r0, 80098ba <_fflush_r+0x1a>
 80098b2:	6983      	ldr	r3, [r0, #24]
 80098b4:	b90b      	cbnz	r3, 80098ba <_fflush_r+0x1a>
 80098b6:	f000 f887 	bl	80099c8 <__sinit>
 80098ba:	4b14      	ldr	r3, [pc, #80]	; (800990c <_fflush_r+0x6c>)
 80098bc:	429c      	cmp	r4, r3
 80098be:	d11b      	bne.n	80098f8 <_fflush_r+0x58>
 80098c0:	686c      	ldr	r4, [r5, #4]
 80098c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0ef      	beq.n	80098aa <_fflush_r+0xa>
 80098ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098cc:	07d0      	lsls	r0, r2, #31
 80098ce:	d404      	bmi.n	80098da <_fflush_r+0x3a>
 80098d0:	0599      	lsls	r1, r3, #22
 80098d2:	d402      	bmi.n	80098da <_fflush_r+0x3a>
 80098d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098d6:	f000 f91a 	bl	8009b0e <__retarget_lock_acquire_recursive>
 80098da:	4628      	mov	r0, r5
 80098dc:	4621      	mov	r1, r4
 80098de:	f7ff ff59 	bl	8009794 <__sflush_r>
 80098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e4:	07da      	lsls	r2, r3, #31
 80098e6:	4605      	mov	r5, r0
 80098e8:	d4e0      	bmi.n	80098ac <_fflush_r+0xc>
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	059b      	lsls	r3, r3, #22
 80098ee:	d4dd      	bmi.n	80098ac <_fflush_r+0xc>
 80098f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f2:	f000 f90d 	bl	8009b10 <__retarget_lock_release_recursive>
 80098f6:	e7d9      	b.n	80098ac <_fflush_r+0xc>
 80098f8:	4b05      	ldr	r3, [pc, #20]	; (8009910 <_fflush_r+0x70>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d101      	bne.n	8009902 <_fflush_r+0x62>
 80098fe:	68ac      	ldr	r4, [r5, #8]
 8009900:	e7df      	b.n	80098c2 <_fflush_r+0x22>
 8009902:	4b04      	ldr	r3, [pc, #16]	; (8009914 <_fflush_r+0x74>)
 8009904:	429c      	cmp	r4, r3
 8009906:	bf08      	it	eq
 8009908:	68ec      	ldreq	r4, [r5, #12]
 800990a:	e7da      	b.n	80098c2 <_fflush_r+0x22>
 800990c:	0800b0f0 	.word	0x0800b0f0
 8009910:	0800b110 	.word	0x0800b110
 8009914:	0800b0d0 	.word	0x0800b0d0

08009918 <std>:
 8009918:	2300      	movs	r3, #0
 800991a:	b510      	push	{r4, lr}
 800991c:	4604      	mov	r4, r0
 800991e:	e9c0 3300 	strd	r3, r3, [r0]
 8009922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009926:	6083      	str	r3, [r0, #8]
 8009928:	8181      	strh	r1, [r0, #12]
 800992a:	6643      	str	r3, [r0, #100]	; 0x64
 800992c:	81c2      	strh	r2, [r0, #14]
 800992e:	6183      	str	r3, [r0, #24]
 8009930:	4619      	mov	r1, r3
 8009932:	2208      	movs	r2, #8
 8009934:	305c      	adds	r0, #92	; 0x5c
 8009936:	f7fe f9cd 	bl	8007cd4 <memset>
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <std+0x38>)
 800993c:	6263      	str	r3, [r4, #36]	; 0x24
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <std+0x3c>)
 8009940:	62a3      	str	r3, [r4, #40]	; 0x28
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <std+0x40>)
 8009944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <std+0x44>)
 8009948:	6224      	str	r4, [r4, #32]
 800994a:	6323      	str	r3, [r4, #48]	; 0x30
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop
 8009950:	0800a941 	.word	0x0800a941
 8009954:	0800a963 	.word	0x0800a963
 8009958:	0800a99b 	.word	0x0800a99b
 800995c:	0800a9bf 	.word	0x0800a9bf

08009960 <_cleanup_r>:
 8009960:	4901      	ldr	r1, [pc, #4]	; (8009968 <_cleanup_r+0x8>)
 8009962:	f000 b8af 	b.w	8009ac4 <_fwalk_reent>
 8009966:	bf00      	nop
 8009968:	080098a1 	.word	0x080098a1

0800996c <__sfmoreglue>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	2268      	movs	r2, #104	; 0x68
 8009970:	1e4d      	subs	r5, r1, #1
 8009972:	4355      	muls	r5, r2
 8009974:	460e      	mov	r6, r1
 8009976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800997a:	f7fe fa1f 	bl	8007dbc <_malloc_r>
 800997e:	4604      	mov	r4, r0
 8009980:	b140      	cbz	r0, 8009994 <__sfmoreglue+0x28>
 8009982:	2100      	movs	r1, #0
 8009984:	e9c0 1600 	strd	r1, r6, [r0]
 8009988:	300c      	adds	r0, #12
 800998a:	60a0      	str	r0, [r4, #8]
 800998c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009990:	f7fe f9a0 	bl	8007cd4 <memset>
 8009994:	4620      	mov	r0, r4
 8009996:	bd70      	pop	{r4, r5, r6, pc}

08009998 <__sfp_lock_acquire>:
 8009998:	4801      	ldr	r0, [pc, #4]	; (80099a0 <__sfp_lock_acquire+0x8>)
 800999a:	f000 b8b8 	b.w	8009b0e <__retarget_lock_acquire_recursive>
 800999e:	bf00      	nop
 80099a0:	200004f5 	.word	0x200004f5

080099a4 <__sfp_lock_release>:
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <__sfp_lock_release+0x8>)
 80099a6:	f000 b8b3 	b.w	8009b10 <__retarget_lock_release_recursive>
 80099aa:	bf00      	nop
 80099ac:	200004f5 	.word	0x200004f5

080099b0 <__sinit_lock_acquire>:
 80099b0:	4801      	ldr	r0, [pc, #4]	; (80099b8 <__sinit_lock_acquire+0x8>)
 80099b2:	f000 b8ac 	b.w	8009b0e <__retarget_lock_acquire_recursive>
 80099b6:	bf00      	nop
 80099b8:	200004f6 	.word	0x200004f6

080099bc <__sinit_lock_release>:
 80099bc:	4801      	ldr	r0, [pc, #4]	; (80099c4 <__sinit_lock_release+0x8>)
 80099be:	f000 b8a7 	b.w	8009b10 <__retarget_lock_release_recursive>
 80099c2:	bf00      	nop
 80099c4:	200004f6 	.word	0x200004f6

080099c8 <__sinit>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	4604      	mov	r4, r0
 80099cc:	f7ff fff0 	bl	80099b0 <__sinit_lock_acquire>
 80099d0:	69a3      	ldr	r3, [r4, #24]
 80099d2:	b11b      	cbz	r3, 80099dc <__sinit+0x14>
 80099d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d8:	f7ff bff0 	b.w	80099bc <__sinit_lock_release>
 80099dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099e0:	6523      	str	r3, [r4, #80]	; 0x50
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <__sinit+0x68>)
 80099e4:	4a13      	ldr	r2, [pc, #76]	; (8009a34 <__sinit+0x6c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	bf04      	itt	eq
 80099ee:	2301      	moveq	r3, #1
 80099f0:	61a3      	streq	r3, [r4, #24]
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 f820 	bl	8009a38 <__sfp>
 80099f8:	6060      	str	r0, [r4, #4]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 f81c 	bl	8009a38 <__sfp>
 8009a00:	60a0      	str	r0, [r4, #8]
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f818 	bl	8009a38 <__sfp>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	60e0      	str	r0, [r4, #12]
 8009a0c:	2104      	movs	r1, #4
 8009a0e:	6860      	ldr	r0, [r4, #4]
 8009a10:	f7ff ff82 	bl	8009918 <std>
 8009a14:	68a0      	ldr	r0, [r4, #8]
 8009a16:	2201      	movs	r2, #1
 8009a18:	2109      	movs	r1, #9
 8009a1a:	f7ff ff7d 	bl	8009918 <std>
 8009a1e:	68e0      	ldr	r0, [r4, #12]
 8009a20:	2202      	movs	r2, #2
 8009a22:	2112      	movs	r1, #18
 8009a24:	f7ff ff78 	bl	8009918 <std>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	61a3      	str	r3, [r4, #24]
 8009a2c:	e7d2      	b.n	80099d4 <__sinit+0xc>
 8009a2e:	bf00      	nop
 8009a30:	0800b008 	.word	0x0800b008
 8009a34:	08009961 	.word	0x08009961

08009a38 <__sfp>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	4607      	mov	r7, r0
 8009a3c:	f7ff ffac 	bl	8009998 <__sfp_lock_acquire>
 8009a40:	4b1e      	ldr	r3, [pc, #120]	; (8009abc <__sfp+0x84>)
 8009a42:	681e      	ldr	r6, [r3, #0]
 8009a44:	69b3      	ldr	r3, [r6, #24]
 8009a46:	b913      	cbnz	r3, 8009a4e <__sfp+0x16>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff ffbd 	bl	80099c8 <__sinit>
 8009a4e:	3648      	adds	r6, #72	; 0x48
 8009a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a54:	3b01      	subs	r3, #1
 8009a56:	d503      	bpl.n	8009a60 <__sfp+0x28>
 8009a58:	6833      	ldr	r3, [r6, #0]
 8009a5a:	b30b      	cbz	r3, 8009aa0 <__sfp+0x68>
 8009a5c:	6836      	ldr	r6, [r6, #0]
 8009a5e:	e7f7      	b.n	8009a50 <__sfp+0x18>
 8009a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a64:	b9d5      	cbnz	r5, 8009a9c <__sfp+0x64>
 8009a66:	4b16      	ldr	r3, [pc, #88]	; (8009ac0 <__sfp+0x88>)
 8009a68:	60e3      	str	r3, [r4, #12]
 8009a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8009a70:	f000 f84c 	bl	8009b0c <__retarget_lock_init_recursive>
 8009a74:	f7ff ff96 	bl	80099a4 <__sfp_lock_release>
 8009a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a80:	6025      	str	r5, [r4, #0]
 8009a82:	61a5      	str	r5, [r4, #24]
 8009a84:	2208      	movs	r2, #8
 8009a86:	4629      	mov	r1, r5
 8009a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a8c:	f7fe f922 	bl	8007cd4 <memset>
 8009a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a98:	4620      	mov	r0, r4
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9c:	3468      	adds	r4, #104	; 0x68
 8009a9e:	e7d9      	b.n	8009a54 <__sfp+0x1c>
 8009aa0:	2104      	movs	r1, #4
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	f7ff ff62 	bl	800996c <__sfmoreglue>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	6030      	str	r0, [r6, #0]
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d1d5      	bne.n	8009a5c <__sfp+0x24>
 8009ab0:	f7ff ff78 	bl	80099a4 <__sfp_lock_release>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	e7ee      	b.n	8009a98 <__sfp+0x60>
 8009aba:	bf00      	nop
 8009abc:	0800b008 	.word	0x0800b008
 8009ac0:	ffff0001 	.word	0xffff0001

08009ac4 <_fwalk_reent>:
 8009ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac8:	4606      	mov	r6, r0
 8009aca:	4688      	mov	r8, r1
 8009acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ad0:	2700      	movs	r7, #0
 8009ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8009ada:	d505      	bpl.n	8009ae8 <_fwalk_reent+0x24>
 8009adc:	6824      	ldr	r4, [r4, #0]
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	d1f7      	bne.n	8009ad2 <_fwalk_reent+0xe>
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae8:	89ab      	ldrh	r3, [r5, #12]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d907      	bls.n	8009afe <_fwalk_reent+0x3a>
 8009aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009af2:	3301      	adds	r3, #1
 8009af4:	d003      	beq.n	8009afe <_fwalk_reent+0x3a>
 8009af6:	4629      	mov	r1, r5
 8009af8:	4630      	mov	r0, r6
 8009afa:	47c0      	blx	r8
 8009afc:	4307      	orrs	r7, r0
 8009afe:	3568      	adds	r5, #104	; 0x68
 8009b00:	e7e9      	b.n	8009ad6 <_fwalk_reent+0x12>
	...

08009b04 <_localeconv_r>:
 8009b04:	4800      	ldr	r0, [pc, #0]	; (8009b08 <_localeconv_r+0x4>)
 8009b06:	4770      	bx	lr
 8009b08:	20000160 	.word	0x20000160

08009b0c <__retarget_lock_init_recursive>:
 8009b0c:	4770      	bx	lr

08009b0e <__retarget_lock_acquire_recursive>:
 8009b0e:	4770      	bx	lr

08009b10 <__retarget_lock_release_recursive>:
 8009b10:	4770      	bx	lr

08009b12 <__swhatbuf_r>:
 8009b12:	b570      	push	{r4, r5, r6, lr}
 8009b14:	460e      	mov	r6, r1
 8009b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1a:	2900      	cmp	r1, #0
 8009b1c:	b096      	sub	sp, #88	; 0x58
 8009b1e:	4614      	mov	r4, r2
 8009b20:	461d      	mov	r5, r3
 8009b22:	da08      	bge.n	8009b36 <__swhatbuf_r+0x24>
 8009b24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	602a      	str	r2, [r5, #0]
 8009b2c:	061a      	lsls	r2, r3, #24
 8009b2e:	d410      	bmi.n	8009b52 <__swhatbuf_r+0x40>
 8009b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b34:	e00e      	b.n	8009b54 <__swhatbuf_r+0x42>
 8009b36:	466a      	mov	r2, sp
 8009b38:	f000 ff98 	bl	800aa6c <_fstat_r>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dbf1      	blt.n	8009b24 <__swhatbuf_r+0x12>
 8009b40:	9a01      	ldr	r2, [sp, #4]
 8009b42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b4a:	425a      	negs	r2, r3
 8009b4c:	415a      	adcs	r2, r3
 8009b4e:	602a      	str	r2, [r5, #0]
 8009b50:	e7ee      	b.n	8009b30 <__swhatbuf_r+0x1e>
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	2000      	movs	r0, #0
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	b016      	add	sp, #88	; 0x58
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}

08009b5c <__smakebuf_r>:
 8009b5c:	898b      	ldrh	r3, [r1, #12]
 8009b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b60:	079d      	lsls	r5, r3, #30
 8009b62:	4606      	mov	r6, r0
 8009b64:	460c      	mov	r4, r1
 8009b66:	d507      	bpl.n	8009b78 <__smakebuf_r+0x1c>
 8009b68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	6123      	str	r3, [r4, #16]
 8009b70:	2301      	movs	r3, #1
 8009b72:	6163      	str	r3, [r4, #20]
 8009b74:	b002      	add	sp, #8
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	ab01      	add	r3, sp, #4
 8009b7a:	466a      	mov	r2, sp
 8009b7c:	f7ff ffc9 	bl	8009b12 <__swhatbuf_r>
 8009b80:	9900      	ldr	r1, [sp, #0]
 8009b82:	4605      	mov	r5, r0
 8009b84:	4630      	mov	r0, r6
 8009b86:	f7fe f919 	bl	8007dbc <_malloc_r>
 8009b8a:	b948      	cbnz	r0, 8009ba0 <__smakebuf_r+0x44>
 8009b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b90:	059a      	lsls	r2, r3, #22
 8009b92:	d4ef      	bmi.n	8009b74 <__smakebuf_r+0x18>
 8009b94:	f023 0303 	bic.w	r3, r3, #3
 8009b98:	f043 0302 	orr.w	r3, r3, #2
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	e7e3      	b.n	8009b68 <__smakebuf_r+0xc>
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <__smakebuf_r+0x7c>)
 8009ba2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	6020      	str	r0, [r4, #0]
 8009ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	9b00      	ldr	r3, [sp, #0]
 8009bb0:	6163      	str	r3, [r4, #20]
 8009bb2:	9b01      	ldr	r3, [sp, #4]
 8009bb4:	6120      	str	r0, [r4, #16]
 8009bb6:	b15b      	cbz	r3, 8009bd0 <__smakebuf_r+0x74>
 8009bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 ff67 	bl	800aa90 <_isatty_r>
 8009bc2:	b128      	cbz	r0, 8009bd0 <__smakebuf_r+0x74>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	89a0      	ldrh	r0, [r4, #12]
 8009bd2:	4305      	orrs	r5, r0
 8009bd4:	81a5      	strh	r5, [r4, #12]
 8009bd6:	e7cd      	b.n	8009b74 <__smakebuf_r+0x18>
 8009bd8:	08009961 	.word	0x08009961

08009bdc <memcpy>:
 8009bdc:	440a      	add	r2, r1
 8009bde:	4291      	cmp	r1, r2
 8009be0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009be4:	d100      	bne.n	8009be8 <memcpy+0xc>
 8009be6:	4770      	bx	lr
 8009be8:	b510      	push	{r4, lr}
 8009bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	d1f9      	bne.n	8009bea <memcpy+0xe>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <__malloc_lock>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__malloc_lock+0x8>)
 8009bfa:	f7ff bf88 	b.w	8009b0e <__retarget_lock_acquire_recursive>
 8009bfe:	bf00      	nop
 8009c00:	200004f4 	.word	0x200004f4

08009c04 <__malloc_unlock>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__malloc_unlock+0x8>)
 8009c06:	f7ff bf83 	b.w	8009b10 <__retarget_lock_release_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	200004f4 	.word	0x200004f4

08009c10 <_Balloc>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c14:	4604      	mov	r4, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	b976      	cbnz	r6, 8009c38 <_Balloc+0x28>
 8009c1a:	2010      	movs	r0, #16
 8009c1c:	f7fe f852 	bl	8007cc4 <malloc>
 8009c20:	4602      	mov	r2, r0
 8009c22:	6260      	str	r0, [r4, #36]	; 0x24
 8009c24:	b920      	cbnz	r0, 8009c30 <_Balloc+0x20>
 8009c26:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <_Balloc+0x78>)
 8009c28:	4818      	ldr	r0, [pc, #96]	; (8009c8c <_Balloc+0x7c>)
 8009c2a:	2166      	movs	r1, #102	; 0x66
 8009c2c:	f000 fede 	bl	800a9ec <__assert_func>
 8009c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c34:	6006      	str	r6, [r0, #0]
 8009c36:	60c6      	str	r6, [r0, #12]
 8009c38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c3a:	68f3      	ldr	r3, [r6, #12]
 8009c3c:	b183      	cbz	r3, 8009c60 <_Balloc+0x50>
 8009c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c46:	b9b8      	cbnz	r0, 8009c78 <_Balloc+0x68>
 8009c48:	2101      	movs	r1, #1
 8009c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c4e:	1d72      	adds	r2, r6, #5
 8009c50:	0092      	lsls	r2, r2, #2
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fb60 	bl	800a318 <_calloc_r>
 8009c58:	b160      	cbz	r0, 8009c74 <_Balloc+0x64>
 8009c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c5e:	e00e      	b.n	8009c7e <_Balloc+0x6e>
 8009c60:	2221      	movs	r2, #33	; 0x21
 8009c62:	2104      	movs	r1, #4
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fb57 	bl	800a318 <_calloc_r>
 8009c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c6c:	60f0      	str	r0, [r6, #12]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e4      	bne.n	8009c3e <_Balloc+0x2e>
 8009c74:	2000      	movs	r0, #0
 8009c76:	bd70      	pop	{r4, r5, r6, pc}
 8009c78:	6802      	ldr	r2, [r0, #0]
 8009c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c84:	e7f7      	b.n	8009c76 <_Balloc+0x66>
 8009c86:	bf00      	nop
 8009c88:	0800b04d 	.word	0x0800b04d
 8009c8c:	0800b130 	.word	0x0800b130

08009c90 <_Bfree>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c94:	4605      	mov	r5, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	b976      	cbnz	r6, 8009cb8 <_Bfree+0x28>
 8009c9a:	2010      	movs	r0, #16
 8009c9c:	f7fe f812 	bl	8007cc4 <malloc>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ca4:	b920      	cbnz	r0, 8009cb0 <_Bfree+0x20>
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <_Bfree+0x3c>)
 8009ca8:	4809      	ldr	r0, [pc, #36]	; (8009cd0 <_Bfree+0x40>)
 8009caa:	218a      	movs	r1, #138	; 0x8a
 8009cac:	f000 fe9e 	bl	800a9ec <__assert_func>
 8009cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cb4:	6006      	str	r6, [r0, #0]
 8009cb6:	60c6      	str	r6, [r0, #12]
 8009cb8:	b13c      	cbz	r4, 8009cca <_Bfree+0x3a>
 8009cba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cbc:	6862      	ldr	r2, [r4, #4]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cc4:	6021      	str	r1, [r4, #0]
 8009cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	0800b04d 	.word	0x0800b04d
 8009cd0:	0800b130 	.word	0x0800b130

08009cd4 <__multadd>:
 8009cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd8:	690d      	ldr	r5, [r1, #16]
 8009cda:	4607      	mov	r7, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	461e      	mov	r6, r3
 8009ce0:	f101 0c14 	add.w	ip, r1, #20
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8009cea:	b299      	uxth	r1, r3
 8009cec:	fb02 6101 	mla	r1, r2, r1, r6
 8009cf0:	0c1e      	lsrs	r6, r3, #16
 8009cf2:	0c0b      	lsrs	r3, r1, #16
 8009cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8009cf8:	b289      	uxth	r1, r1
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d00:	4285      	cmp	r5, r0
 8009d02:	f84c 1b04 	str.w	r1, [ip], #4
 8009d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d0a:	dcec      	bgt.n	8009ce6 <__multadd+0x12>
 8009d0c:	b30e      	cbz	r6, 8009d52 <__multadd+0x7e>
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dc19      	bgt.n	8009d48 <__multadd+0x74>
 8009d14:	6861      	ldr	r1, [r4, #4]
 8009d16:	4638      	mov	r0, r7
 8009d18:	3101      	adds	r1, #1
 8009d1a:	f7ff ff79 	bl	8009c10 <_Balloc>
 8009d1e:	4680      	mov	r8, r0
 8009d20:	b928      	cbnz	r0, 8009d2e <__multadd+0x5a>
 8009d22:	4602      	mov	r2, r0
 8009d24:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <__multadd+0x84>)
 8009d26:	480d      	ldr	r0, [pc, #52]	; (8009d5c <__multadd+0x88>)
 8009d28:	21b5      	movs	r1, #181	; 0xb5
 8009d2a:	f000 fe5f 	bl	800a9ec <__assert_func>
 8009d2e:	6922      	ldr	r2, [r4, #16]
 8009d30:	3202      	adds	r2, #2
 8009d32:	f104 010c 	add.w	r1, r4, #12
 8009d36:	0092      	lsls	r2, r2, #2
 8009d38:	300c      	adds	r0, #12
 8009d3a:	f7ff ff4f 	bl	8009bdc <memcpy>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7ff ffa5 	bl	8009c90 <_Bfree>
 8009d46:	4644      	mov	r4, r8
 8009d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	615e      	str	r6, [r3, #20]
 8009d50:	6125      	str	r5, [r4, #16]
 8009d52:	4620      	mov	r0, r4
 8009d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d58:	0800b0bf 	.word	0x0800b0bf
 8009d5c:	0800b130 	.word	0x0800b130

08009d60 <__hi0bits>:
 8009d60:	0c03      	lsrs	r3, r0, #16
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	b9d3      	cbnz	r3, 8009d9c <__hi0bits+0x3c>
 8009d66:	0400      	lsls	r0, r0, #16
 8009d68:	2310      	movs	r3, #16
 8009d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d6e:	bf04      	itt	eq
 8009d70:	0200      	lsleq	r0, r0, #8
 8009d72:	3308      	addeq	r3, #8
 8009d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d78:	bf04      	itt	eq
 8009d7a:	0100      	lsleq	r0, r0, #4
 8009d7c:	3304      	addeq	r3, #4
 8009d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d82:	bf04      	itt	eq
 8009d84:	0080      	lsleq	r0, r0, #2
 8009d86:	3302      	addeq	r3, #2
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	db05      	blt.n	8009d98 <__hi0bits+0x38>
 8009d8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d90:	f103 0301 	add.w	r3, r3, #1
 8009d94:	bf08      	it	eq
 8009d96:	2320      	moveq	r3, #32
 8009d98:	4618      	mov	r0, r3
 8009d9a:	4770      	bx	lr
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e7e4      	b.n	8009d6a <__hi0bits+0xa>

08009da0 <__lo0bits>:
 8009da0:	6803      	ldr	r3, [r0, #0]
 8009da2:	f013 0207 	ands.w	r2, r3, #7
 8009da6:	4601      	mov	r1, r0
 8009da8:	d00b      	beq.n	8009dc2 <__lo0bits+0x22>
 8009daa:	07da      	lsls	r2, r3, #31
 8009dac:	d423      	bmi.n	8009df6 <__lo0bits+0x56>
 8009dae:	0798      	lsls	r0, r3, #30
 8009db0:	bf49      	itett	mi
 8009db2:	085b      	lsrmi	r3, r3, #1
 8009db4:	089b      	lsrpl	r3, r3, #2
 8009db6:	2001      	movmi	r0, #1
 8009db8:	600b      	strmi	r3, [r1, #0]
 8009dba:	bf5c      	itt	pl
 8009dbc:	600b      	strpl	r3, [r1, #0]
 8009dbe:	2002      	movpl	r0, #2
 8009dc0:	4770      	bx	lr
 8009dc2:	b298      	uxth	r0, r3
 8009dc4:	b9a8      	cbnz	r0, 8009df2 <__lo0bits+0x52>
 8009dc6:	0c1b      	lsrs	r3, r3, #16
 8009dc8:	2010      	movs	r0, #16
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	b90a      	cbnz	r2, 8009dd2 <__lo0bits+0x32>
 8009dce:	3008      	adds	r0, #8
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	071a      	lsls	r2, r3, #28
 8009dd4:	bf04      	itt	eq
 8009dd6:	091b      	lsreq	r3, r3, #4
 8009dd8:	3004      	addeq	r0, #4
 8009dda:	079a      	lsls	r2, r3, #30
 8009ddc:	bf04      	itt	eq
 8009dde:	089b      	lsreq	r3, r3, #2
 8009de0:	3002      	addeq	r0, #2
 8009de2:	07da      	lsls	r2, r3, #31
 8009de4:	d403      	bmi.n	8009dee <__lo0bits+0x4e>
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	f100 0001 	add.w	r0, r0, #1
 8009dec:	d005      	beq.n	8009dfa <__lo0bits+0x5a>
 8009dee:	600b      	str	r3, [r1, #0]
 8009df0:	4770      	bx	lr
 8009df2:	4610      	mov	r0, r2
 8009df4:	e7e9      	b.n	8009dca <__lo0bits+0x2a>
 8009df6:	2000      	movs	r0, #0
 8009df8:	4770      	bx	lr
 8009dfa:	2020      	movs	r0, #32
 8009dfc:	4770      	bx	lr
	...

08009e00 <__i2b>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	460c      	mov	r4, r1
 8009e04:	2101      	movs	r1, #1
 8009e06:	f7ff ff03 	bl	8009c10 <_Balloc>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	b928      	cbnz	r0, 8009e1a <__i2b+0x1a>
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <__i2b+0x24>)
 8009e10:	4805      	ldr	r0, [pc, #20]	; (8009e28 <__i2b+0x28>)
 8009e12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e16:	f000 fde9 	bl	800a9ec <__assert_func>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	6144      	str	r4, [r0, #20]
 8009e1e:	6103      	str	r3, [r0, #16]
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	bf00      	nop
 8009e24:	0800b0bf 	.word	0x0800b0bf
 8009e28:	0800b130 	.word	0x0800b130

08009e2c <__multiply>:
 8009e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	4691      	mov	r9, r2
 8009e32:	690a      	ldr	r2, [r1, #16]
 8009e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	bfb8      	it	lt
 8009e3c:	460b      	movlt	r3, r1
 8009e3e:	460c      	mov	r4, r1
 8009e40:	bfbc      	itt	lt
 8009e42:	464c      	movlt	r4, r9
 8009e44:	4699      	movlt	r9, r3
 8009e46:	6927      	ldr	r7, [r4, #16]
 8009e48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e4c:	68a3      	ldr	r3, [r4, #8]
 8009e4e:	6861      	ldr	r1, [r4, #4]
 8009e50:	eb07 060a 	add.w	r6, r7, sl
 8009e54:	42b3      	cmp	r3, r6
 8009e56:	b085      	sub	sp, #20
 8009e58:	bfb8      	it	lt
 8009e5a:	3101      	addlt	r1, #1
 8009e5c:	f7ff fed8 	bl	8009c10 <_Balloc>
 8009e60:	b930      	cbnz	r0, 8009e70 <__multiply+0x44>
 8009e62:	4602      	mov	r2, r0
 8009e64:	4b44      	ldr	r3, [pc, #272]	; (8009f78 <__multiply+0x14c>)
 8009e66:	4845      	ldr	r0, [pc, #276]	; (8009f7c <__multiply+0x150>)
 8009e68:	f240 115d 	movw	r1, #349	; 0x15d
 8009e6c:	f000 fdbe 	bl	800a9ec <__assert_func>
 8009e70:	f100 0514 	add.w	r5, r0, #20
 8009e74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e78:	462b      	mov	r3, r5
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	4543      	cmp	r3, r8
 8009e7e:	d321      	bcc.n	8009ec4 <__multiply+0x98>
 8009e80:	f104 0314 	add.w	r3, r4, #20
 8009e84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e88:	f109 0314 	add.w	r3, r9, #20
 8009e8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e90:	9202      	str	r2, [sp, #8]
 8009e92:	1b3a      	subs	r2, r7, r4
 8009e94:	3a15      	subs	r2, #21
 8009e96:	f022 0203 	bic.w	r2, r2, #3
 8009e9a:	3204      	adds	r2, #4
 8009e9c:	f104 0115 	add.w	r1, r4, #21
 8009ea0:	428f      	cmp	r7, r1
 8009ea2:	bf38      	it	cc
 8009ea4:	2204      	movcc	r2, #4
 8009ea6:	9201      	str	r2, [sp, #4]
 8009ea8:	9a02      	ldr	r2, [sp, #8]
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d80c      	bhi.n	8009eca <__multiply+0x9e>
 8009eb0:	2e00      	cmp	r6, #0
 8009eb2:	dd03      	ble.n	8009ebc <__multiply+0x90>
 8009eb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d05a      	beq.n	8009f72 <__multiply+0x146>
 8009ebc:	6106      	str	r6, [r0, #16]
 8009ebe:	b005      	add	sp, #20
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	f843 2b04 	str.w	r2, [r3], #4
 8009ec8:	e7d8      	b.n	8009e7c <__multiply+0x50>
 8009eca:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ece:	f1ba 0f00 	cmp.w	sl, #0
 8009ed2:	d024      	beq.n	8009f1e <__multiply+0xf2>
 8009ed4:	f104 0e14 	add.w	lr, r4, #20
 8009ed8:	46a9      	mov	r9, r5
 8009eda:	f04f 0c00 	mov.w	ip, #0
 8009ede:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ee2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ee6:	fa1f fb82 	uxth.w	fp, r2
 8009eea:	b289      	uxth	r1, r1
 8009eec:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ef0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ef8:	4461      	add	r1, ip
 8009efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009efe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f06:	b289      	uxth	r1, r1
 8009f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f0c:	4577      	cmp	r7, lr
 8009f0e:	f849 1b04 	str.w	r1, [r9], #4
 8009f12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f16:	d8e2      	bhi.n	8009ede <__multiply+0xb2>
 8009f18:	9a01      	ldr	r2, [sp, #4]
 8009f1a:	f845 c002 	str.w	ip, [r5, r2]
 8009f1e:	9a03      	ldr	r2, [sp, #12]
 8009f20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f24:	3304      	adds	r3, #4
 8009f26:	f1b9 0f00 	cmp.w	r9, #0
 8009f2a:	d020      	beq.n	8009f6e <__multiply+0x142>
 8009f2c:	6829      	ldr	r1, [r5, #0]
 8009f2e:	f104 0c14 	add.w	ip, r4, #20
 8009f32:	46ae      	mov	lr, r5
 8009f34:	f04f 0a00 	mov.w	sl, #0
 8009f38:	f8bc b000 	ldrh.w	fp, [ip]
 8009f3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f40:	fb09 220b 	mla	r2, r9, fp, r2
 8009f44:	4492      	add	sl, r2
 8009f46:	b289      	uxth	r1, r1
 8009f48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f4c:	f84e 1b04 	str.w	r1, [lr], #4
 8009f50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f54:	f8be 1000 	ldrh.w	r1, [lr]
 8009f58:	0c12      	lsrs	r2, r2, #16
 8009f5a:	fb09 1102 	mla	r1, r9, r2, r1
 8009f5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f62:	4567      	cmp	r7, ip
 8009f64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f68:	d8e6      	bhi.n	8009f38 <__multiply+0x10c>
 8009f6a:	9a01      	ldr	r2, [sp, #4]
 8009f6c:	50a9      	str	r1, [r5, r2]
 8009f6e:	3504      	adds	r5, #4
 8009f70:	e79a      	b.n	8009ea8 <__multiply+0x7c>
 8009f72:	3e01      	subs	r6, #1
 8009f74:	e79c      	b.n	8009eb0 <__multiply+0x84>
 8009f76:	bf00      	nop
 8009f78:	0800b0bf 	.word	0x0800b0bf
 8009f7c:	0800b130 	.word	0x0800b130

08009f80 <__pow5mult>:
 8009f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f84:	4615      	mov	r5, r2
 8009f86:	f012 0203 	ands.w	r2, r2, #3
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	d007      	beq.n	8009fa0 <__pow5mult+0x20>
 8009f90:	4c25      	ldr	r4, [pc, #148]	; (800a028 <__pow5mult+0xa8>)
 8009f92:	3a01      	subs	r2, #1
 8009f94:	2300      	movs	r3, #0
 8009f96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f9a:	f7ff fe9b 	bl	8009cd4 <__multadd>
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	10ad      	asrs	r5, r5, #2
 8009fa2:	d03d      	beq.n	800a020 <__pow5mult+0xa0>
 8009fa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fa6:	b97c      	cbnz	r4, 8009fc8 <__pow5mult+0x48>
 8009fa8:	2010      	movs	r0, #16
 8009faa:	f7fd fe8b 	bl	8007cc4 <malloc>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	6270      	str	r0, [r6, #36]	; 0x24
 8009fb2:	b928      	cbnz	r0, 8009fc0 <__pow5mult+0x40>
 8009fb4:	4b1d      	ldr	r3, [pc, #116]	; (800a02c <__pow5mult+0xac>)
 8009fb6:	481e      	ldr	r0, [pc, #120]	; (800a030 <__pow5mult+0xb0>)
 8009fb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fbc:	f000 fd16 	bl	800a9ec <__assert_func>
 8009fc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fc4:	6004      	str	r4, [r0, #0]
 8009fc6:	60c4      	str	r4, [r0, #12]
 8009fc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fd0:	b94c      	cbnz	r4, 8009fe6 <__pow5mult+0x66>
 8009fd2:	f240 2171 	movw	r1, #625	; 0x271
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7ff ff12 	bl	8009e00 <__i2b>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	f04f 0900 	mov.w	r9, #0
 8009fea:	07eb      	lsls	r3, r5, #31
 8009fec:	d50a      	bpl.n	800a004 <__pow5mult+0x84>
 8009fee:	4639      	mov	r1, r7
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7ff ff1a 	bl	8009e2c <__multiply>
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff fe47 	bl	8009c90 <_Bfree>
 800a002:	4647      	mov	r7, r8
 800a004:	106d      	asrs	r5, r5, #1
 800a006:	d00b      	beq.n	800a020 <__pow5mult+0xa0>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	b938      	cbnz	r0, 800a01c <__pow5mult+0x9c>
 800a00c:	4622      	mov	r2, r4
 800a00e:	4621      	mov	r1, r4
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff ff0b 	bl	8009e2c <__multiply>
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	f8c0 9000 	str.w	r9, [r0]
 800a01c:	4604      	mov	r4, r0
 800a01e:	e7e4      	b.n	8009fea <__pow5mult+0x6a>
 800a020:	4638      	mov	r0, r7
 800a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a026:	bf00      	nop
 800a028:	0800b280 	.word	0x0800b280
 800a02c:	0800b04d 	.word	0x0800b04d
 800a030:	0800b130 	.word	0x0800b130

0800a034 <__lshift>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	460c      	mov	r4, r1
 800a03a:	6849      	ldr	r1, [r1, #4]
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a042:	68a3      	ldr	r3, [r4, #8]
 800a044:	4607      	mov	r7, r0
 800a046:	4691      	mov	r9, r2
 800a048:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a04c:	f108 0601 	add.w	r6, r8, #1
 800a050:	42b3      	cmp	r3, r6
 800a052:	db0b      	blt.n	800a06c <__lshift+0x38>
 800a054:	4638      	mov	r0, r7
 800a056:	f7ff fddb 	bl	8009c10 <_Balloc>
 800a05a:	4605      	mov	r5, r0
 800a05c:	b948      	cbnz	r0, 800a072 <__lshift+0x3e>
 800a05e:	4602      	mov	r2, r0
 800a060:	4b2a      	ldr	r3, [pc, #168]	; (800a10c <__lshift+0xd8>)
 800a062:	482b      	ldr	r0, [pc, #172]	; (800a110 <__lshift+0xdc>)
 800a064:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a068:	f000 fcc0 	bl	800a9ec <__assert_func>
 800a06c:	3101      	adds	r1, #1
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	e7ee      	b.n	800a050 <__lshift+0x1c>
 800a072:	2300      	movs	r3, #0
 800a074:	f100 0114 	add.w	r1, r0, #20
 800a078:	f100 0210 	add.w	r2, r0, #16
 800a07c:	4618      	mov	r0, r3
 800a07e:	4553      	cmp	r3, sl
 800a080:	db37      	blt.n	800a0f2 <__lshift+0xbe>
 800a082:	6920      	ldr	r0, [r4, #16]
 800a084:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a088:	f104 0314 	add.w	r3, r4, #20
 800a08c:	f019 091f 	ands.w	r9, r9, #31
 800a090:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a098:	d02f      	beq.n	800a0fa <__lshift+0xc6>
 800a09a:	f1c9 0e20 	rsb	lr, r9, #32
 800a09e:	468a      	mov	sl, r1
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	fa02 f209 	lsl.w	r2, r2, r9
 800a0aa:	ea42 020c 	orr.w	r2, r2, ip
 800a0ae:	f84a 2b04 	str.w	r2, [sl], #4
 800a0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b6:	4298      	cmp	r0, r3
 800a0b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a0bc:	d8f2      	bhi.n	800a0a4 <__lshift+0x70>
 800a0be:	1b03      	subs	r3, r0, r4
 800a0c0:	3b15      	subs	r3, #21
 800a0c2:	f023 0303 	bic.w	r3, r3, #3
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	f104 0215 	add.w	r2, r4, #21
 800a0cc:	4290      	cmp	r0, r2
 800a0ce:	bf38      	it	cc
 800a0d0:	2304      	movcc	r3, #4
 800a0d2:	f841 c003 	str.w	ip, [r1, r3]
 800a0d6:	f1bc 0f00 	cmp.w	ip, #0
 800a0da:	d001      	beq.n	800a0e0 <__lshift+0xac>
 800a0dc:	f108 0602 	add.w	r6, r8, #2
 800a0e0:	3e01      	subs	r6, #1
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	612e      	str	r6, [r5, #16]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f7ff fdd2 	bl	8009c90 <_Bfree>
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	e7c1      	b.n	800a07e <__lshift+0x4a>
 800a0fa:	3904      	subs	r1, #4
 800a0fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a100:	f841 2f04 	str.w	r2, [r1, #4]!
 800a104:	4298      	cmp	r0, r3
 800a106:	d8f9      	bhi.n	800a0fc <__lshift+0xc8>
 800a108:	e7ea      	b.n	800a0e0 <__lshift+0xac>
 800a10a:	bf00      	nop
 800a10c:	0800b0bf 	.word	0x0800b0bf
 800a110:	0800b130 	.word	0x0800b130

0800a114 <__mcmp>:
 800a114:	b530      	push	{r4, r5, lr}
 800a116:	6902      	ldr	r2, [r0, #16]
 800a118:	690c      	ldr	r4, [r1, #16]
 800a11a:	1b12      	subs	r2, r2, r4
 800a11c:	d10e      	bne.n	800a13c <__mcmp+0x28>
 800a11e:	f100 0314 	add.w	r3, r0, #20
 800a122:	3114      	adds	r1, #20
 800a124:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a128:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a12c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a130:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a134:	42a5      	cmp	r5, r4
 800a136:	d003      	beq.n	800a140 <__mcmp+0x2c>
 800a138:	d305      	bcc.n	800a146 <__mcmp+0x32>
 800a13a:	2201      	movs	r2, #1
 800a13c:	4610      	mov	r0, r2
 800a13e:	bd30      	pop	{r4, r5, pc}
 800a140:	4283      	cmp	r3, r0
 800a142:	d3f3      	bcc.n	800a12c <__mcmp+0x18>
 800a144:	e7fa      	b.n	800a13c <__mcmp+0x28>
 800a146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a14a:	e7f7      	b.n	800a13c <__mcmp+0x28>

0800a14c <__mdiff>:
 800a14c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	460c      	mov	r4, r1
 800a152:	4606      	mov	r6, r0
 800a154:	4611      	mov	r1, r2
 800a156:	4620      	mov	r0, r4
 800a158:	4690      	mov	r8, r2
 800a15a:	f7ff ffdb 	bl	800a114 <__mcmp>
 800a15e:	1e05      	subs	r5, r0, #0
 800a160:	d110      	bne.n	800a184 <__mdiff+0x38>
 800a162:	4629      	mov	r1, r5
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff fd53 	bl	8009c10 <_Balloc>
 800a16a:	b930      	cbnz	r0, 800a17a <__mdiff+0x2e>
 800a16c:	4b3a      	ldr	r3, [pc, #232]	; (800a258 <__mdiff+0x10c>)
 800a16e:	4602      	mov	r2, r0
 800a170:	f240 2132 	movw	r1, #562	; 0x232
 800a174:	4839      	ldr	r0, [pc, #228]	; (800a25c <__mdiff+0x110>)
 800a176:	f000 fc39 	bl	800a9ec <__assert_func>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	bfa4      	itt	ge
 800a186:	4643      	movge	r3, r8
 800a188:	46a0      	movge	r8, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a190:	bfa6      	itte	ge
 800a192:	461c      	movge	r4, r3
 800a194:	2500      	movge	r5, #0
 800a196:	2501      	movlt	r5, #1
 800a198:	f7ff fd3a 	bl	8009c10 <_Balloc>
 800a19c:	b920      	cbnz	r0, 800a1a8 <__mdiff+0x5c>
 800a19e:	4b2e      	ldr	r3, [pc, #184]	; (800a258 <__mdiff+0x10c>)
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a1a6:	e7e5      	b.n	800a174 <__mdiff+0x28>
 800a1a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1ac:	6926      	ldr	r6, [r4, #16]
 800a1ae:	60c5      	str	r5, [r0, #12]
 800a1b0:	f104 0914 	add.w	r9, r4, #20
 800a1b4:	f108 0514 	add.w	r5, r8, #20
 800a1b8:	f100 0e14 	add.w	lr, r0, #20
 800a1bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a1c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1c4:	f108 0210 	add.w	r2, r8, #16
 800a1c8:	46f2      	mov	sl, lr
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1d4:	fa1f f883 	uxth.w	r8, r3
 800a1d8:	fa11 f18b 	uxtah	r1, r1, fp
 800a1dc:	0c1b      	lsrs	r3, r3, #16
 800a1de:	eba1 0808 	sub.w	r8, r1, r8
 800a1e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1ea:	fa1f f888 	uxth.w	r8, r8
 800a1ee:	1419      	asrs	r1, r3, #16
 800a1f0:	454e      	cmp	r6, r9
 800a1f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1f6:	f84a 3b04 	str.w	r3, [sl], #4
 800a1fa:	d8e7      	bhi.n	800a1cc <__mdiff+0x80>
 800a1fc:	1b33      	subs	r3, r6, r4
 800a1fe:	3b15      	subs	r3, #21
 800a200:	f023 0303 	bic.w	r3, r3, #3
 800a204:	3304      	adds	r3, #4
 800a206:	3415      	adds	r4, #21
 800a208:	42a6      	cmp	r6, r4
 800a20a:	bf38      	it	cc
 800a20c:	2304      	movcc	r3, #4
 800a20e:	441d      	add	r5, r3
 800a210:	4473      	add	r3, lr
 800a212:	469e      	mov	lr, r3
 800a214:	462e      	mov	r6, r5
 800a216:	4566      	cmp	r6, ip
 800a218:	d30e      	bcc.n	800a238 <__mdiff+0xec>
 800a21a:	f10c 0203 	add.w	r2, ip, #3
 800a21e:	1b52      	subs	r2, r2, r5
 800a220:	f022 0203 	bic.w	r2, r2, #3
 800a224:	3d03      	subs	r5, #3
 800a226:	45ac      	cmp	ip, r5
 800a228:	bf38      	it	cc
 800a22a:	2200      	movcc	r2, #0
 800a22c:	441a      	add	r2, r3
 800a22e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a232:	b17b      	cbz	r3, 800a254 <__mdiff+0x108>
 800a234:	6107      	str	r7, [r0, #16]
 800a236:	e7a3      	b.n	800a180 <__mdiff+0x34>
 800a238:	f856 8b04 	ldr.w	r8, [r6], #4
 800a23c:	fa11 f288 	uxtah	r2, r1, r8
 800a240:	1414      	asrs	r4, r2, #16
 800a242:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a246:	b292      	uxth	r2, r2
 800a248:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a24c:	f84e 2b04 	str.w	r2, [lr], #4
 800a250:	1421      	asrs	r1, r4, #16
 800a252:	e7e0      	b.n	800a216 <__mdiff+0xca>
 800a254:	3f01      	subs	r7, #1
 800a256:	e7ea      	b.n	800a22e <__mdiff+0xe2>
 800a258:	0800b0bf 	.word	0x0800b0bf
 800a25c:	0800b130 	.word	0x0800b130

0800a260 <__d2b>:
 800a260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a264:	4689      	mov	r9, r1
 800a266:	2101      	movs	r1, #1
 800a268:	ec57 6b10 	vmov	r6, r7, d0
 800a26c:	4690      	mov	r8, r2
 800a26e:	f7ff fccf 	bl	8009c10 <_Balloc>
 800a272:	4604      	mov	r4, r0
 800a274:	b930      	cbnz	r0, 800a284 <__d2b+0x24>
 800a276:	4602      	mov	r2, r0
 800a278:	4b25      	ldr	r3, [pc, #148]	; (800a310 <__d2b+0xb0>)
 800a27a:	4826      	ldr	r0, [pc, #152]	; (800a314 <__d2b+0xb4>)
 800a27c:	f240 310a 	movw	r1, #778	; 0x30a
 800a280:	f000 fbb4 	bl	800a9ec <__assert_func>
 800a284:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a28c:	bb35      	cbnz	r5, 800a2dc <__d2b+0x7c>
 800a28e:	2e00      	cmp	r6, #0
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	d028      	beq.n	800a2e6 <__d2b+0x86>
 800a294:	4668      	mov	r0, sp
 800a296:	9600      	str	r6, [sp, #0]
 800a298:	f7ff fd82 	bl	8009da0 <__lo0bits>
 800a29c:	9900      	ldr	r1, [sp, #0]
 800a29e:	b300      	cbz	r0, 800a2e2 <__d2b+0x82>
 800a2a0:	9a01      	ldr	r2, [sp, #4]
 800a2a2:	f1c0 0320 	rsb	r3, r0, #32
 800a2a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2aa:	430b      	orrs	r3, r1
 800a2ac:	40c2      	lsrs	r2, r0
 800a2ae:	6163      	str	r3, [r4, #20]
 800a2b0:	9201      	str	r2, [sp, #4]
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	61a3      	str	r3, [r4, #24]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bf14      	ite	ne
 800a2ba:	2202      	movne	r2, #2
 800a2bc:	2201      	moveq	r2, #1
 800a2be:	6122      	str	r2, [r4, #16]
 800a2c0:	b1d5      	cbz	r5, 800a2f8 <__d2b+0x98>
 800a2c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2c6:	4405      	add	r5, r0
 800a2c8:	f8c9 5000 	str.w	r5, [r9]
 800a2cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2d0:	f8c8 0000 	str.w	r0, [r8]
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	b003      	add	sp, #12
 800a2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2e0:	e7d5      	b.n	800a28e <__d2b+0x2e>
 800a2e2:	6161      	str	r1, [r4, #20]
 800a2e4:	e7e5      	b.n	800a2b2 <__d2b+0x52>
 800a2e6:	a801      	add	r0, sp, #4
 800a2e8:	f7ff fd5a 	bl	8009da0 <__lo0bits>
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	6163      	str	r3, [r4, #20]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	6122      	str	r2, [r4, #16]
 800a2f4:	3020      	adds	r0, #32
 800a2f6:	e7e3      	b.n	800a2c0 <__d2b+0x60>
 800a2f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a300:	f8c9 0000 	str.w	r0, [r9]
 800a304:	6918      	ldr	r0, [r3, #16]
 800a306:	f7ff fd2b 	bl	8009d60 <__hi0bits>
 800a30a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a30e:	e7df      	b.n	800a2d0 <__d2b+0x70>
 800a310:	0800b0bf 	.word	0x0800b0bf
 800a314:	0800b130 	.word	0x0800b130

0800a318 <_calloc_r>:
 800a318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a31a:	fba1 2402 	umull	r2, r4, r1, r2
 800a31e:	b94c      	cbnz	r4, 800a334 <_calloc_r+0x1c>
 800a320:	4611      	mov	r1, r2
 800a322:	9201      	str	r2, [sp, #4]
 800a324:	f7fd fd4a 	bl	8007dbc <_malloc_r>
 800a328:	9a01      	ldr	r2, [sp, #4]
 800a32a:	4605      	mov	r5, r0
 800a32c:	b930      	cbnz	r0, 800a33c <_calloc_r+0x24>
 800a32e:	4628      	mov	r0, r5
 800a330:	b003      	add	sp, #12
 800a332:	bd30      	pop	{r4, r5, pc}
 800a334:	220c      	movs	r2, #12
 800a336:	6002      	str	r2, [r0, #0]
 800a338:	2500      	movs	r5, #0
 800a33a:	e7f8      	b.n	800a32e <_calloc_r+0x16>
 800a33c:	4621      	mov	r1, r4
 800a33e:	f7fd fcc9 	bl	8007cd4 <memset>
 800a342:	e7f4      	b.n	800a32e <_calloc_r+0x16>

0800a344 <__ssputs_r>:
 800a344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a348:	688e      	ldr	r6, [r1, #8]
 800a34a:	429e      	cmp	r6, r3
 800a34c:	4682      	mov	sl, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	4690      	mov	r8, r2
 800a352:	461f      	mov	r7, r3
 800a354:	d838      	bhi.n	800a3c8 <__ssputs_r+0x84>
 800a356:	898a      	ldrh	r2, [r1, #12]
 800a358:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a35c:	d032      	beq.n	800a3c4 <__ssputs_r+0x80>
 800a35e:	6825      	ldr	r5, [r4, #0]
 800a360:	6909      	ldr	r1, [r1, #16]
 800a362:	eba5 0901 	sub.w	r9, r5, r1
 800a366:	6965      	ldr	r5, [r4, #20]
 800a368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a36c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a370:	3301      	adds	r3, #1
 800a372:	444b      	add	r3, r9
 800a374:	106d      	asrs	r5, r5, #1
 800a376:	429d      	cmp	r5, r3
 800a378:	bf38      	it	cc
 800a37a:	461d      	movcc	r5, r3
 800a37c:	0553      	lsls	r3, r2, #21
 800a37e:	d531      	bpl.n	800a3e4 <__ssputs_r+0xa0>
 800a380:	4629      	mov	r1, r5
 800a382:	f7fd fd1b 	bl	8007dbc <_malloc_r>
 800a386:	4606      	mov	r6, r0
 800a388:	b950      	cbnz	r0, 800a3a0 <__ssputs_r+0x5c>
 800a38a:	230c      	movs	r3, #12
 800a38c:	f8ca 3000 	str.w	r3, [sl]
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a0:	6921      	ldr	r1, [r4, #16]
 800a3a2:	464a      	mov	r2, r9
 800a3a4:	f7ff fc1a 	bl	8009bdc <memcpy>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	6126      	str	r6, [r4, #16]
 800a3b6:	6165      	str	r5, [r4, #20]
 800a3b8:	444e      	add	r6, r9
 800a3ba:	eba5 0509 	sub.w	r5, r5, r9
 800a3be:	6026      	str	r6, [r4, #0]
 800a3c0:	60a5      	str	r5, [r4, #8]
 800a3c2:	463e      	mov	r6, r7
 800a3c4:	42be      	cmp	r6, r7
 800a3c6:	d900      	bls.n	800a3ca <__ssputs_r+0x86>
 800a3c8:	463e      	mov	r6, r7
 800a3ca:	6820      	ldr	r0, [r4, #0]
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	4641      	mov	r1, r8
 800a3d0:	f000 fb92 	bl	800aaf8 <memmove>
 800a3d4:	68a3      	ldr	r3, [r4, #8]
 800a3d6:	1b9b      	subs	r3, r3, r6
 800a3d8:	60a3      	str	r3, [r4, #8]
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	4433      	add	r3, r6
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	e7db      	b.n	800a39c <__ssputs_r+0x58>
 800a3e4:	462a      	mov	r2, r5
 800a3e6:	f000 fba1 	bl	800ab2c <_realloc_r>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1e1      	bne.n	800a3b4 <__ssputs_r+0x70>
 800a3f0:	6921      	ldr	r1, [r4, #16]
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	f7fd fc76 	bl	8007ce4 <_free_r>
 800a3f8:	e7c7      	b.n	800a38a <__ssputs_r+0x46>
	...

0800a3fc <_svfiprintf_r>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	4698      	mov	r8, r3
 800a402:	898b      	ldrh	r3, [r1, #12]
 800a404:	061b      	lsls	r3, r3, #24
 800a406:	b09d      	sub	sp, #116	; 0x74
 800a408:	4607      	mov	r7, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	4614      	mov	r4, r2
 800a40e:	d50e      	bpl.n	800a42e <_svfiprintf_r+0x32>
 800a410:	690b      	ldr	r3, [r1, #16]
 800a412:	b963      	cbnz	r3, 800a42e <_svfiprintf_r+0x32>
 800a414:	2140      	movs	r1, #64	; 0x40
 800a416:	f7fd fcd1 	bl	8007dbc <_malloc_r>
 800a41a:	6028      	str	r0, [r5, #0]
 800a41c:	6128      	str	r0, [r5, #16]
 800a41e:	b920      	cbnz	r0, 800a42a <_svfiprintf_r+0x2e>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a428:	e0d1      	b.n	800a5ce <_svfiprintf_r+0x1d2>
 800a42a:	2340      	movs	r3, #64	; 0x40
 800a42c:	616b      	str	r3, [r5, #20]
 800a42e:	2300      	movs	r3, #0
 800a430:	9309      	str	r3, [sp, #36]	; 0x24
 800a432:	2320      	movs	r3, #32
 800a434:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a438:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43c:	2330      	movs	r3, #48	; 0x30
 800a43e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5e8 <_svfiprintf_r+0x1ec>
 800a442:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a446:	f04f 0901 	mov.w	r9, #1
 800a44a:	4623      	mov	r3, r4
 800a44c:	469a      	mov	sl, r3
 800a44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a452:	b10a      	cbz	r2, 800a458 <_svfiprintf_r+0x5c>
 800a454:	2a25      	cmp	r2, #37	; 0x25
 800a456:	d1f9      	bne.n	800a44c <_svfiprintf_r+0x50>
 800a458:	ebba 0b04 	subs.w	fp, sl, r4
 800a45c:	d00b      	beq.n	800a476 <_svfiprintf_r+0x7a>
 800a45e:	465b      	mov	r3, fp
 800a460:	4622      	mov	r2, r4
 800a462:	4629      	mov	r1, r5
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff ff6d 	bl	800a344 <__ssputs_r>
 800a46a:	3001      	adds	r0, #1
 800a46c:	f000 80aa 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a472:	445a      	add	r2, fp
 800a474:	9209      	str	r2, [sp, #36]	; 0x24
 800a476:	f89a 3000 	ldrb.w	r3, [sl]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80a2 	beq.w	800a5c4 <_svfiprintf_r+0x1c8>
 800a480:	2300      	movs	r3, #0
 800a482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48a:	f10a 0a01 	add.w	sl, sl, #1
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	9307      	str	r3, [sp, #28]
 800a492:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a496:	931a      	str	r3, [sp, #104]	; 0x68
 800a498:	4654      	mov	r4, sl
 800a49a:	2205      	movs	r2, #5
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	4851      	ldr	r0, [pc, #324]	; (800a5e8 <_svfiprintf_r+0x1ec>)
 800a4a2:	f7f5 fec5 	bl	8000230 <memchr>
 800a4a6:	9a04      	ldr	r2, [sp, #16]
 800a4a8:	b9d8      	cbnz	r0, 800a4e2 <_svfiprintf_r+0xe6>
 800a4aa:	06d0      	lsls	r0, r2, #27
 800a4ac:	bf44      	itt	mi
 800a4ae:	2320      	movmi	r3, #32
 800a4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b4:	0711      	lsls	r1, r2, #28
 800a4b6:	bf44      	itt	mi
 800a4b8:	232b      	movmi	r3, #43	; 0x2b
 800a4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c4:	d015      	beq.n	800a4f2 <_svfiprintf_r+0xf6>
 800a4c6:	9a07      	ldr	r2, [sp, #28]
 800a4c8:	4654      	mov	r4, sl
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f04f 0c0a 	mov.w	ip, #10
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d6:	3b30      	subs	r3, #48	; 0x30
 800a4d8:	2b09      	cmp	r3, #9
 800a4da:	d94e      	bls.n	800a57a <_svfiprintf_r+0x17e>
 800a4dc:	b1b0      	cbz	r0, 800a50c <_svfiprintf_r+0x110>
 800a4de:	9207      	str	r2, [sp, #28]
 800a4e0:	e014      	b.n	800a50c <_svfiprintf_r+0x110>
 800a4e2:	eba0 0308 	sub.w	r3, r0, r8
 800a4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	46a2      	mov	sl, r4
 800a4f0:	e7d2      	b.n	800a498 <_svfiprintf_r+0x9c>
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	1d19      	adds	r1, r3, #4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	9103      	str	r1, [sp, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bfbb      	ittet	lt
 800a4fe:	425b      	neglt	r3, r3
 800a500:	f042 0202 	orrlt.w	r2, r2, #2
 800a504:	9307      	strge	r3, [sp, #28]
 800a506:	9307      	strlt	r3, [sp, #28]
 800a508:	bfb8      	it	lt
 800a50a:	9204      	strlt	r2, [sp, #16]
 800a50c:	7823      	ldrb	r3, [r4, #0]
 800a50e:	2b2e      	cmp	r3, #46	; 0x2e
 800a510:	d10c      	bne.n	800a52c <_svfiprintf_r+0x130>
 800a512:	7863      	ldrb	r3, [r4, #1]
 800a514:	2b2a      	cmp	r3, #42	; 0x2a
 800a516:	d135      	bne.n	800a584 <_svfiprintf_r+0x188>
 800a518:	9b03      	ldr	r3, [sp, #12]
 800a51a:	1d1a      	adds	r2, r3, #4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	9203      	str	r2, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	bfb8      	it	lt
 800a524:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a528:	3402      	adds	r4, #2
 800a52a:	9305      	str	r3, [sp, #20]
 800a52c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5f8 <_svfiprintf_r+0x1fc>
 800a530:	7821      	ldrb	r1, [r4, #0]
 800a532:	2203      	movs	r2, #3
 800a534:	4650      	mov	r0, sl
 800a536:	f7f5 fe7b 	bl	8000230 <memchr>
 800a53a:	b140      	cbz	r0, 800a54e <_svfiprintf_r+0x152>
 800a53c:	2340      	movs	r3, #64	; 0x40
 800a53e:	eba0 000a 	sub.w	r0, r0, sl
 800a542:	fa03 f000 	lsl.w	r0, r3, r0
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	4303      	orrs	r3, r0
 800a54a:	3401      	adds	r4, #1
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	4826      	ldr	r0, [pc, #152]	; (800a5ec <_svfiprintf_r+0x1f0>)
 800a554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a558:	2206      	movs	r2, #6
 800a55a:	f7f5 fe69 	bl	8000230 <memchr>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d038      	beq.n	800a5d4 <_svfiprintf_r+0x1d8>
 800a562:	4b23      	ldr	r3, [pc, #140]	; (800a5f0 <_svfiprintf_r+0x1f4>)
 800a564:	bb1b      	cbnz	r3, 800a5ae <_svfiprintf_r+0x1b2>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	3308      	adds	r3, #8
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a574:	4433      	add	r3, r6
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	e767      	b.n	800a44a <_svfiprintf_r+0x4e>
 800a57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	2001      	movs	r0, #1
 800a582:	e7a5      	b.n	800a4d0 <_svfiprintf_r+0xd4>
 800a584:	2300      	movs	r3, #0
 800a586:	3401      	adds	r4, #1
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	4619      	mov	r1, r3
 800a58c:	f04f 0c0a 	mov.w	ip, #10
 800a590:	4620      	mov	r0, r4
 800a592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a596:	3a30      	subs	r2, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d903      	bls.n	800a5a4 <_svfiprintf_r+0x1a8>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0c5      	beq.n	800a52c <_svfiprintf_r+0x130>
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	e7c3      	b.n	800a52c <_svfiprintf_r+0x130>
 800a5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e7f0      	b.n	800a590 <_svfiprintf_r+0x194>
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4b0f      	ldr	r3, [pc, #60]	; (800a5f4 <_svfiprintf_r+0x1f8>)
 800a5b6:	a904      	add	r1, sp, #16
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7fd fd13 	bl	8007fe4 <_printf_float>
 800a5be:	1c42      	adds	r2, r0, #1
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	d1d6      	bne.n	800a572 <_svfiprintf_r+0x176>
 800a5c4:	89ab      	ldrh	r3, [r5, #12]
 800a5c6:	065b      	lsls	r3, r3, #25
 800a5c8:	f53f af2c 	bmi.w	800a424 <_svfiprintf_r+0x28>
 800a5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ce:	b01d      	add	sp, #116	; 0x74
 800a5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <_svfiprintf_r+0x1f8>)
 800a5dc:	a904      	add	r1, sp, #16
 800a5de:	4638      	mov	r0, r7
 800a5e0:	f7fd ffa4 	bl	800852c <_printf_i>
 800a5e4:	e7eb      	b.n	800a5be <_svfiprintf_r+0x1c2>
 800a5e6:	bf00      	nop
 800a5e8:	0800b28c 	.word	0x0800b28c
 800a5ec:	0800b296 	.word	0x0800b296
 800a5f0:	08007fe5 	.word	0x08007fe5
 800a5f4:	0800a345 	.word	0x0800a345
 800a5f8:	0800b292 	.word	0x0800b292

0800a5fc <__sfputc_r>:
 800a5fc:	6893      	ldr	r3, [r2, #8]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	b410      	push	{r4}
 800a604:	6093      	str	r3, [r2, #8]
 800a606:	da08      	bge.n	800a61a <__sfputc_r+0x1e>
 800a608:	6994      	ldr	r4, [r2, #24]
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	db01      	blt.n	800a612 <__sfputc_r+0x16>
 800a60e:	290a      	cmp	r1, #10
 800a610:	d103      	bne.n	800a61a <__sfputc_r+0x1e>
 800a612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a616:	f7fe b983 	b.w	8008920 <__swbuf_r>
 800a61a:	6813      	ldr	r3, [r2, #0]
 800a61c:	1c58      	adds	r0, r3, #1
 800a61e:	6010      	str	r0, [r2, #0]
 800a620:	7019      	strb	r1, [r3, #0]
 800a622:	4608      	mov	r0, r1
 800a624:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <__sfputs_r>:
 800a62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62c:	4606      	mov	r6, r0
 800a62e:	460f      	mov	r7, r1
 800a630:	4614      	mov	r4, r2
 800a632:	18d5      	adds	r5, r2, r3
 800a634:	42ac      	cmp	r4, r5
 800a636:	d101      	bne.n	800a63c <__sfputs_r+0x12>
 800a638:	2000      	movs	r0, #0
 800a63a:	e007      	b.n	800a64c <__sfputs_r+0x22>
 800a63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a640:	463a      	mov	r2, r7
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff ffda 	bl	800a5fc <__sfputc_r>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d1f3      	bne.n	800a634 <__sfputs_r+0xa>
 800a64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a650 <_vfiprintf_r>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	460d      	mov	r5, r1
 800a656:	b09d      	sub	sp, #116	; 0x74
 800a658:	4614      	mov	r4, r2
 800a65a:	4698      	mov	r8, r3
 800a65c:	4606      	mov	r6, r0
 800a65e:	b118      	cbz	r0, 800a668 <_vfiprintf_r+0x18>
 800a660:	6983      	ldr	r3, [r0, #24]
 800a662:	b90b      	cbnz	r3, 800a668 <_vfiprintf_r+0x18>
 800a664:	f7ff f9b0 	bl	80099c8 <__sinit>
 800a668:	4b89      	ldr	r3, [pc, #548]	; (800a890 <_vfiprintf_r+0x240>)
 800a66a:	429d      	cmp	r5, r3
 800a66c:	d11b      	bne.n	800a6a6 <_vfiprintf_r+0x56>
 800a66e:	6875      	ldr	r5, [r6, #4]
 800a670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a672:	07d9      	lsls	r1, r3, #31
 800a674:	d405      	bmi.n	800a682 <_vfiprintf_r+0x32>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d402      	bmi.n	800a682 <_vfiprintf_r+0x32>
 800a67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a67e:	f7ff fa46 	bl	8009b0e <__retarget_lock_acquire_recursive>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	071b      	lsls	r3, r3, #28
 800a686:	d501      	bpl.n	800a68c <_vfiprintf_r+0x3c>
 800a688:	692b      	ldr	r3, [r5, #16]
 800a68a:	b9eb      	cbnz	r3, 800a6c8 <_vfiprintf_r+0x78>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4630      	mov	r0, r6
 800a690:	f7fe f998 	bl	80089c4 <__swsetup_r>
 800a694:	b1c0      	cbz	r0, 800a6c8 <_vfiprintf_r+0x78>
 800a696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a698:	07dc      	lsls	r4, r3, #31
 800a69a:	d50e      	bpl.n	800a6ba <_vfiprintf_r+0x6a>
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a0:	b01d      	add	sp, #116	; 0x74
 800a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a6:	4b7b      	ldr	r3, [pc, #492]	; (800a894 <_vfiprintf_r+0x244>)
 800a6a8:	429d      	cmp	r5, r3
 800a6aa:	d101      	bne.n	800a6b0 <_vfiprintf_r+0x60>
 800a6ac:	68b5      	ldr	r5, [r6, #8]
 800a6ae:	e7df      	b.n	800a670 <_vfiprintf_r+0x20>
 800a6b0:	4b79      	ldr	r3, [pc, #484]	; (800a898 <_vfiprintf_r+0x248>)
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	bf08      	it	eq
 800a6b6:	68f5      	ldreq	r5, [r6, #12]
 800a6b8:	e7da      	b.n	800a670 <_vfiprintf_r+0x20>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	0598      	lsls	r0, r3, #22
 800a6be:	d4ed      	bmi.n	800a69c <_vfiprintf_r+0x4c>
 800a6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c2:	f7ff fa25 	bl	8009b10 <__retarget_lock_release_recursive>
 800a6c6:	e7e9      	b.n	800a69c <_vfiprintf_r+0x4c>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d6:	2330      	movs	r3, #48	; 0x30
 800a6d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a89c <_vfiprintf_r+0x24c>
 800a6dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6e0:	f04f 0901 	mov.w	r9, #1
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	469a      	mov	sl, r3
 800a6e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ec:	b10a      	cbz	r2, 800a6f2 <_vfiprintf_r+0xa2>
 800a6ee:	2a25      	cmp	r2, #37	; 0x25
 800a6f0:	d1f9      	bne.n	800a6e6 <_vfiprintf_r+0x96>
 800a6f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f6:	d00b      	beq.n	800a710 <_vfiprintf_r+0xc0>
 800a6f8:	465b      	mov	r3, fp
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7ff ff93 	bl	800a62a <__sfputs_r>
 800a704:	3001      	adds	r0, #1
 800a706:	f000 80aa 	beq.w	800a85e <_vfiprintf_r+0x20e>
 800a70a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70c:	445a      	add	r2, fp
 800a70e:	9209      	str	r2, [sp, #36]	; 0x24
 800a710:	f89a 3000 	ldrb.w	r3, [sl]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80a2 	beq.w	800a85e <_vfiprintf_r+0x20e>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a724:	f10a 0a01 	add.w	sl, sl, #1
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a730:	931a      	str	r3, [sp, #104]	; 0x68
 800a732:	4654      	mov	r4, sl
 800a734:	2205      	movs	r2, #5
 800a736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a73a:	4858      	ldr	r0, [pc, #352]	; (800a89c <_vfiprintf_r+0x24c>)
 800a73c:	f7f5 fd78 	bl	8000230 <memchr>
 800a740:	9a04      	ldr	r2, [sp, #16]
 800a742:	b9d8      	cbnz	r0, 800a77c <_vfiprintf_r+0x12c>
 800a744:	06d1      	lsls	r1, r2, #27
 800a746:	bf44      	itt	mi
 800a748:	2320      	movmi	r3, #32
 800a74a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74e:	0713      	lsls	r3, r2, #28
 800a750:	bf44      	itt	mi
 800a752:	232b      	movmi	r3, #43	; 0x2b
 800a754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b2a      	cmp	r3, #42	; 0x2a
 800a75e:	d015      	beq.n	800a78c <_vfiprintf_r+0x13c>
 800a760:	9a07      	ldr	r2, [sp, #28]
 800a762:	4654      	mov	r4, sl
 800a764:	2000      	movs	r0, #0
 800a766:	f04f 0c0a 	mov.w	ip, #10
 800a76a:	4621      	mov	r1, r4
 800a76c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a770:	3b30      	subs	r3, #48	; 0x30
 800a772:	2b09      	cmp	r3, #9
 800a774:	d94e      	bls.n	800a814 <_vfiprintf_r+0x1c4>
 800a776:	b1b0      	cbz	r0, 800a7a6 <_vfiprintf_r+0x156>
 800a778:	9207      	str	r2, [sp, #28]
 800a77a:	e014      	b.n	800a7a6 <_vfiprintf_r+0x156>
 800a77c:	eba0 0308 	sub.w	r3, r0, r8
 800a780:	fa09 f303 	lsl.w	r3, r9, r3
 800a784:	4313      	orrs	r3, r2
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	46a2      	mov	sl, r4
 800a78a:	e7d2      	b.n	800a732 <_vfiprintf_r+0xe2>
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	1d19      	adds	r1, r3, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	9103      	str	r1, [sp, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfbb      	ittet	lt
 800a798:	425b      	neglt	r3, r3
 800a79a:	f042 0202 	orrlt.w	r2, r2, #2
 800a79e:	9307      	strge	r3, [sp, #28]
 800a7a0:	9307      	strlt	r3, [sp, #28]
 800a7a2:	bfb8      	it	lt
 800a7a4:	9204      	strlt	r2, [sp, #16]
 800a7a6:	7823      	ldrb	r3, [r4, #0]
 800a7a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7aa:	d10c      	bne.n	800a7c6 <_vfiprintf_r+0x176>
 800a7ac:	7863      	ldrb	r3, [r4, #1]
 800a7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b0:	d135      	bne.n	800a81e <_vfiprintf_r+0x1ce>
 800a7b2:	9b03      	ldr	r3, [sp, #12]
 800a7b4:	1d1a      	adds	r2, r3, #4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	9203      	str	r2, [sp, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bfb8      	it	lt
 800a7be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7c2:	3402      	adds	r4, #2
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8ac <_vfiprintf_r+0x25c>
 800a7ca:	7821      	ldrb	r1, [r4, #0]
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	f7f5 fd2e 	bl	8000230 <memchr>
 800a7d4:	b140      	cbz	r0, 800a7e8 <_vfiprintf_r+0x198>
 800a7d6:	2340      	movs	r3, #64	; 0x40
 800a7d8:	eba0 000a 	sub.w	r0, r0, sl
 800a7dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	4303      	orrs	r3, r0
 800a7e4:	3401      	adds	r4, #1
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ec:	482c      	ldr	r0, [pc, #176]	; (800a8a0 <_vfiprintf_r+0x250>)
 800a7ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7f2:	2206      	movs	r2, #6
 800a7f4:	f7f5 fd1c 	bl	8000230 <memchr>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d03f      	beq.n	800a87c <_vfiprintf_r+0x22c>
 800a7fc:	4b29      	ldr	r3, [pc, #164]	; (800a8a4 <_vfiprintf_r+0x254>)
 800a7fe:	bb1b      	cbnz	r3, 800a848 <_vfiprintf_r+0x1f8>
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	3307      	adds	r3, #7
 800a804:	f023 0307 	bic.w	r3, r3, #7
 800a808:	3308      	adds	r3, #8
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80e:	443b      	add	r3, r7
 800a810:	9309      	str	r3, [sp, #36]	; 0x24
 800a812:	e767      	b.n	800a6e4 <_vfiprintf_r+0x94>
 800a814:	fb0c 3202 	mla	r2, ip, r2, r3
 800a818:	460c      	mov	r4, r1
 800a81a:	2001      	movs	r0, #1
 800a81c:	e7a5      	b.n	800a76a <_vfiprintf_r+0x11a>
 800a81e:	2300      	movs	r3, #0
 800a820:	3401      	adds	r4, #1
 800a822:	9305      	str	r3, [sp, #20]
 800a824:	4619      	mov	r1, r3
 800a826:	f04f 0c0a 	mov.w	ip, #10
 800a82a:	4620      	mov	r0, r4
 800a82c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a830:	3a30      	subs	r2, #48	; 0x30
 800a832:	2a09      	cmp	r2, #9
 800a834:	d903      	bls.n	800a83e <_vfiprintf_r+0x1ee>
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0c5      	beq.n	800a7c6 <_vfiprintf_r+0x176>
 800a83a:	9105      	str	r1, [sp, #20]
 800a83c:	e7c3      	b.n	800a7c6 <_vfiprintf_r+0x176>
 800a83e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a842:	4604      	mov	r4, r0
 800a844:	2301      	movs	r3, #1
 800a846:	e7f0      	b.n	800a82a <_vfiprintf_r+0x1da>
 800a848:	ab03      	add	r3, sp, #12
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	462a      	mov	r2, r5
 800a84e:	4b16      	ldr	r3, [pc, #88]	; (800a8a8 <_vfiprintf_r+0x258>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	4630      	mov	r0, r6
 800a854:	f7fd fbc6 	bl	8007fe4 <_printf_float>
 800a858:	4607      	mov	r7, r0
 800a85a:	1c78      	adds	r0, r7, #1
 800a85c:	d1d6      	bne.n	800a80c <_vfiprintf_r+0x1bc>
 800a85e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a860:	07d9      	lsls	r1, r3, #31
 800a862:	d405      	bmi.n	800a870 <_vfiprintf_r+0x220>
 800a864:	89ab      	ldrh	r3, [r5, #12]
 800a866:	059a      	lsls	r2, r3, #22
 800a868:	d402      	bmi.n	800a870 <_vfiprintf_r+0x220>
 800a86a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a86c:	f7ff f950 	bl	8009b10 <__retarget_lock_release_recursive>
 800a870:	89ab      	ldrh	r3, [r5, #12]
 800a872:	065b      	lsls	r3, r3, #25
 800a874:	f53f af12 	bmi.w	800a69c <_vfiprintf_r+0x4c>
 800a878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a87a:	e711      	b.n	800a6a0 <_vfiprintf_r+0x50>
 800a87c:	ab03      	add	r3, sp, #12
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	462a      	mov	r2, r5
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_vfiprintf_r+0x258>)
 800a884:	a904      	add	r1, sp, #16
 800a886:	4630      	mov	r0, r6
 800a888:	f7fd fe50 	bl	800852c <_printf_i>
 800a88c:	e7e4      	b.n	800a858 <_vfiprintf_r+0x208>
 800a88e:	bf00      	nop
 800a890:	0800b0f0 	.word	0x0800b0f0
 800a894:	0800b110 	.word	0x0800b110
 800a898:	0800b0d0 	.word	0x0800b0d0
 800a89c:	0800b28c 	.word	0x0800b28c
 800a8a0:	0800b296 	.word	0x0800b296
 800a8a4:	08007fe5 	.word	0x08007fe5
 800a8a8:	0800a62b 	.word	0x0800a62b
 800a8ac:	0800b292 	.word	0x0800b292

0800a8b0 <_putc_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	b118      	cbz	r0, 800a8c2 <_putc_r+0x12>
 800a8ba:	6983      	ldr	r3, [r0, #24]
 800a8bc:	b90b      	cbnz	r3, 800a8c2 <_putc_r+0x12>
 800a8be:	f7ff f883 	bl	80099c8 <__sinit>
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <_putc_r+0x84>)
 800a8c4:	429c      	cmp	r4, r3
 800a8c6:	d124      	bne.n	800a912 <_putc_r+0x62>
 800a8c8:	6874      	ldr	r4, [r6, #4]
 800a8ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8cc:	07d8      	lsls	r0, r3, #31
 800a8ce:	d405      	bmi.n	800a8dc <_putc_r+0x2c>
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	0599      	lsls	r1, r3, #22
 800a8d4:	d402      	bmi.n	800a8dc <_putc_r+0x2c>
 800a8d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d8:	f7ff f919 	bl	8009b0e <__retarget_lock_acquire_recursive>
 800a8dc:	68a3      	ldr	r3, [r4, #8]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	60a3      	str	r3, [r4, #8]
 800a8e4:	da05      	bge.n	800a8f2 <_putc_r+0x42>
 800a8e6:	69a2      	ldr	r2, [r4, #24]
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	db1c      	blt.n	800a926 <_putc_r+0x76>
 800a8ec:	b2eb      	uxtb	r3, r5
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	d019      	beq.n	800a926 <_putc_r+0x76>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	6022      	str	r2, [r4, #0]
 800a8f8:	701d      	strb	r5, [r3, #0]
 800a8fa:	b2ed      	uxtb	r5, r5
 800a8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8fe:	07da      	lsls	r2, r3, #31
 800a900:	d405      	bmi.n	800a90e <_putc_r+0x5e>
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	059b      	lsls	r3, r3, #22
 800a906:	d402      	bmi.n	800a90e <_putc_r+0x5e>
 800a908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90a:	f7ff f901 	bl	8009b10 <__retarget_lock_release_recursive>
 800a90e:	4628      	mov	r0, r5
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <_putc_r+0x88>)
 800a914:	429c      	cmp	r4, r3
 800a916:	d101      	bne.n	800a91c <_putc_r+0x6c>
 800a918:	68b4      	ldr	r4, [r6, #8]
 800a91a:	e7d6      	b.n	800a8ca <_putc_r+0x1a>
 800a91c:	4b07      	ldr	r3, [pc, #28]	; (800a93c <_putc_r+0x8c>)
 800a91e:	429c      	cmp	r4, r3
 800a920:	bf08      	it	eq
 800a922:	68f4      	ldreq	r4, [r6, #12]
 800a924:	e7d1      	b.n	800a8ca <_putc_r+0x1a>
 800a926:	4629      	mov	r1, r5
 800a928:	4622      	mov	r2, r4
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7fd fff8 	bl	8008920 <__swbuf_r>
 800a930:	4605      	mov	r5, r0
 800a932:	e7e3      	b.n	800a8fc <_putc_r+0x4c>
 800a934:	0800b0f0 	.word	0x0800b0f0
 800a938:	0800b110 	.word	0x0800b110
 800a93c:	0800b0d0 	.word	0x0800b0d0

0800a940 <__sread>:
 800a940:	b510      	push	{r4, lr}
 800a942:	460c      	mov	r4, r1
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	f000 f920 	bl	800ab8c <_read_r>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	bfab      	itete	ge
 800a950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a952:	89a3      	ldrhlt	r3, [r4, #12]
 800a954:	181b      	addge	r3, r3, r0
 800a956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a95a:	bfac      	ite	ge
 800a95c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a95e:	81a3      	strhlt	r3, [r4, #12]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__swrite>:
 800a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	461f      	mov	r7, r3
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	05db      	lsls	r3, r3, #23
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4616      	mov	r6, r2
 800a972:	d505      	bpl.n	800a980 <__swrite+0x1e>
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	2302      	movs	r3, #2
 800a97a:	2200      	movs	r2, #0
 800a97c:	f000 f898 	bl	800aab0 <_lseek_r>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	4632      	mov	r2, r6
 800a98e:	463b      	mov	r3, r7
 800a990:	4628      	mov	r0, r5
 800a992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	f000 b817 	b.w	800a9c8 <_write_r>

0800a99a <__sseek>:
 800a99a:	b510      	push	{r4, lr}
 800a99c:	460c      	mov	r4, r1
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	f000 f885 	bl	800aab0 <_lseek_r>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	bf15      	itete	ne
 800a9ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9b6:	81a3      	strheq	r3, [r4, #12]
 800a9b8:	bf18      	it	ne
 800a9ba:	81a3      	strhne	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__sclose>:
 800a9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c2:	f000 b831 	b.w	800aa28 <_close_r>
	...

0800a9c8 <_write_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	; (800a9e8 <_write_r+0x20>)
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f7f6 ffe4 	bl	80019a4 <_write>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_write_r+0x1e>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_write_r+0x1e>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	200004f8 	.word	0x200004f8

0800a9ec <__assert_func>:
 800a9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9ee:	4614      	mov	r4, r2
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <__assert_func+0x2c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	68d8      	ldr	r0, [r3, #12]
 800a9fa:	b14c      	cbz	r4, 800aa10 <__assert_func+0x24>
 800a9fc:	4b07      	ldr	r3, [pc, #28]	; (800aa1c <__assert_func+0x30>)
 800a9fe:	9100      	str	r1, [sp, #0]
 800aa00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa04:	4906      	ldr	r1, [pc, #24]	; (800aa20 <__assert_func+0x34>)
 800aa06:	462b      	mov	r3, r5
 800aa08:	f000 f81e 	bl	800aa48 <fiprintf>
 800aa0c:	f000 f8dd 	bl	800abca <abort>
 800aa10:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <__assert_func+0x38>)
 800aa12:	461c      	mov	r4, r3
 800aa14:	e7f3      	b.n	800a9fe <__assert_func+0x12>
 800aa16:	bf00      	nop
 800aa18:	2000000c 	.word	0x2000000c
 800aa1c:	0800b29d 	.word	0x0800b29d
 800aa20:	0800b2aa 	.word	0x0800b2aa
 800aa24:	0800b2d8 	.word	0x0800b2d8

0800aa28 <_close_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d06      	ldr	r5, [pc, #24]	; (800aa44 <_close_r+0x1c>)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	602b      	str	r3, [r5, #0]
 800aa34:	f7f7 feb7 	bl	80027a6 <_close>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_close_r+0x1a>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_close_r+0x1a>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	200004f8 	.word	0x200004f8

0800aa48 <fiprintf>:
 800aa48:	b40e      	push	{r1, r2, r3}
 800aa4a:	b503      	push	{r0, r1, lr}
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	ab03      	add	r3, sp, #12
 800aa50:	4805      	ldr	r0, [pc, #20]	; (800aa68 <fiprintf+0x20>)
 800aa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa56:	6800      	ldr	r0, [r0, #0]
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	f7ff fdf9 	bl	800a650 <_vfiprintf_r>
 800aa5e:	b002      	add	sp, #8
 800aa60:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa64:	b003      	add	sp, #12
 800aa66:	4770      	bx	lr
 800aa68:	2000000c 	.word	0x2000000c

0800aa6c <_fstat_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4d07      	ldr	r5, [pc, #28]	; (800aa8c <_fstat_r+0x20>)
 800aa70:	2300      	movs	r3, #0
 800aa72:	4604      	mov	r4, r0
 800aa74:	4608      	mov	r0, r1
 800aa76:	4611      	mov	r1, r2
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	f7f7 fea0 	bl	80027be <_fstat>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d102      	bne.n	800aa88 <_fstat_r+0x1c>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	b103      	cbz	r3, 800aa88 <_fstat_r+0x1c>
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	bd38      	pop	{r3, r4, r5, pc}
 800aa8a:	bf00      	nop
 800aa8c:	200004f8 	.word	0x200004f8

0800aa90 <_isatty_r>:
 800aa90:	b538      	push	{r3, r4, r5, lr}
 800aa92:	4d06      	ldr	r5, [pc, #24]	; (800aaac <_isatty_r+0x1c>)
 800aa94:	2300      	movs	r3, #0
 800aa96:	4604      	mov	r4, r0
 800aa98:	4608      	mov	r0, r1
 800aa9a:	602b      	str	r3, [r5, #0]
 800aa9c:	f7f7 fe9f 	bl	80027de <_isatty>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_isatty_r+0x1a>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_isatty_r+0x1a>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	200004f8 	.word	0x200004f8

0800aab0 <_lseek_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	; (800aad0 <_lseek_r+0x20>)
 800aab4:	4604      	mov	r4, r0
 800aab6:	4608      	mov	r0, r1
 800aab8:	4611      	mov	r1, r2
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	f7f7 fe98 	bl	80027f4 <_lseek>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_lseek_r+0x1e>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_lseek_r+0x1e>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	200004f8 	.word	0x200004f8

0800aad4 <__ascii_mbtowc>:
 800aad4:	b082      	sub	sp, #8
 800aad6:	b901      	cbnz	r1, 800aada <__ascii_mbtowc+0x6>
 800aad8:	a901      	add	r1, sp, #4
 800aada:	b142      	cbz	r2, 800aaee <__ascii_mbtowc+0x1a>
 800aadc:	b14b      	cbz	r3, 800aaf2 <__ascii_mbtowc+0x1e>
 800aade:	7813      	ldrb	r3, [r2, #0]
 800aae0:	600b      	str	r3, [r1, #0]
 800aae2:	7812      	ldrb	r2, [r2, #0]
 800aae4:	1e10      	subs	r0, r2, #0
 800aae6:	bf18      	it	ne
 800aae8:	2001      	movne	r0, #1
 800aaea:	b002      	add	sp, #8
 800aaec:	4770      	bx	lr
 800aaee:	4610      	mov	r0, r2
 800aaf0:	e7fb      	b.n	800aaea <__ascii_mbtowc+0x16>
 800aaf2:	f06f 0001 	mvn.w	r0, #1
 800aaf6:	e7f8      	b.n	800aaea <__ascii_mbtowc+0x16>

0800aaf8 <memmove>:
 800aaf8:	4288      	cmp	r0, r1
 800aafa:	b510      	push	{r4, lr}
 800aafc:	eb01 0402 	add.w	r4, r1, r2
 800ab00:	d902      	bls.n	800ab08 <memmove+0x10>
 800ab02:	4284      	cmp	r4, r0
 800ab04:	4623      	mov	r3, r4
 800ab06:	d807      	bhi.n	800ab18 <memmove+0x20>
 800ab08:	1e43      	subs	r3, r0, #1
 800ab0a:	42a1      	cmp	r1, r4
 800ab0c:	d008      	beq.n	800ab20 <memmove+0x28>
 800ab0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab16:	e7f8      	b.n	800ab0a <memmove+0x12>
 800ab18:	4402      	add	r2, r0
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	428a      	cmp	r2, r1
 800ab1e:	d100      	bne.n	800ab22 <memmove+0x2a>
 800ab20:	bd10      	pop	{r4, pc}
 800ab22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab2a:	e7f7      	b.n	800ab1c <memmove+0x24>

0800ab2c <_realloc_r>:
 800ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab30:	4680      	mov	r8, r0
 800ab32:	4614      	mov	r4, r2
 800ab34:	460e      	mov	r6, r1
 800ab36:	b921      	cbnz	r1, 800ab42 <_realloc_r+0x16>
 800ab38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	f7fd b93d 	b.w	8007dbc <_malloc_r>
 800ab42:	b92a      	cbnz	r2, 800ab50 <_realloc_r+0x24>
 800ab44:	f7fd f8ce 	bl	8007ce4 <_free_r>
 800ab48:	4625      	mov	r5, r4
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab50:	f000 f842 	bl	800abd8 <_malloc_usable_size_r>
 800ab54:	4284      	cmp	r4, r0
 800ab56:	4607      	mov	r7, r0
 800ab58:	d802      	bhi.n	800ab60 <_realloc_r+0x34>
 800ab5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab5e:	d812      	bhi.n	800ab86 <_realloc_r+0x5a>
 800ab60:	4621      	mov	r1, r4
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7fd f92a 	bl	8007dbc <_malloc_r>
 800ab68:	4605      	mov	r5, r0
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0ed      	beq.n	800ab4a <_realloc_r+0x1e>
 800ab6e:	42bc      	cmp	r4, r7
 800ab70:	4622      	mov	r2, r4
 800ab72:	4631      	mov	r1, r6
 800ab74:	bf28      	it	cs
 800ab76:	463a      	movcs	r2, r7
 800ab78:	f7ff f830 	bl	8009bdc <memcpy>
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4640      	mov	r0, r8
 800ab80:	f7fd f8b0 	bl	8007ce4 <_free_r>
 800ab84:	e7e1      	b.n	800ab4a <_realloc_r+0x1e>
 800ab86:	4635      	mov	r5, r6
 800ab88:	e7df      	b.n	800ab4a <_realloc_r+0x1e>
	...

0800ab8c <_read_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d07      	ldr	r5, [pc, #28]	; (800abac <_read_r+0x20>)
 800ab90:	4604      	mov	r4, r0
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	2200      	movs	r2, #0
 800ab98:	602a      	str	r2, [r5, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f7f7 fde6 	bl	800276c <_read>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d102      	bne.n	800abaa <_read_r+0x1e>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	b103      	cbz	r3, 800abaa <_read_r+0x1e>
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	bd38      	pop	{r3, r4, r5, pc}
 800abac:	200004f8 	.word	0x200004f8

0800abb0 <__ascii_wctomb>:
 800abb0:	b149      	cbz	r1, 800abc6 <__ascii_wctomb+0x16>
 800abb2:	2aff      	cmp	r2, #255	; 0xff
 800abb4:	bf85      	ittet	hi
 800abb6:	238a      	movhi	r3, #138	; 0x8a
 800abb8:	6003      	strhi	r3, [r0, #0]
 800abba:	700a      	strbls	r2, [r1, #0]
 800abbc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800abc0:	bf98      	it	ls
 800abc2:	2001      	movls	r0, #1
 800abc4:	4770      	bx	lr
 800abc6:	4608      	mov	r0, r1
 800abc8:	4770      	bx	lr

0800abca <abort>:
 800abca:	b508      	push	{r3, lr}
 800abcc:	2006      	movs	r0, #6
 800abce:	f000 f833 	bl	800ac38 <raise>
 800abd2:	2001      	movs	r0, #1
 800abd4:	f7f7 fdc0 	bl	8002758 <_exit>

0800abd8 <_malloc_usable_size_r>:
 800abd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abdc:	1f18      	subs	r0, r3, #4
 800abde:	2b00      	cmp	r3, #0
 800abe0:	bfbc      	itt	lt
 800abe2:	580b      	ldrlt	r3, [r1, r0]
 800abe4:	18c0      	addlt	r0, r0, r3
 800abe6:	4770      	bx	lr

0800abe8 <_raise_r>:
 800abe8:	291f      	cmp	r1, #31
 800abea:	b538      	push	{r3, r4, r5, lr}
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	d904      	bls.n	800abfc <_raise_r+0x14>
 800abf2:	2316      	movs	r3, #22
 800abf4:	6003      	str	r3, [r0, #0]
 800abf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abfe:	b112      	cbz	r2, 800ac06 <_raise_r+0x1e>
 800ac00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac04:	b94b      	cbnz	r3, 800ac1a <_raise_r+0x32>
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 f830 	bl	800ac6c <_getpid_r>
 800ac0c:	462a      	mov	r2, r5
 800ac0e:	4601      	mov	r1, r0
 800ac10:	4620      	mov	r0, r4
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 b817 	b.w	800ac48 <_kill_r>
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d00a      	beq.n	800ac34 <_raise_r+0x4c>
 800ac1e:	1c59      	adds	r1, r3, #1
 800ac20:	d103      	bne.n	800ac2a <_raise_r+0x42>
 800ac22:	2316      	movs	r3, #22
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	2001      	movs	r0, #1
 800ac28:	e7e7      	b.n	800abfa <_raise_r+0x12>
 800ac2a:	2400      	movs	r4, #0
 800ac2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac30:	4628      	mov	r0, r5
 800ac32:	4798      	blx	r3
 800ac34:	2000      	movs	r0, #0
 800ac36:	e7e0      	b.n	800abfa <_raise_r+0x12>

0800ac38 <raise>:
 800ac38:	4b02      	ldr	r3, [pc, #8]	; (800ac44 <raise+0xc>)
 800ac3a:	4601      	mov	r1, r0
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	f7ff bfd3 	b.w	800abe8 <_raise_r>
 800ac42:	bf00      	nop
 800ac44:	2000000c 	.word	0x2000000c

0800ac48 <_kill_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_kill_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f7 fd6f 	bl	8002738 <_kill>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_kill_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_kill_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200004f8 	.word	0x200004f8

0800ac6c <_getpid_r>:
 800ac6c:	f7f7 bd5c 	b.w	8002728 <_getpid>

0800ac70 <sqrt>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	ed2d 8b02 	vpush	{d8}
 800ac76:	ec55 4b10 	vmov	r4, r5, d0
 800ac7a:	f000 f825 	bl	800acc8 <__ieee754_sqrt>
 800ac7e:	4622      	mov	r2, r4
 800ac80:	462b      	mov	r3, r5
 800ac82:	4620      	mov	r0, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	eeb0 8a40 	vmov.f32	s16, s0
 800ac8a:	eef0 8a60 	vmov.f32	s17, s1
 800ac8e:	f7f5 ff75 	bl	8000b7c <__aeabi_dcmpun>
 800ac92:	b990      	cbnz	r0, 800acba <sqrt+0x4a>
 800ac94:	2200      	movs	r2, #0
 800ac96:	2300      	movs	r3, #0
 800ac98:	4620      	mov	r0, r4
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	f7f5 ff46 	bl	8000b2c <__aeabi_dcmplt>
 800aca0:	b158      	cbz	r0, 800acba <sqrt+0x4a>
 800aca2:	f7fc ffe5 	bl	8007c70 <__errno>
 800aca6:	2321      	movs	r3, #33	; 0x21
 800aca8:	6003      	str	r3, [r0, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	2300      	movs	r3, #0
 800acae:	4610      	mov	r0, r2
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7f5 fdf3 	bl	800089c <__aeabi_ddiv>
 800acb6:	ec41 0b18 	vmov	d8, r0, r1
 800acba:	eeb0 0a48 	vmov.f32	s0, s16
 800acbe:	eef0 0a68 	vmov.f32	s1, s17
 800acc2:	ecbd 8b02 	vpop	{d8}
 800acc6:	bd38      	pop	{r3, r4, r5, pc}

0800acc8 <__ieee754_sqrt>:
 800acc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	ec55 4b10 	vmov	r4, r5, d0
 800acd0:	4e55      	ldr	r6, [pc, #340]	; (800ae28 <__ieee754_sqrt+0x160>)
 800acd2:	43ae      	bics	r6, r5
 800acd4:	ee10 0a10 	vmov	r0, s0
 800acd8:	ee10 3a10 	vmov	r3, s0
 800acdc:	462a      	mov	r2, r5
 800acde:	4629      	mov	r1, r5
 800ace0:	d110      	bne.n	800ad04 <__ieee754_sqrt+0x3c>
 800ace2:	ee10 2a10 	vmov	r2, s0
 800ace6:	462b      	mov	r3, r5
 800ace8:	f7f5 fcae 	bl	8000648 <__aeabi_dmul>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f7f5 faf2 	bl	80002dc <__adddf3>
 800acf8:	4604      	mov	r4, r0
 800acfa:	460d      	mov	r5, r1
 800acfc:	ec45 4b10 	vmov	d0, r4, r5
 800ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad04:	2d00      	cmp	r5, #0
 800ad06:	dc10      	bgt.n	800ad2a <__ieee754_sqrt+0x62>
 800ad08:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad0c:	4330      	orrs	r0, r6
 800ad0e:	d0f5      	beq.n	800acfc <__ieee754_sqrt+0x34>
 800ad10:	b15d      	cbz	r5, 800ad2a <__ieee754_sqrt+0x62>
 800ad12:	ee10 2a10 	vmov	r2, s0
 800ad16:	462b      	mov	r3, r5
 800ad18:	ee10 0a10 	vmov	r0, s0
 800ad1c:	f7f5 fadc 	bl	80002d8 <__aeabi_dsub>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	f7f5 fdba 	bl	800089c <__aeabi_ddiv>
 800ad28:	e7e6      	b.n	800acf8 <__ieee754_sqrt+0x30>
 800ad2a:	1512      	asrs	r2, r2, #20
 800ad2c:	d074      	beq.n	800ae18 <__ieee754_sqrt+0x150>
 800ad2e:	07d4      	lsls	r4, r2, #31
 800ad30:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ad34:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ad38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ad3c:	bf5e      	ittt	pl
 800ad3e:	0fda      	lsrpl	r2, r3, #31
 800ad40:	005b      	lslpl	r3, r3, #1
 800ad42:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ad46:	2400      	movs	r4, #0
 800ad48:	0fda      	lsrs	r2, r3, #31
 800ad4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ad4e:	107f      	asrs	r7, r7, #1
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	2516      	movs	r5, #22
 800ad54:	4620      	mov	r0, r4
 800ad56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ad5a:	1886      	adds	r6, r0, r2
 800ad5c:	428e      	cmp	r6, r1
 800ad5e:	bfde      	ittt	le
 800ad60:	1b89      	suble	r1, r1, r6
 800ad62:	18b0      	addle	r0, r6, r2
 800ad64:	18a4      	addle	r4, r4, r2
 800ad66:	0049      	lsls	r1, r1, #1
 800ad68:	3d01      	subs	r5, #1
 800ad6a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ad6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad76:	d1f0      	bne.n	800ad5a <__ieee754_sqrt+0x92>
 800ad78:	462a      	mov	r2, r5
 800ad7a:	f04f 0e20 	mov.w	lr, #32
 800ad7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ad82:	4281      	cmp	r1, r0
 800ad84:	eb06 0c05 	add.w	ip, r6, r5
 800ad88:	dc02      	bgt.n	800ad90 <__ieee754_sqrt+0xc8>
 800ad8a:	d113      	bne.n	800adb4 <__ieee754_sqrt+0xec>
 800ad8c:	459c      	cmp	ip, r3
 800ad8e:	d811      	bhi.n	800adb4 <__ieee754_sqrt+0xec>
 800ad90:	f1bc 0f00 	cmp.w	ip, #0
 800ad94:	eb0c 0506 	add.w	r5, ip, r6
 800ad98:	da43      	bge.n	800ae22 <__ieee754_sqrt+0x15a>
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	db41      	blt.n	800ae22 <__ieee754_sqrt+0x15a>
 800ad9e:	f100 0801 	add.w	r8, r0, #1
 800ada2:	1a09      	subs	r1, r1, r0
 800ada4:	459c      	cmp	ip, r3
 800ada6:	bf88      	it	hi
 800ada8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800adac:	eba3 030c 	sub.w	r3, r3, ip
 800adb0:	4432      	add	r2, r6
 800adb2:	4640      	mov	r0, r8
 800adb4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800adb8:	f1be 0e01 	subs.w	lr, lr, #1
 800adbc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800adc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adc4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800adc8:	d1db      	bne.n	800ad82 <__ieee754_sqrt+0xba>
 800adca:	430b      	orrs	r3, r1
 800adcc:	d006      	beq.n	800addc <__ieee754_sqrt+0x114>
 800adce:	1c50      	adds	r0, r2, #1
 800add0:	bf13      	iteet	ne
 800add2:	3201      	addne	r2, #1
 800add4:	3401      	addeq	r4, #1
 800add6:	4672      	moveq	r2, lr
 800add8:	f022 0201 	bicne.w	r2, r2, #1
 800addc:	1063      	asrs	r3, r4, #1
 800adde:	0852      	lsrs	r2, r2, #1
 800ade0:	07e1      	lsls	r1, r4, #31
 800ade2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ade6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800adea:	bf48      	it	mi
 800adec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800adf0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800adf4:	4614      	mov	r4, r2
 800adf6:	e781      	b.n	800acfc <__ieee754_sqrt+0x34>
 800adf8:	0ad9      	lsrs	r1, r3, #11
 800adfa:	3815      	subs	r0, #21
 800adfc:	055b      	lsls	r3, r3, #21
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d0fa      	beq.n	800adf8 <__ieee754_sqrt+0x130>
 800ae02:	02cd      	lsls	r5, r1, #11
 800ae04:	d50a      	bpl.n	800ae1c <__ieee754_sqrt+0x154>
 800ae06:	f1c2 0420 	rsb	r4, r2, #32
 800ae0a:	fa23 f404 	lsr.w	r4, r3, r4
 800ae0e:	1e55      	subs	r5, r2, #1
 800ae10:	4093      	lsls	r3, r2
 800ae12:	4321      	orrs	r1, r4
 800ae14:	1b42      	subs	r2, r0, r5
 800ae16:	e78a      	b.n	800ad2e <__ieee754_sqrt+0x66>
 800ae18:	4610      	mov	r0, r2
 800ae1a:	e7f0      	b.n	800adfe <__ieee754_sqrt+0x136>
 800ae1c:	0049      	lsls	r1, r1, #1
 800ae1e:	3201      	adds	r2, #1
 800ae20:	e7ef      	b.n	800ae02 <__ieee754_sqrt+0x13a>
 800ae22:	4680      	mov	r8, r0
 800ae24:	e7bd      	b.n	800ada2 <__ieee754_sqrt+0xda>
 800ae26:	bf00      	nop
 800ae28:	7ff00000 	.word	0x7ff00000

0800ae2c <_init>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr

0800ae38 <_fini>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr
