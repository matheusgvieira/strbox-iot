
cpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08005694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005694  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ea0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba9  00000000  00000000  00037edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003aa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280be  00000000  00000000  0003d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5c  00000000  00000000  0006528e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e6d8  00000000  00000000  0007ccea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b3c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005670  00000000  00000000  0018b414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005620 	.word	0x08005620

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005620 	.word	0x08005620

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f005 f86b 	bl	8005610 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053a:	4b34      	ldr	r3, [pc, #208]	; (800060c <MX_ADC1_Init+0xf0>)
 800053c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000542:	4b32      	ldr	r3, [pc, #200]	; (800060c <MX_ADC1_Init+0xf0>)
 8000544:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <MX_ADC1_Init+0xf0>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <MX_ADC1_Init+0xf0>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <MX_ADC1_Init+0xf0>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <MX_ADC1_Init+0xf0>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <MX_ADC1_Init+0xf0>)
 8000564:	2208      	movs	r2, #8
 8000566:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <MX_ADC1_Init+0xf0>)
 800056a:	2200      	movs	r2, #0
 800056c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b27      	ldr	r3, [pc, #156]	; (800060c <MX_ADC1_Init+0xf0>)
 8000570:	2200      	movs	r2, #0
 8000572:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <MX_ADC1_Init+0xf0>)
 8000576:	2201      	movs	r2, #1
 8000578:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <MX_ADC1_Init+0xf0>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000582:	4b22      	ldr	r3, [pc, #136]	; (800060c <MX_ADC1_Init+0xf0>)
 8000584:	2200      	movs	r2, #0
 8000586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_ADC1_Init+0xf0>)
 800058a:	2200      	movs	r2, #0
 800058c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <MX_ADC1_Init+0xf0>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <MX_ADC1_Init+0xf0>)
 8000598:	2200      	movs	r2, #0
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_ADC1_Init+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4819      	ldr	r0, [pc, #100]	; (800060c <MX_ADC1_Init+0xf0>)
 80005a6:	f000 ffe9 	bl	800157c <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005b0:	f000 fae7 	bl	8000b82 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80005b4:	2306      	movs	r3, #6
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80005b8:	2300      	movs	r3, #0
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	4619      	mov	r1, r3
 80005c6:	4811      	ldr	r0, [pc, #68]	; (800060c <MX_ADC1_Init+0xf0>)
 80005c8:	f002 f8b0 	bl	800272c <HAL_ADCEx_MultiModeConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80005d2:	f000 fad6 	bl	8000b82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_ADC1_Init+0xf4>)
 80005d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005da:	2306      	movs	r3, #6
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e2:	237f      	movs	r3, #127	; 0x7f
 80005e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e6:	2304      	movs	r3, #4
 80005e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_ADC1_Init+0xf0>)
 80005f4:	f001 fc02 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80005fe:	f000 fac0 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3730      	adds	r7, #48	; 0x30
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000028 	.word	0x20000028
 8000610:	21800100 	.word	0x21800100

08000614 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	463b      	mov	r3, r7
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fff5 	bl	8005610 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000628:	4a28      	ldr	r2, [pc, #160]	; (80006cc <MX_ADC2_Init+0xb8>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800062e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000632:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800064e:	2208      	movs	r2, #8
 8000650:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800065a:	2200      	movs	r2, #0
 800065c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000676:	2200      	movs	r2, #0
 8000678:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_ADC2_Init+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000682:	4811      	ldr	r0, [pc, #68]	; (80006c8 <MX_ADC2_Init+0xb4>)
 8000684:	f000 ff7a 	bl	800157c <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800068e:	f000 fa78 	bl	8000b82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC2_Init+0xbc>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	; 0x7f
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <MX_ADC2_Init+0xb4>)
 80006b0:	f001 fba4 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80006ba:	f000 fa62 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000094 	.word	0x20000094
 80006cc:	50000100 	.word	0x50000100
 80006d0:	25b00200 	.word	0x25b00200

080006d4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 ff95 	bl	8005610 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_ADC5_Init+0xc0>)
 80006e8:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <MX_ADC5_Init+0xc4>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_ADC5_Init+0xc0>)
 80006ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006f2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_ADC5_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_ADC5_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC5_Init+0xc0>)
 800070e:	2204      	movs	r2, #4
 8000710:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_ADC5_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000720:	2201      	movs	r2, #1
 8000722:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC5_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_ADC5_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <MX_ADC5_Init+0xc0>)
 8000750:	f000 ff14 	bl	800157c <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800075a:	f000 fa12 	bl	8000b82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC5;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_ADC5_Init+0xc8>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000766:	2307      	movs	r3, #7
 8000768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	237f      	movs	r3, #127	; 0x7f
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_ADC5_Init+0xc0>)
 800077c:	f001 fb3e 	bl	8001dfc <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000786:	f000 f9fc 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000100 	.word	0x20000100
 8000798:	50000600 	.word	0x50000600
 800079c:	90c00010 	.word	0x90c00010

080007a0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a2      	sub	sp, #136	; 0x88
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	2254      	movs	r2, #84	; 0x54
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 ff25 	bl	8005610 <memset>
  if(adcHandle->Instance==ADC1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ce:	d145      	bne.n	800085c <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007dc:	f107 0320 	add.w	r3, r7, #32
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 f961 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007ec:	f000 f9c9 	bl	8000b82 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f0:	4b56      	ldr	r3, [pc, #344]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a55      	ldr	r2, [pc, #340]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 80007f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007fa:	4b54      	ldr	r3, [pc, #336]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d10b      	bne.n	800081a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a52      	ldr	r2, [pc, #328]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a4c      	ldr	r2, [pc, #304]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = CELL_1_VOLTAGE_Pin;
 8000832:	2304      	movs	r3, #4
 8000834:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000836:	2303      	movs	r3, #3
 8000838:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(CELL_1_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000842:	4619      	mov	r1, r3
 8000844:	4843      	ldr	r0, [pc, #268]	; (8000954 <HAL_ADC_MspInit+0x1b4>)
 8000846:	f002 f989 	bl	8002b5c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2012      	movs	r0, #18
 8000850:	f002 f94f 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000854:	2012      	movs	r0, #18
 8000856:	f002 f966 	bl	8002b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800085a:	e073      	b.n	8000944 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <HAL_ADC_MspInit+0x1b8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d145      	bne.n	80008f2 <HAL_ADC_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800086c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000870:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f916 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_ADC_MspInit+0xe6>
      Error_Handler();
 8000882:	f000 f97e 	bl	8000b82 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a2f      	ldr	r2, [pc, #188]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 800088e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000890:	4b2e      	ldr	r3, [pc, #184]	; (800094c <HAL_ADC_MspInit+0x1ac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10b      	bne.n	80008b0 <HAL_ADC_MspInit+0x110>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 800089e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	4a26      	ldr	r2, [pc, #152]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CELL_1_CURRENT_Pin;
 80008c8:	2308      	movs	r3, #8
 80008ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008cc:	2303      	movs	r3, #3
 80008ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(CELL_1_CURRENT_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008d8:	4619      	mov	r1, r3
 80008da:	481e      	ldr	r0, [pc, #120]	; (8000954 <HAL_ADC_MspInit+0x1b4>)
 80008dc:	f002 f93e 	bl	8002b5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	2012      	movs	r0, #18
 80008e6:	f002 f904 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008ea:	2012      	movs	r0, #18
 80008ec:	f002 f91b 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 80008f0:	e028      	b.n	8000944 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC5)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a19      	ldr	r2, [pc, #100]	; (800095c <HAL_ADC_MspInit+0x1bc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d123      	bne.n	8000944 <HAL_ADC_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000906:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f8cb 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 8000918:	f000 f933 	bl	8000b82 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_ADC_MspInit+0x1b0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(ADC5_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	203e      	movs	r0, #62	; 0x3e
 800093a:	f002 f8da 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC5_IRQn);
 800093e:	203e      	movs	r0, #62	; 0x3e
 8000940:	f002 f8f1 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8000944:	bf00      	nop
 8000946:	3788      	adds	r7, #136	; 0x88
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000016c 	.word	0x2000016c
 8000950:	40021000 	.word	0x40021000
 8000954:	48000800 	.word	0x48000800
 8000958:	50000100 	.word	0x50000100
 800095c:	50000600 	.word	0x50000600

08000960 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MX_GPIO_Init+0x154>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x154>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x154>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098e:	4b49      	ldr	r3, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x154>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a48      	ldr	r2, [pc, #288]	; (8000ab4 <MX_GPIO_Init+0x154>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <MX_GPIO_Init+0x154>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_GPIO_Init+0x154>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CELL_1_OUT_NEG_GPIO_Port, CELL_1_OUT_NEG_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4837      	ldr	r0, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x158>)
 80009dc:	f002 fa40 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7108 	mov.w	r1, #544	; 0x220
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f002 fa39 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80009f4:	4831      	ldr	r0, [pc, #196]	; (8000abc <MX_GPIO_Init+0x15c>)
 80009f6:	f002 fa33 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_BTN_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x158>)
 8000a12:	f002 f8a3 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_OUT_NEG_Pin;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CELL_1_OUT_NEG_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x158>)
 8000a2e:	f002 f895 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CELL_1_DPS_Pin;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a36:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CELL_1_DPS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f002 f887 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CELL_1_BUILTIN_LED_Pin|CELL_1_OUT_POS_Pin;
 8000a4e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f002 f877 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CELL_1_DBG3_Pin|CELL_1_DBG2_Pin|CELL_1_DBG1_Pin;
 8000a6e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_GPIO_Init+0x15c>)
 8000a88:	f002 f868 	bl	8002b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2006      	movs	r0, #6
 8000a92:	f002 f82e 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a96:	2006      	movs	r0, #6
 8000a98:	f002 f845 	bl	8002b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f826 	bl	8002af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa6:	2028      	movs	r0, #40	; 0x28
 8000aa8:	f002 f83d 	bl	8002b26 <HAL_NVIC_EnableIRQ>

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000800 	.word	0x48000800
 8000abc:	48000400 	.word	0x48000400

08000ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac4:	f000 facd 	bl	8001062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac8:	f000 f80f 	bl	8000aea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000acc:	f7ff ff48 	bl	8000960 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ad0:	f000 f8f8 	bl	8000cc4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000ad4:	f7ff fd22 	bl	800051c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ad8:	f7ff fd9c 	bl	8000614 <MX_ADC2_Init>
  MX_ADC5_Init();
 8000adc:	f7ff fdfa 	bl	80006d4 <MX_ADC5_Init>
  MX_TIM2_Init();
 8000ae0:	f000 f944 	bl	8000d6c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000ae4:	f000 f9d0 	bl	8000e88 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x28>

08000aea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b094      	sub	sp, #80	; 0x50
 8000aee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	2238      	movs	r2, #56	; 0x38
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 fd89 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b10:	f002 f9e2 	bl	8002ed8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1e:	2340      	movs	r3, #64	; 0x40
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fa7c 	bl	8003040 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b4e:	f000 f818 	bl	8000b82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2303      	movs	r3, #3
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2103      	movs	r1, #3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 fd80 	bl	8003670 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b76:	f000 f804 	bl	8000b82 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3750      	adds	r7, #80	; 0x50
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b86:	b672      	cpsid	i
}
 8000b88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc2:	f002 fa2d 	bl	8003020 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 fa72 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CELL_1_DPS_Pin);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f002 f92f 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <ADC1_2_IRQHandler+0x14>)
 8000c3e:	f000 fe5f 	bl	8001900 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <ADC1_2_IRQHandler+0x18>)
 8000c44:	f000 fe5c 	bl	8001900 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	20000094 	.word	0x20000094

08000c54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c5a:	f003 f9ca 	bl	8003ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000170 	.word	0x20000170

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM2_IRQHandler+0x10>)
 8000c6e:	f003 f9c0 	bl	8003ff2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001bc 	.word	0x200001bc

08000c7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CELL_1_BTN_Pin);
 8000c80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c84:	f002 f904 	bl	8002e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <ADC5_IRQHandler>:

/**
  * @brief This function handles ADC5 global interrupt.
  */
void ADC5_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC5_IRQn 0 */

  /* USER CODE END ADC5_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc5);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <ADC5_IRQHandler+0x10>)
 8000c92:	f000 fe35 	bl	8001900 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC5_IRQn 1 */

  /* USER CODE END ADC5_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000100 	.word	0x20000100

08000ca0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000ce4:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <MX_TIM1_Init+0xa4>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cea:	2277      	movs	r2, #119	; 0x77
 8000cec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1041;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cf6:	f240 4211 	movw	r2, #1041	; 0x411
 8000cfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d10:	f003 f918 	bl	8003f44 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f7ff ff32 	bl	8000b82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d2c:	f003 fae0 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d36:	f7ff ff24 	bl	8000b82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d4c:	f003 fd5c 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d56:	f7ff ff14 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000170 	.word	0x20000170
 8000d68:	40012c00 	.word	0x40012c00

08000d6c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11999;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d94:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000d98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db4:	4813      	ldr	r0, [pc, #76]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000db6:	f003 f8c5 	bl	8003f44 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000dc0:	f7ff fedf 	bl	8000b82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dd2:	f003 fa8d 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ddc:	f7ff fed1 	bl	8000b82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_TIM2_Init+0x98>)
 8000dee:	f003 fd0b 	bl	8004808 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000df8:	f7ff fec3 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001bc 	.word	0x200001bc

08000e08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_TIM_Base_MspInit+0x78>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d114      	bne.n	8000e44 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2019      	movs	r0, #25
 8000e38:	f001 fe5b 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e3c:	2019      	movs	r0, #25
 8000e3e:	f001 fe72 	bl	8002b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e42:	e018      	b.n	8000e76 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4c:	d113      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x7c>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f001 fe41 	bl	8002af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e70:	201c      	movs	r0, #28
 8000e72:	f001 fe58 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	40021000 	.word	0x40021000

08000e88 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_USART3_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ed2:	f003 fd75 	bl	80049c0 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f7ff fe51 	bl	8000b82 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ee4:	f004 faa6 	bl	8005434 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f7ff fe48 	bl	8000b82 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ef6:	f004 fadb 	bl	80054b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f7ff fe3f 	bl	8000b82 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000f06:	f004 fa5c 	bl	80053c2 <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f7ff fe37 	bl	8000b82 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000208 	.word	0x20000208
 8000f1c:	40004800 	.word	0x40004800

08000f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0a0      	sub	sp, #128	; 0x80
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	2254      	movs	r2, #84	; 0x54
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fb65 	bl	8005610 <memset>
  if(uartHandle->Instance==USART3)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_UART_MspInit+0xe0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d153      	bne.n	8000ff8 <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f50:	2304      	movs	r3, #4
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f002 fda3 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff fe0b 	bl	8000b82 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	4a24      	ldr	r2, [pc, #144]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f76:	6593      	str	r3, [r2, #88]	; 0x58
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_UART_MspInit+0xe4>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <HAL_UART_MspInit+0xe8>)
 8000fd2:	f001 fdc3 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_UART_MspInit+0xec>)
 8000ff4:	f001 fdb2 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3780      	adds	r7, #128	; 0x80
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004800 	.word	0x40004800
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400
 800100c:	48000800 	.word	0x48000800

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0b      	ldr	r4, [pc, #44]	; (800105c <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103a:	f7ff fe31 	bl	8000ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f004 fac3 	bl	80055c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001042:	f7ff fd3d 	bl	8000ac0 <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8001058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800105c:	2000029c 	.word	0x2000029c

08001060 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC3_IRQHandler>

08001062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f001 fd35 	bl	8002adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f80e 	bl	8001094 <HAL_InitTick>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	e001      	b.n	8001088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001084:	f7ff fd82 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001088:	79fb      	ldrb	r3, [r7, #7]

}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_InitTick+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d022      	beq.n	80010ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_InitTick+0x6c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_InitTick+0x68>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fd40 	bl	8002b42 <HAL_SYSTICK_Config>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d809      	bhi.n	80010e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ce:	2200      	movs	r2, #0
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d6:	f001 fd0c 	bl	8002af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_InitTick+0x70>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e007      	b.n	80010f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e004      	b.n	80010f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e001      	b.n	80010f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4413      	add	r3, r2
 8001116:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_IncTick+0x1c>)
 8001118:	6013      	str	r3, [r2, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000298 	.word	0x20000298
 8001128:	20000008 	.word	0x20000008

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000298 	.word	0x20000298

08001144 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3360      	adds	r3, #96	; 0x60
 80011be:	461a      	mov	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <LL_ADC_SetOffset+0x44>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	4313      	orrs	r3, r2
 80011dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	03fff000 	.word	0x03fff000

080011f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3360      	adds	r3, #96	; 0x60
 8001202:	461a      	mov	r2, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3360      	adds	r3, #96	; 0x60
 8001230:	461a      	mov	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800124a:	bf00      	nop
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001256:	b480      	push	{r7}
 8001258:	b087      	sub	sp, #28
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3360      	adds	r3, #96	; 0x60
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	431a      	orrs	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3360      	adds	r3, #96	; 0x60
 800129c:	461a      	mov	r2, r3
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	615a      	str	r2, [r3, #20]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800130e:	b480      	push	{r7}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3330      	adds	r3, #48	; 0x30
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	211f      	movs	r1, #31
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0e9b      	lsrs	r3, r3, #26
 8001346:	f003 011f 	and.w	r1, r3, #31
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3314      	adds	r3, #20
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	0e5b      	lsrs	r3, r3, #25
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	0d1b      	lsrs	r3, r3, #20
 80013b4:	f003 031f 	and.w	r3, r3, #31
 80013b8:	2107      	movs	r1, #7
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	401a      	ands	r2, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	0d1b      	lsrs	r3, r3, #20
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10a      	bne.n	800140e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800140c:	e00a      	b.n	8001424 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141a:	43db      	mvns	r3, r3
 800141c:	401a      	ands	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	407f0000 	.word	0x407f0000

08001434 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 031f 	and.w	r3, r3, #31
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800147c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6093      	str	r3, [r2, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a4:	d101      	bne.n	80014aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <LL_ADC_IsEnabled+0x18>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <LL_ADC_IsEnabled+0x1a>
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d101      	bne.n	8001546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b08      	cmp	r3, #8
 8001566:	d101      	bne.n	800156c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e1af      	b.n	80018f6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f8fb 	bl	80007a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff67 	bl	8001490 <LL_ADC_IsDeepPowerDownEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff4d 	bl	800146c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff82 	bl	80014e0 <LL_ADC_IsInternalRegulatorEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff66 	bl	80014b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ec:	4b9f      	ldr	r3, [pc, #636]	; (800186c <HAL_ADC_Init+0x2f0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	4a9f      	ldr	r2, [pc, #636]	; (8001870 <HAL_ADC_Init+0x2f4>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001600:	e002      	b.n	8001608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3b01      	subs	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff64 	bl	80014e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff75 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 8001644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 8148 	bne.w	80018e4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 8144 	bne.w	80018e4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001660:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001664:	f043 0202 	orr.w	r2, r3, #2
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff49 	bl	8001508 <LL_ADC_IsEnabled>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d141      	bne.n	8001700 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001684:	d004      	beq.n	8001690 <HAL_ADC_Init+0x114>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_ADC_Init+0x2f8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d10f      	bne.n	80016b0 <HAL_ADC_Init+0x134>
 8001690:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001694:	f7ff ff38 	bl	8001508 <LL_ADC_IsEnabled>
 8001698:	4604      	mov	r4, r0
 800169a:	4876      	ldr	r0, [pc, #472]	; (8001874 <HAL_ADC_Init+0x2f8>)
 800169c:	f7ff ff34 	bl	8001508 <LL_ADC_IsEnabled>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4323      	orrs	r3, r4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf0c      	ite	eq
 80016a8:	2301      	moveq	r3, #1
 80016aa:	2300      	movne	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e012      	b.n	80016d6 <HAL_ADC_Init+0x15a>
 80016b0:	4871      	ldr	r0, [pc, #452]	; (8001878 <HAL_ADC_Init+0x2fc>)
 80016b2:	f7ff ff29 	bl	8001508 <LL_ADC_IsEnabled>
 80016b6:	4604      	mov	r4, r0
 80016b8:	4870      	ldr	r0, [pc, #448]	; (800187c <HAL_ADC_Init+0x300>)
 80016ba:	f7ff ff25 	bl	8001508 <LL_ADC_IsEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	431c      	orrs	r4, r3
 80016c2:	486f      	ldr	r0, [pc, #444]	; (8001880 <HAL_ADC_Init+0x304>)
 80016c4:	f7ff ff20 	bl	8001508 <LL_ADC_IsEnabled>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4323      	orrs	r3, r4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf0c      	ite	eq
 80016d0:	2301      	moveq	r3, #1
 80016d2:	2300      	movne	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x172>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a62      	ldr	r2, [pc, #392]	; (8001874 <HAL_ADC_Init+0x2f8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x176>
 80016ee:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_ADC_Init+0x308>)
 80016f0:	e000      	b.n	80016f4 <HAL_ADC_Init+0x178>
 80016f2:	4a65      	ldr	r2, [pc, #404]	; (8001888 <HAL_ADC_Init+0x30c>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7ff fd22 	bl	8001144 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7f5b      	ldrb	r3, [r3, #29]
 8001704:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001710:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001716:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	045b      	lsls	r3, r3, #17
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_ADC_Init+0x310>)
 8001760:	4013      	ands	r3, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fed1 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 800178c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fede 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8001798:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d17f      	bne.n	80018a0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d17c      	bne.n	80018a0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d017      	beq.n	8001808 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80017f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6911      	ldr	r1, [r2, #16]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001806:	e013      	b.n	8001830 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001816:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800182c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12a      	bne.n	8001890 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001856:	4311      	orrs	r1, r2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800185c:	430a      	orrs	r2, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	e019      	b.n	80018a0 <HAL_ADC_Init+0x324>
 800186c:	20000000 	.word	0x20000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	50000100 	.word	0x50000100
 8001878:	50000400 	.word	0x50000400
 800187c:	50000500 	.word	0x50000500
 8001880:	50000600 	.word	0x50000600
 8001884:	50000300 	.word	0x50000300
 8001888:	50000700 	.word	0x50000700
 800188c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10c      	bne.n	80018c2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f023 010f 	bic.w	r1, r3, #15
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	1e5a      	subs	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
 80018c0:	e007      	b.n	80018d2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 020f 	bic.w	r2, r2, #15
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	f043 0201 	orr.w	r2, r3, #1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80018e2:	e007      	b.n	80018f4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	f043 0210 	orr.w	r2, r3, #16
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}
 80018fe:	bf00      	nop

08001900 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001924:	d004      	beq.n	8001930 <HAL_ADC_IRQHandler+0x30>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a8e      	ldr	r2, [pc, #568]	; (8001b64 <HAL_ADC_IRQHandler+0x264>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_ADC_IRQHandler+0x34>
 8001930:	4b8d      	ldr	r3, [pc, #564]	; (8001b68 <HAL_ADC_IRQHandler+0x268>)
 8001932:	e000      	b.n	8001936 <HAL_ADC_IRQHandler+0x36>
 8001934:	4b8d      	ldr	r3, [pc, #564]	; (8001b6c <HAL_ADC_IRQHandler+0x26c>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd7c 	bl	8001434 <LL_ADC_GetMultimode>
 800193c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d017      	beq.n	8001978 <HAL_ADC_IRQHandler+0x78>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d012      	beq.n	8001978 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fed4 	bl	8002718 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_ADC_IRQHandler+0x8c>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10b      	bne.n	80019a4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8094 	beq.w	8001ac0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 808e 	beq.w	8001ac0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fc91 	bl	80012e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d072      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a64      	ldr	r2, [pc, #400]	; (8001b64 <HAL_ADC_IRQHandler+0x264>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d009      	beq.n	80019ea <HAL_ADC_IRQHandler+0xea>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <HAL_ADC_IRQHandler+0x270>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d002      	beq.n	80019e6 <HAL_ADC_IRQHandler+0xe6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e003      	b.n	80019ee <HAL_ADC_IRQHandler+0xee>
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_ADC_IRQHandler+0x274>)
 80019e8:	e001      	b.n	80019ee <HAL_ADC_IRQHandler+0xee>
 80019ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d008      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d002      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b09      	cmp	r3, #9
 8001a06:	d104      	bne.n	8001a12 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	e014      	b.n	8001a3c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <HAL_ADC_IRQHandler+0x264>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d009      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x130>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <HAL_ADC_IRQHandler+0x270>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x12c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e003      	b.n	8001a34 <HAL_ADC_IRQHandler+0x134>
 8001a2c:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_ADC_IRQHandler+0x274>)
 8001a2e:	e001      	b.n	8001a34 <HAL_ADC_IRQHandler+0x134>
 8001a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a34:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d135      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d12e      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fd68 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d11a      	bne.n	8001a9a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 020c 	bic.w	r2, r2, #12
 8001a72:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d112      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a98:	e00b      	b.n	8001ab2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f984 	bl	8001dc0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	220c      	movs	r2, #12
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_IRQHandler+0x1d4>
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80b3 	beq.w	8001c46 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80ad 	beq.w	8001c46 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fc2c 	bl	8001366 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b0e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fbe7 	bl	80012e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b1a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_ADC_IRQHandler+0x264>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_ADC_IRQHandler+0x23a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_ADC_IRQHandler+0x270>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x236>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e003      	b.n	8001b3e <HAL_ADC_IRQHandler+0x23e>
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_ADC_IRQHandler+0x274>)
 8001b38:	e001      	b.n	8001b3e <HAL_ADC_IRQHandler+0x23e>
 8001b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d008      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d002      	beq.n	8001b58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b07      	cmp	r3, #7
 8001b56:	d10f      	bne.n	8001b78 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	e01f      	b.n	8001ba2 <HAL_ADC_IRQHandler+0x2a2>
 8001b62:	bf00      	nop
 8001b64:	50000100 	.word	0x50000100
 8001b68:	50000300 	.word	0x50000300
 8001b6c:	50000700 	.word	0x50000700
 8001b70:	50000500 	.word	0x50000500
 8001b74:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8b      	ldr	r2, [pc, #556]	; (8001dac <HAL_ADC_IRQHandler+0x4ac>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d009      	beq.n	8001b96 <HAL_ADC_IRQHandler+0x296>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_ADC_IRQHandler+0x4b0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d002      	beq.n	8001b92 <HAL_ADC_IRQHandler+0x292>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_IRQHandler+0x29a>
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_ADC_IRQHandler+0x4b4>)
 8001b94:	e001      	b.n	8001b9a <HAL_ADC_IRQHandler+0x29a>
 8001b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d047      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x2c2>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03f      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d13a      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d133      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12e      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fcb8 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d11a      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bf8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c1e:	e00b      	b.n	8001c38 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fd45 	bl	80026c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2260      	movs	r2, #96	; 0x60
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d011      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x374>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8b4 	bl	8001dd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x3a4>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00d      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fd2b 	bl	80026f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x3d4>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fd1d 	bl	8002704 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d043      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x466>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d03e      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf4:	e021      	b.n	8001d3a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d015      	beq.n	8001d28 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x410>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_ADC_IRQHandler+0x4ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_IRQHandler+0x414>
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_ADC_IRQHandler+0x4b8>)
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_IRQHandler+0x416>
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_ADC_IRQHandler+0x4bc>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fb9a 	bl	8001450 <LL_ADC_GetMultiDMATransfer>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d22:	2301      	movs	r3, #1
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e008      	b.n	8001d3a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001d36:	2301      	movs	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d10e      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	f043 0202 	orr.w	r2, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f845 	bl	8001de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d018      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x4a2>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	f043 0208 	orr.w	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fc9d 	bl	80026dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	50000100 	.word	0x50000100
 8001db0:	50000500 	.word	0x50000500
 8001db4:	50000400 	.word	0x50000400
 8001db8:	50000300 	.word	0x50000300
 8001dbc:	50000700 	.word	0x50000700

08001dc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b0b6      	sub	sp, #216	; 0xd8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x24>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f000 bc13 	b.w	8002646 <HAL_ADC_ConfigChannel+0x84a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fb7e 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 83f3 	bne.w	8002620 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f7ff fa61 	bl	800130e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fb6c 	bl	800152e <LL_ADC_REG_IsConversionOngoing>
 8001e56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb78 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8001e64:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f040 81d9 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 81d4 	bne.w	8002224 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e84:	d10f      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7ff fa7b 	bl	800138c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fa0f 	bl	80012c2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ea4:	e00e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f7ff fa6a 	bl	800138c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f9ff 	bl	80012c2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d022      	beq.n	8001f2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6919      	ldr	r1, [r3, #16]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef6:	f7ff f959 	bl	80011ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6919      	ldr	r1, [r3, #16]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f7ff f9a5 	bl	8001256 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6919      	ldr	r1, [r3, #16]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7f1b      	ldrb	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d102      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x126>
 8001f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x128>
 8001f22:	2300      	movs	r3, #0
 8001f24:	461a      	mov	r2, r3
 8001f26:	f7ff f9b1 	bl	800128c <LL_ADC_SetOffsetSaturation>
 8001f2a:	e17b      	b.n	8002224 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f95e 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x15c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f953 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x19a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f948 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x1b2>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1e4>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f917 	bl	8001220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f8fb 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x222>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f8f0 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x260>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f8e5 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800203c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002050:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x278>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	e018      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x2aa>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002088:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800208c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e004      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800209c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d106      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	2101      	movs	r1, #1
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f8b4 	bl	8001220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2102      	movs	r1, #2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f898 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10a      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x2e8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2102      	movs	r1, #2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff f88d 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 021f 	and.w	r2, r3, #31
 80020e2:	e01e      	b.n	8002122 <HAL_ADC_ConfigChannel+0x326>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2102      	movs	r1, #2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff f882 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800210a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e004      	b.n	8002120 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_ConfigChannel+0x33e>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	e016      	b.n	8002168 <HAL_ADC_ConfigChannel+0x36c>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800214c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800214e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800215e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f853 	bl	8001220 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2103      	movs	r1, #3
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f837 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x3aa>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2103      	movs	r1, #3
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f82c 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	e017      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x3da>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2103      	movs	r1, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f821 	bl	80011f4 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x3f2>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	e011      	b.n	8002212 <HAL_ADC_ConfigChannel+0x416>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002212:	429a      	cmp	r2, r3
 8002214:	d106      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2200      	movs	r2, #0
 800221c:	2103      	movs	r1, #3
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fffe 	bl	8001220 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f96d 	bl	8001508 <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 813d 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	461a      	mov	r2, r3
 8002244:	f7ff f8ce 	bl	80013e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4aa2      	ldr	r2, [pc, #648]	; (80024d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 812e 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_ADC_ConfigChannel+0x480>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0e9b      	lsrs	r3, r3, #26
 800226a:	3301      	adds	r3, #1
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	2b09      	cmp	r3, #9
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e019      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x4b4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800228a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800228e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	bf94      	ite	ls
 80022aa:	2301      	movls	r3, #1
 80022ac:	2300      	movhi	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d079      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x4d4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ce:	e015      	b.n	80022fc <HAL_ADC_ConfigChannel+0x500>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022e8:	2320      	movs	r3, #32
 80022ea:	e003      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_ConfigChannel+0x520>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	e017      	b.n	800234c <HAL_ADC_ConfigChannel+0x550>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002334:	2320      	movs	r3, #32
 8002336:	e003      	b.n	8002340 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	ea42 0103 	orr.w	r1, r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x576>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	e018      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x5a8>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a4:	430b      	orrs	r3, r1
 80023a6:	e07e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x5c8>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	e015      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5f4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x614>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0e9b      	lsrs	r3, r3, #26
 8002402:	3301      	adds	r3, #1
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	e017      	b.n	8002440 <HAL_ADC_ConfigChannel+0x644>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	61fb      	str	r3, [r7, #28]
  return result;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002428:	2320      	movs	r3, #32
 800242a:	e003      	b.n	8002434 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_ADC_ConfigChannel+0x670>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0e9b      	lsrs	r3, r3, #26
 8002456:	3301      	adds	r3, #1
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1e      	subs	r3, #30
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800246a:	e01b      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x6a8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	613b      	str	r3, [r7, #16]
  return result;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	051b      	lsls	r3, r3, #20
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6892      	ldr	r2, [r2, #8]
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe ff6e 	bl	800138c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_ADC_ConfigChannel+0x6e0>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80be 	beq.w	800263a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c6:	d004      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x6d6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x6ec>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80024d4:	e009      	b.n	80024ea <HAL_ADC_ConfigChannel+0x6ee>
 80024d6:	bf00      	nop
 80024d8:	407f0000 	.word	0x407f0000
 80024dc:	80080000 	.word	0x80080000
 80024e0:	50000100 	.word	0x50000100
 80024e4:	50000300 	.word	0x50000300
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_ADC_ConfigChannel+0x854>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fe50 	bl	8001190 <LL_ADC_GetCommonPathInternalCh>
 80024f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a56      	ldr	r2, [pc, #344]	; (8002654 <HAL_ADC_ConfigChannel+0x858>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x70c>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a55      	ldr	r2, [pc, #340]	; (8002658 <HAL_ADC_ConfigChannel+0x85c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d13a      	bne.n	800257e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800250c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d134      	bne.n	800257e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800251c:	d005      	beq.n	800252a <HAL_ADC_ConfigChannel+0x72e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_ADC_ConfigChannel+0x860>)
 8002524:	4293      	cmp	r3, r2
 8002526:	f040 8085 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002532:	d004      	beq.n	800253e <HAL_ADC_ConfigChannel+0x742>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a49      	ldr	r2, [pc, #292]	; (8002660 <HAL_ADC_ConfigChannel+0x864>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x746>
 800253e:	4a49      	ldr	r2, [pc, #292]	; (8002664 <HAL_ADC_ConfigChannel+0x868>)
 8002540:	e000      	b.n	8002544 <HAL_ADC_ConfigChannel+0x748>
 8002542:	4a43      	ldr	r2, [pc, #268]	; (8002650 <HAL_ADC_ConfigChannel+0x854>)
 8002544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7fe fe0b 	bl	800116a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002554:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_ADC_ConfigChannel+0x86c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <HAL_ADC_ConfigChannel+0x870>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800256e:	e002      	b.n	8002576 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3b01      	subs	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800257c:	e05a      	b.n	8002634 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <HAL_ADC_ConfigChannel+0x874>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d125      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7d8>
 8002588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800258c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11f      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a31      	ldr	r2, [pc, #196]	; (8002660 <HAL_ADC_ConfigChannel+0x864>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d104      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x7ac>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a34      	ldr	r2, [pc, #208]	; (8002674 <HAL_ADC_ConfigChannel+0x878>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d047      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x7c0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2a      	ldr	r2, [pc, #168]	; (8002660 <HAL_ADC_ConfigChannel+0x864>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x7c4>
 80025bc:	4a29      	ldr	r2, [pc, #164]	; (8002664 <HAL_ADC_ConfigChannel+0x868>)
 80025be:	e000      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x7c6>
 80025c0:	4a23      	ldr	r2, [pc, #140]	; (8002650 <HAL_ADC_ConfigChannel+0x854>)
 80025c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe fdcc 	bl	800116a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d2:	e031      	b.n	8002638 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a27      	ldr	r2, [pc, #156]	; (8002678 <HAL_ADC_ConfigChannel+0x87c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12d      	bne.n	800263a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d127      	bne.n	800263a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_ADC_ConfigChannel+0x864>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_ConfigChannel+0x80c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <HAL_ADC_ConfigChannel+0x864>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x810>
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <HAL_ADC_ConfigChannel+0x868>)
 800260a:	e000      	b.n	800260e <HAL_ADC_ConfigChannel+0x812>
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_ADC_ConfigChannel+0x854>)
 800260e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f7fe fda6 	bl	800116a <LL_ADC_SetCommonPathInternalCh>
 800261e:	e00c      	b.n	800263a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002632:	e002      	b.n	800263a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002638:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002642:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002646:	4618      	mov	r0, r3
 8002648:	37d8      	adds	r7, #216	; 0xd8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	50000700 	.word	0x50000700
 8002654:	c3210000 	.word	0xc3210000
 8002658:	90c00010 	.word	0x90c00010
 800265c:	50000600 	.word	0x50000600
 8002660:	50000100 	.word	0x50000100
 8002664:	50000300 	.word	0x50000300
 8002668:	20000000 	.word	0x20000000
 800266c:	053e2d63 	.word	0x053e2d63
 8002670:	c7520000 	.word	0xc7520000
 8002674:	50000500 	.word	0x50000500
 8002678:	cb840000 	.word	0xcb840000

0800267c <LL_ADC_IsEnabled>:
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <LL_ADC_IsEnabled+0x18>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <LL_ADC_IsEnabled+0x1a>
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d101      	bne.n	80026ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b0a1      	sub	sp, #132	; 0x84
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e0e7      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002752:	2300      	movs	r3, #0
 8002754:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002756:	2300      	movs	r3, #0
 8002758:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002762:	d102      	bne.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002764:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	e009      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002774:	4b6d      	ldr	r3, [pc, #436]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	e001      	b.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10b      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0be      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff7f 	bl	80026a2 <LL_ADC_REG_IsConversionOngoing>
 80027a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff79 	bl	80026a2 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 80a0 	bne.w	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80027b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 809c 	bne.w	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c8:	d004      	beq.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a55      	ldr	r2, [pc, #340]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027d4:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027d6:	e000      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027d8:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d04b      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027f6:	035b      	lsls	r3, r3, #13
 80027f8:	430b      	orrs	r3, r1
 80027fa:	431a      	orrs	r2, r3
 80027fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002808:	d004      	beq.n	8002814 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a45      	ldr	r2, [pc, #276]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10f      	bne.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002814:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002818:	f7ff ff30 	bl	800267c <LL_ADC_IsEnabled>
 800281c:	4604      	mov	r4, r0
 800281e:	4841      	ldr	r0, [pc, #260]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002820:	f7ff ff2c 	bl	800267c <LL_ADC_IsEnabled>
 8002824:	4603      	mov	r3, r0
 8002826:	4323      	orrs	r3, r4
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	e012      	b.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002834:	483c      	ldr	r0, [pc, #240]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002836:	f7ff ff21 	bl	800267c <LL_ADC_IsEnabled>
 800283a:	4604      	mov	r4, r0
 800283c:	483b      	ldr	r0, [pc, #236]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800283e:	f7ff ff1d 	bl	800267c <LL_ADC_IsEnabled>
 8002842:	4603      	mov	r3, r0
 8002844:	431c      	orrs	r4, r3
 8002846:	483c      	ldr	r0, [pc, #240]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002848:	f7ff ff18 	bl	800267c <LL_ADC_IsEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	4323      	orrs	r3, r4
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d056      	beq.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800285e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002866:	f023 030f 	bic.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6811      	ldr	r1, [r2, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	430a      	orrs	r2, r1
 8002874:	431a      	orrs	r2, r3
 8002876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002878:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800287a:	e047      	b.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800287c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002890:	d004      	beq.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10f      	bne.n	80028bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800289c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028a0:	f7ff feec 	bl	800267c <LL_ADC_IsEnabled>
 80028a4:	4604      	mov	r4, r0
 80028a6:	481f      	ldr	r0, [pc, #124]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a8:	f7ff fee8 	bl	800267c <LL_ADC_IsEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4323      	orrs	r3, r4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e012      	b.n	80028e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028bc:	481a      	ldr	r0, [pc, #104]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028be:	f7ff fedd 	bl	800267c <LL_ADC_IsEnabled>
 80028c2:	4604      	mov	r4, r0
 80028c4:	4819      	ldr	r0, [pc, #100]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028c6:	f7ff fed9 	bl	800267c <LL_ADC_IsEnabled>
 80028ca:	4603      	mov	r3, r0
 80028cc:	431c      	orrs	r4, r3
 80028ce:	481a      	ldr	r0, [pc, #104]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028d0:	f7ff fed4 	bl	800267c <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4323      	orrs	r3, r4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f6:	e009      	b.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800290c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800291a:	4618      	mov	r0, r3
 800291c:	3784      	adds	r7, #132	; 0x84
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	50000100 	.word	0x50000100
 8002928:	50000400 	.word	0x50000400
 800292c:	50000500 	.word	0x50000500
 8002930:	50000300 	.word	0x50000300
 8002934:	50000700 	.word	0x50000700
 8002938:	50000600 	.word	0x50000600

0800293c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x44>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <__NVIC_GetPriorityGrouping+0x18>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	0a1b      	lsrs	r3, r3, #8
 800298e:	f003 0307 	and.w	r3, r3, #7
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	db0b      	blt.n	80029ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	f003 021f 	and.w	r2, r3, #31
 80029b8:	4907      	ldr	r1, [pc, #28]	; (80029d8 <__NVIC_EnableIRQ+0x38>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2001      	movs	r0, #1
 80029c2:	fa00 f202 	lsl.w	r2, r0, r2
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	e000e100 	.word	0xe000e100

080029dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	db0a      	blt.n	8002a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	490c      	ldr	r1, [pc, #48]	; (8002a28 <__NVIC_SetPriority+0x4c>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	440b      	add	r3, r1
 8002a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a04:	e00a      	b.n	8002a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4908      	ldr	r1, [pc, #32]	; (8002a2c <__NVIC_SetPriority+0x50>)
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3b04      	subs	r3, #4
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	440b      	add	r3, r1
 8002a1a:	761a      	strb	r2, [r3, #24]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f1c3 0307 	rsb	r3, r3, #7
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	bf28      	it	cs
 8002a4e:	2304      	movcs	r3, #4
 8002a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2b06      	cmp	r3, #6
 8002a58:	d902      	bls.n	8002a60 <NVIC_EncodePriority+0x30>
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3b03      	subs	r3, #3
 8002a5e:	e000      	b.n	8002a62 <NVIC_EncodePriority+0x32>
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	401a      	ands	r2, r3
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43d9      	mvns	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	4313      	orrs	r3, r2
         );
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa8:	d301      	bcc.n	8002aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00f      	b.n	8002ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <SysTick_Config+0x40>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002abc:	f7ff ff8e 	bl	80029dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x40>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff29 	bl	800293c <__NVIC_SetPriorityGrouping>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b00:	f7ff ff40 	bl	8002984 <__NVIC_GetPriorityGrouping>
 8002b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7ff ff90 	bl	8002a30 <NVIC_EncodePriority>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff5f 	bl	80029dc <__NVIC_SetPriority>
}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff33 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffa4 	bl	8002a98 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b6a:	e15a      	b.n	8002e22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 814c 	beq.w	8002e1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d005      	beq.n	8002b9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d130      	bne.n	8002bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0201 	and.w	r2, r3, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d017      	beq.n	8002c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d123      	bne.n	8002c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80a6 	beq.w	8002e1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6613      	str	r3, [r2, #96]	; 0x60
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_GPIO_Init+0x2e4>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce8:	4a56      	ldr	r2, [pc, #344]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d12:	d01f      	beq.n	8002d54 <HAL_GPIO_Init+0x1f8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a4c      	ldr	r2, [pc, #304]	; (8002e48 <HAL_GPIO_Init+0x2ec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d019      	beq.n	8002d50 <HAL_GPIO_Init+0x1f4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a4b      	ldr	r2, [pc, #300]	; (8002e4c <HAL_GPIO_Init+0x2f0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_GPIO_Init+0x1f0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4a      	ldr	r2, [pc, #296]	; (8002e50 <HAL_GPIO_Init+0x2f4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00d      	beq.n	8002d48 <HAL_GPIO_Init+0x1ec>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a49      	ldr	r2, [pc, #292]	; (8002e54 <HAL_GPIO_Init+0x2f8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d007      	beq.n	8002d44 <HAL_GPIO_Init+0x1e8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a48      	ldr	r2, [pc, #288]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_GPIO_Init+0x1e4>
 8002d3c:	2305      	movs	r3, #5
 8002d3e:	e00a      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d40:	2306      	movs	r3, #6
 8002d42:	e008      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d44:	2304      	movs	r3, #4
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e004      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e002      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_GPIO_Init+0x1fa>
 8002d54:	2300      	movs	r3, #0
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	f002 0203 	and.w	r2, r2, #3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d66:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_GPIO_Init+0x2e8>)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d98:	4a30      	ldr	r2, [pc, #192]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dc8:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f ae9d 	bne.w	8002b6c <HAL_GPIO_Init+0x10>
  }
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010000 	.word	0x40010000
 8002e48:	48000400 	.word	0x48000400
 8002e4c:	48000800 	.word	0x48000800
 8002e50:	48000c00 	.word	0x48000c00
 8002e54:	48001000 	.word	0x48001000
 8002e58:	48001400 	.word	0x48001400
 8002e5c:	40010400 	.word	0x40010400

08002e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f806 	bl	8002ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d141      	bne.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef2:	d131      	bne.n	8002f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002efa:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f0c:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2232      	movs	r2, #50	; 0x32
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a3f      	ldr	r2, [pc, #252]	; (800301c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2a:	e002      	b.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d102      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f2      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f52:	d158      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e057      	b.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f58:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5e:	4a2d      	ldr	r2, [pc, #180]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f68:	e04d      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f70:	d141      	bne.n	8002ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7e:	d131      	bne.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	4a23      	ldr	r2, [pc, #140]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f98:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2232      	movs	r2, #50	; 0x32
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb6:	e002      	b.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fca:	d102      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d112      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e011      	b.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ff4:	e007      	b.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003004:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	40007000 	.word	0x40007000
 8003018:	20000000 	.word	0x20000000
 800301c:	431bde83 	.word	0x431bde83

08003020 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800302a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800302e:	6093      	str	r3, [r2, #8]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e306      	b.n	8003660 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305e:	4b97      	ldr	r3, [pc, #604]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003068:	4b94      	ldr	r3, [pc, #592]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d102      	bne.n	800307e <HAL_RCC_OscConfig+0x3e>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d002      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b08      	cmp	r3, #8
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2e1      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a84      	ldr	r2, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7b      	ldr	r2, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b78      	ldr	r3, [pc, #480]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a77      	ldr	r2, [pc, #476]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b75      	ldr	r3, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a74      	ldr	r2, [pc, #464]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f818 	bl	800112c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe f814 	bl	800112c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e2a6      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003112:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f804 	bl	800112c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe f800 	bl	800112c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e292      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800313a:	4b60      	ldr	r3, [pc, #384]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003156:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003160:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d102      	bne.n	8003176 <HAL_RCC_OscConfig+0x136>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d002      	beq.n	800317c <HAL_RCC_OscConfig+0x13c>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11f      	bne.n	80031bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x154>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e265      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	4b49      	ldr	r3, [pc, #292]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	4946      	ldr	r1, [pc, #280]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <HAL_RCC_OscConfig+0x280>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd ff71 	bl	8001094 <HAL_InitTick>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d043      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e251      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d023      	beq.n	800320c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c4:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd ffac 	bl	800112c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd ffa8 	bl	800112c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e23a      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ea:	4b34      	ldr	r3, [pc, #208]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	061b      	lsls	r3, r3, #24
 8003204:	492d      	ldr	r1, [pc, #180]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	604b      	str	r3, [r1, #4]
 800320a:	e01a      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd ff88 	bl	800112c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fd ff84 	bl	800112c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e216      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x1e0>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d041      	beq.n	80032d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01c      	beq.n	8003290 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	4a17      	ldr	r2, [pc, #92]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003266:	f7fd ff61 	bl	800112c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326e:	f7fd ff5d 	bl	800112c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1ef      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ef      	beq.n	800326e <HAL_RCC_OscConfig+0x22e>
 800328e:	e020      	b.n	80032d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_OscConfig+0x27c>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fd ff44 	bl	800112c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a6:	e00d      	b.n	80032c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fd ff40 	bl	800112c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d906      	bls.n	80032c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1d2      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c4:	4b8c      	ldr	r3, [pc, #560]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ea      	bne.n	80032a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80a6 	beq.w	800342c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e0:	2300      	movs	r3, #0
 80032e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e4:	4b84      	ldr	r3, [pc, #528]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2b4>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b7f      	ldr	r3, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	4a7e      	ldr	r2, [pc, #504]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
 8003306:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	4b79      	ldr	r3, [pc, #484]	; (80034fc <HAL_RCC_OscConfig+0x4bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_RCC_OscConfig+0x4bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a75      	ldr	r2, [pc, #468]	; (80034fc <HAL_RCC_OscConfig+0x4bc>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fd fefd 	bl	800112c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fd fef9 	bl	800112c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e18b      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b6c      	ldr	r3, [pc, #432]	; (80034fc <HAL_RCC_OscConfig+0x4bc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_RCC_OscConfig+0x32e>
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800336c:	e024      	b.n	80033b8 <HAL_RCC_OscConfig+0x378>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b05      	cmp	r3, #5
 8003374:	d110      	bne.n	8003398 <HAL_RCC_OscConfig+0x358>
 8003376:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	4a5a      	ldr	r2, [pc, #360]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003396:	e00f      	b.n	80033b8 <HAL_RCC_OscConfig+0x378>
 8003398:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	4a56      	ldr	r2, [pc, #344]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fd feb4 	bl	800112c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd feb0 	bl	800112c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e140      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ed      	beq.n	80033c8 <HAL_RCC_OscConfig+0x388>
 80033ec:	e015      	b.n	800341a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fd fe9d 	bl	800112c <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fd fe99 	bl	800112c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	; 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e129      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800340c:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ed      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d01c      	beq.n	800347a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003446:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fd fe6c 	bl	800112c <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003458:	f7fd fe68 	bl	800112c <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0fa      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <HAL_RCC_OscConfig+0x418>
 8003478:	e01b      	b.n	80034b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 8003482:	f023 0301 	bic.w	r3, r3, #1
 8003486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fd fe4f 	bl	800112c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003492:	f7fd fe4b 	bl	800112c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0dd      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80034a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ef      	bne.n	8003492 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80d1 	beq.w	800365e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 030c 	and.w	r3, r3, #12
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f000 808b 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d15e      	bne.n	8003590 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <HAL_RCC_OscConfig+0x4b8>)
 80034d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034de:	f7fd fe25 	bl	800112c <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e4:	e00c      	b.n	8003500 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd fe21 	bl	800112c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d905      	bls.n	8003500 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0b3      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ec      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350c:	4b56      	ldr	r3, [pc, #344]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	4b56      	ldr	r3, [pc, #344]	; (800366c <HAL_RCC_OscConfig+0x62c>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6a11      	ldr	r1, [r2, #32]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351c:	3a01      	subs	r2, #1
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003526:	0212      	lsls	r2, r2, #8
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0552      	lsls	r2, r2, #21
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800353a:	0852      	lsrs	r2, r2, #1
 800353c:	3a01      	subs	r2, #1
 800353e:	0652      	lsls	r2, r2, #25
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003546:	06d2      	lsls	r2, r2, #27
 8003548:	430a      	orrs	r2, r1
 800354a:	4947      	ldr	r1, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 800354c:	4313      	orrs	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a44      	ldr	r2, [pc, #272]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a41      	ldr	r2, [pc, #260]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd fde0 	bl	800112c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fddc 	bl	800112c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e06e      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x530>
 800358e:	e066      	b.n	800365e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003590:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 8003596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a31      	ldr	r2, [pc, #196]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035a8:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 80035ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd fdb8 	bl	800112c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fd fdb4 	bl	800112c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e046      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x580>
 80035de:	e03e      	b.n	800365e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e039      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_OscConfig+0x628>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d12c      	bne.n	800365a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d123      	bne.n	800365a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11b      	bne.n	800365a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d113      	bne.n	800365a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d109      	bne.n	800365a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	019f800c 	.word	0x019f800c

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e11e      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b8e      	ldr	r3, [pc, #568]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	498c      	ldr	r1, [pc, #560]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b8a      	ldr	r3, [pc, #552]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e106      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d073      	beq.n	80037ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d129      	bne.n	8003720 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	4b81      	ldr	r3, [pc, #516]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0f4      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036dc:	f000 f99e 	bl	8003a1c <RCC_GetSysClockFreqFromPLLSource>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <HAL_RCC_ClockConfig+0x268>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d93f      	bls.n	800376a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ea:	4b7a      	ldr	r3, [pc, #488]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d033      	beq.n	800376a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d12f      	bne.n	800376a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003712:	4a70      	ldr	r2, [pc, #448]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e024      	b.n	800376a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d107      	bne.n	8003738 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0c6      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0be      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003748:	f000 f8ce 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800374c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4a61      	ldr	r2, [pc, #388]	; (80038d8 <HAL_RCC_ClockConfig+0x268>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d909      	bls.n	800376a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375e:	4a5d      	ldr	r2, [pc, #372]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003764:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4957      	ldr	r1, [pc, #348]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377c:	f7fd fcd6 	bl	800112c <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fd fcd2 	bl	800112c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e095      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d023      	beq.n	8003800 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a42      	ldr	r2, [pc, #264]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037dc:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037e4:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4936      	ldr	r1, [pc, #216]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
 80037fe:	e008      	b.n	8003812 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d105      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4a32      	ldr	r2, [pc, #200]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800380c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003810:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003812:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d21d      	bcs.n	800385c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 020f 	bic.w	r2, r3, #15
 8003828:	4929      	ldr	r1, [pc, #164]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003830:	f7fd fc7c 	bl	800112c <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fd fc78 	bl	800112c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e03b      	b.n	80038c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d1ed      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4917      	ldr	r1, [pc, #92]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003876:	4313      	orrs	r3, r2
 8003878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	490f      	ldr	r1, [pc, #60]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389a:	f000 f825 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800389e:	4602      	mov	r2, r0
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCC_ClockConfig+0x264>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	490c      	ldr	r1, [pc, #48]	; (80038dc <HAL_RCC_ClockConfig+0x26c>)
 80038ac:	5ccb      	ldrb	r3, [r1, r3]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	fa22 f303 	lsr.w	r3, r2, r3
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x270>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x274>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fbe8 	bl	8001094 <HAL_InitTick>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40021000 	.word	0x40021000
 80038d8:	04c4b400 	.word	0x04c4b400
 80038dc:	08005638 	.word	0x08005638
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038ee:	4b2c      	ldr	r3, [pc, #176]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	e047      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d102      	bne.n	8003912 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800390c:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	e03e      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d136      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	3301      	adds	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003946:	68d2      	ldr	r2, [r2, #12]
 8003948:	0a12      	lsrs	r2, r2, #8
 800394a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	617b      	str	r3, [r7, #20]
      break;
 8003954:	e00c      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003956:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4a10      	ldr	r2, [pc, #64]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0a12      	lsrs	r2, r2, #8
 8003964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0e5b      	lsrs	r3, r3, #25
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e001      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003990:	693b      	ldr	r3, [r7, #16]
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000
 80039a4:	00f42400 	.word	0x00f42400
 80039a8:	016e3600 	.word	0x016e3600

080039ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000000 	.word	0x20000000

080039c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039c8:	f7ff fff0 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08005648 	.word	0x08005648

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039f4:	f7ff ffda 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0adb      	lsrs	r3, r3, #11
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4904      	ldr	r1, [pc, #16]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08005648 	.word	0x08005648

08003a1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d10c      	bne.n	8003a5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a40:	4a17      	ldr	r2, [pc, #92]	; (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a4a:	68d2      	ldr	r2, [r2, #12]
 8003a4c:	0a12      	lsrs	r2, r2, #8
 8003a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
    break;
 8003a58:	e00c      	b.n	8003a74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a5a:	4a12      	ldr	r2, [pc, #72]	; (8003aa4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	0a12      	lsrs	r2, r2, #8
 8003a68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    break;
 8003a72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0e5b      	lsrs	r3, r3, #25
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	016e3600 	.word	0x016e3600
 8003aa4:	00f42400 	.word	0x00f42400

08003aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8098 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aca:	4b43      	ldr	r3, [pc, #268]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	4a3f      	ldr	r2, [pc, #252]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aee:	2301      	movs	r3, #1
 8003af0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af2:	4b3a      	ldr	r3, [pc, #232]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a39      	ldr	r2, [pc, #228]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fb15 	bl	800112c <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b04:	e009      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fd fb11 	bl	800112c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d902      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	74fb      	strb	r3, [r7, #19]
        break;
 8003b18:	e005      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ef      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b26:	7cfb      	ldrb	r3, [r7, #19]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d159      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01e      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d019      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b54:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fad1 	bl	800112c <HAL_GetTick>
 8003b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd facd 	bl	800112c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d902      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba4:	e006      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ec      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bd0:	e008      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	74bb      	strb	r3, [r7, #18]
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be4:	7c7b      	ldrb	r3, [r7, #17]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4ba7      	ldr	r3, [pc, #668]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4aa6      	ldr	r2, [pc, #664]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c02:	4ba1      	ldr	r3, [pc, #644]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f023 0203 	bic.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	499d      	ldr	r1, [pc, #628]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c24:	4b98      	ldr	r3, [pc, #608]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f023 020c 	bic.w	r2, r3, #12
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4995      	ldr	r1, [pc, #596]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c46:	4b90      	ldr	r3, [pc, #576]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	498c      	ldr	r1, [pc, #560]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c68:	4b87      	ldr	r3, [pc, #540]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4984      	ldr	r1, [pc, #528]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0310 	and.w	r3, r3, #16
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c8a:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	497b      	ldr	r1, [pc, #492]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cac:	4b76      	ldr	r3, [pc, #472]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	4973      	ldr	r1, [pc, #460]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cce:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	496a      	ldr	r1, [pc, #424]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cf0:	4b65      	ldr	r3, [pc, #404]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4962      	ldr	r1, [pc, #392]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d12:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	4959      	ldr	r1, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d34:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	4951      	ldr	r1, [pc, #324]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d56:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	4948      	ldr	r1, [pc, #288]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4940      	ldr	r1, [pc, #256]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d105      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	4932      	ldr	r1, [pc, #200]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d105      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4924      	ldr	r1, [pc, #144]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e06:	d105      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	4916      	ldr	r1, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3e:	d105      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d019      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4908      	ldr	r1, [pc, #32]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a02      	ldr	r2, [pc, #8]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e82:	60d3      	str	r3, [r2, #12]
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4926      	ldr	r1, [pc, #152]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	4918      	ldr	r1, [pc, #96]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d015      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	490a      	ldr	r1, [pc, #40]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e049      	b.n	8003fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc ff4c 	bl	8000e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4610      	mov	r0, r2
 8003f84:	f000 fafc 	bl	8004580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d122      	bne.n	800404e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d11b      	bne.n	800404e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0202 	mvn.w	r2, #2
 800401e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa85 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 800403a:	e005      	b.n	8004048 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa77 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa88 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b04      	cmp	r3, #4
 800405a:	d122      	bne.n	80040a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b04      	cmp	r3, #4
 8004068:	d11b      	bne.n	80040a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f06f 0204 	mvn.w	r2, #4
 8004072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa5b 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 800408e:	e005      	b.n	800409c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fa4d 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa5e 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d122      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d11b      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0208 	mvn.w	r2, #8
 80040c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2204      	movs	r2, #4
 80040cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa31 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 80040e2:	e005      	b.n	80040f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fa23 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fa34 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	d122      	bne.n	800414a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d11b      	bne.n	800414a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0210 	mvn.w	r2, #16
 800411a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2208      	movs	r2, #8
 8004120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa07 	bl	8004544 <HAL_TIM_IC_CaptureCallback>
 8004136:	e005      	b.n	8004144 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f9f9 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa0a 	bl	8004558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10e      	bne.n	8004176 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0201 	mvn.w	r2, #1
 800416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f9d3 	bl	800451c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b80      	cmp	r3, #128	; 0x80
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fbd3 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b0:	d10e      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d107      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fbc6 	bl	800495c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9b8 	bl	800456c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b20      	cmp	r3, #32
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0220 	mvn.w	r2, #32
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb86 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004236:	d10f      	bne.n	8004258 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fb8c 	bl	8004970 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004266:	d10f      	bne.n	8004288 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fb7e 	bl	8004984 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004296:	d10f      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb70 	bl	8004998 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042c6:	d10f      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fb62 	bl	80049ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e8:	bf00      	nop
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0f6      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x20a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800432a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6f      	ldr	r2, [pc, #444]	; (8004504 <HAL_TIM_ConfigClockSource+0x214>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f000 80c1 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800434c:	4a6d      	ldr	r2, [pc, #436]	; (8004504 <HAL_TIM_ConfigClockSource+0x214>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f200 80c6 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004354:	4a6c      	ldr	r2, [pc, #432]	; (8004508 <HAL_TIM_ConfigClockSource+0x218>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f000 80b9 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800435c:	4a6a      	ldr	r2, [pc, #424]	; (8004508 <HAL_TIM_ConfigClockSource+0x218>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f200 80be 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004364:	4a69      	ldr	r2, [pc, #420]	; (800450c <HAL_TIM_ConfigClockSource+0x21c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 80b1 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800436c:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_TIM_ConfigClockSource+0x21c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f200 80b6 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004374:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_TIM_ConfigClockSource+0x220>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 80a9 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800437c:	4a64      	ldr	r2, [pc, #400]	; (8004510 <HAL_TIM_ConfigClockSource+0x220>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f200 80ae 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <HAL_TIM_ConfigClockSource+0x224>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f000 80a1 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800438c:	4a61      	ldr	r2, [pc, #388]	; (8004514 <HAL_TIM_ConfigClockSource+0x224>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f200 80a6 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004394:	4a60      	ldr	r2, [pc, #384]	; (8004518 <HAL_TIM_ConfigClockSource+0x228>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f000 8099 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_TIM_ConfigClockSource+0x228>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f200 809e 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043a8:	f000 8091 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 80043ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80043b0:	f200 8096 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b8:	f000 8089 	beq.w	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	f200 808e 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d03e      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0x158>
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ce:	f200 8087 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d6:	f000 8086 	beq.w	80044e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d87f      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e0:	2b70      	cmp	r3, #112	; 0x70
 80043e2:	d01a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x12a>
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d87b      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e8:	2b60      	cmp	r3, #96	; 0x60
 80043ea:	d050      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x19e>
 80043ec:	2b60      	cmp	r3, #96	; 0x60
 80043ee:	d877      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f0:	2b50      	cmp	r3, #80	; 0x50
 80043f2:	d03c      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x17e>
 80043f4:	2b50      	cmp	r3, #80	; 0x50
 80043f6:	d873      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d058      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x1be>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d86f      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d064      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d86b      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d060      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 800440c:	2b20      	cmp	r3, #32
 800440e:	d867      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05c      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 8004414:	2b10      	cmp	r3, #16
 8004416:	d05a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x1de>
 8004418:	e062      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6899      	ldr	r1, [r3, #8]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f000 f9cd 	bl	80047c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800443c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	609a      	str	r2, [r3, #8]
      break;
 8004446:	e04f      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f000 f9b6 	bl	80047c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800446a:	609a      	str	r2, [r3, #8]
      break;
 800446c:	e03c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f928 	bl	80046d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2150      	movs	r1, #80	; 0x50
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f981 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 800448c:	e02c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 f947 	bl	800472e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2160      	movs	r1, #96	; 0x60
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f971 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80044ac:	e01c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 f908 	bl	80046d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 f961 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80044cc:	e00c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f000 f958 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80044de:	e003      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e000      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80044e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	00100070 	.word	0x00100070
 8004508:	00100060 	.word	0x00100060
 800450c:	00100050 	.word	0x00100050
 8004510:	00100040 	.word	0x00100040
 8004514:	00100030 	.word	0x00100030
 8004518:	00100020 	.word	0x00100020

0800451c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a46      	ldr	r2, [pc, #280]	; (80046ac <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d017      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <TIM_Base_SetConfig+0x130>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a42      	ldr	r2, [pc, #264]	; (80046b4 <TIM_Base_SetConfig+0x134>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <TIM_Base_SetConfig+0x138>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a40      	ldr	r2, [pc, #256]	; (80046bc <TIM_Base_SetConfig+0x13c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x48>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3f      	ldr	r2, [pc, #252]	; (80046c0 <TIM_Base_SetConfig+0x140>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a33      	ldr	r2, [pc, #204]	; (80046ac <TIM_Base_SetConfig+0x12c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d023      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d01f      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <TIM_Base_SetConfig+0x130>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01b      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <TIM_Base_SetConfig+0x134>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d017      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2e      	ldr	r2, [pc, #184]	; (80046b8 <TIM_Base_SetConfig+0x138>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2d      	ldr	r2, [pc, #180]	; (80046bc <TIM_Base_SetConfig+0x13c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <TIM_Base_SetConfig+0x144>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <TIM_Base_SetConfig+0x148>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <TIM_Base_SetConfig+0x14c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0xaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <TIM_Base_SetConfig+0x140>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <TIM_Base_SetConfig+0x12c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <TIM_Base_SetConfig+0x110>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_Base_SetConfig+0x13c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00f      	beq.n	8004690 <TIM_Base_SetConfig+0x110>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <TIM_Base_SetConfig+0x144>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_Base_SetConfig+0x110>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <TIM_Base_SetConfig+0x148>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_Base_SetConfig+0x110>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <TIM_Base_SetConfig+0x14c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_Base_SetConfig+0x110>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a0d      	ldr	r2, [pc, #52]	; (80046c0 <TIM_Base_SetConfig+0x140>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d103      	bne.n	8004698 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	615a      	str	r2, [r3, #20]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800
 80046b8:	40000c00 	.word	0x40000c00
 80046bc:	40013400 	.word	0x40013400
 80046c0:	40015000 	.word	0x40015000
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40014400 	.word	0x40014400
 80046cc:	40014800 	.word	0x40014800

080046d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 030a 	bic.w	r3, r3, #10
 800470c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0210 	bic.w	r2, r3, #16
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f043 0307 	orr.w	r3, r3, #7
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	021a      	lsls	r2, r3, #8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800481c:	2302      	movs	r3, #2
 800481e:	e074      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a34      	ldr	r2, [pc, #208]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a33      	ldr	r2, [pc, #204]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a31      	ldr	r2, [pc, #196]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d108      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a0:	d01d      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40015000 	.word	0x40015000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e042      	b.n	8004a58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7fc fa9b 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2224      	movs	r2, #36	; 0x24
 80049ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f82c 	bl	8004a60 <UART_SetConfig>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e022      	b.n	8004a58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fb1c 	bl	8005058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fba3 	bl	800519c <UART_CheckIdleState>
 8004a56:	4603      	mov	r3, r0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b08c      	sub	sp, #48	; 0x30
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4baa      	ldr	r3, [pc, #680]	; (8004d38 <UART_SetConfig+0x2d8>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a9f      	ldr	r2, [pc, #636]	; (8004d3c <UART_SetConfig+0x2dc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ad6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f023 010f 	bic.w	r1, r3, #15
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a90      	ldr	r2, [pc, #576]	; (8004d40 <UART_SetConfig+0x2e0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d125      	bne.n	8004b50 <UART_SetConfig+0xf0>
 8004b04:	4b8f      	ldr	r3, [pc, #572]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d81a      	bhi.n	8004b48 <UART_SetConfig+0xe8>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0xb8>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e116      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e112      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	e10e      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e10a      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e106      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7c      	ldr	r2, [pc, #496]	; (8004d48 <UART_SetConfig+0x2e8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d138      	bne.n	8004bcc <UART_SetConfig+0x16c>
 8004b5a:	4b7a      	ldr	r3, [pc, #488]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	d82d      	bhi.n	8004bc4 <UART_SetConfig+0x164>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <UART_SetConfig+0x110>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004bc5 	.word	0x08004bc5
 8004b78:	08004bc5 	.word	0x08004bc5
 8004b7c:	08004bc5 	.word	0x08004bc5
 8004b80:	08004bb5 	.word	0x08004bb5
 8004b84:	08004bc5 	.word	0x08004bc5
 8004b88:	08004bc5 	.word	0x08004bc5
 8004b8c:	08004bc5 	.word	0x08004bc5
 8004b90:	08004bad 	.word	0x08004bad
 8004b94:	08004bc5 	.word	0x08004bc5
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bc5 	.word	0x08004bc5
 8004ba0:	08004bbd 	.word	0x08004bbd
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e0d8      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004bac:	2302      	movs	r3, #2
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e0d4      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bba:	e0d0      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e0cc      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bca:	e0c8      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <UART_SetConfig+0x2ec>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d125      	bne.n	8004c22 <UART_SetConfig+0x1c2>
 8004bd6:	4b5b      	ldr	r3, [pc, #364]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d016      	beq.n	8004c12 <UART_SetConfig+0x1b2>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d818      	bhi.n	8004c1a <UART_SetConfig+0x1ba>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d00a      	beq.n	8004c02 <UART_SetConfig+0x1a2>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d814      	bhi.n	8004c1a <UART_SetConfig+0x1ba>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <UART_SetConfig+0x19a>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d008      	beq.n	8004c0a <UART_SetConfig+0x1aa>
 8004bf8:	e00f      	b.n	8004c1a <UART_SetConfig+0x1ba>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c00:	e0ad      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c02:	2302      	movs	r3, #2
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c08:	e0a9      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c0a:	2304      	movs	r3, #4
 8004c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c10:	e0a5      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c12:	2308      	movs	r3, #8
 8004c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c18:	e0a1      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c20:	e09d      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a4a      	ldr	r2, [pc, #296]	; (8004d50 <UART_SetConfig+0x2f0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d125      	bne.n	8004c78 <UART_SetConfig+0x218>
 8004c2c:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c36:	2bc0      	cmp	r3, #192	; 0xc0
 8004c38:	d016      	beq.n	8004c68 <UART_SetConfig+0x208>
 8004c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c3c:	d818      	bhi.n	8004c70 <UART_SetConfig+0x210>
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d00a      	beq.n	8004c58 <UART_SetConfig+0x1f8>
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d814      	bhi.n	8004c70 <UART_SetConfig+0x210>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <UART_SetConfig+0x1f0>
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d008      	beq.n	8004c60 <UART_SetConfig+0x200>
 8004c4e:	e00f      	b.n	8004c70 <UART_SetConfig+0x210>
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e082      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e07e      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c66:	e07a      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e076      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e072      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <UART_SetConfig+0x2f4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d12a      	bne.n	8004cd8 <UART_SetConfig+0x278>
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c90:	d01a      	beq.n	8004cc8 <UART_SetConfig+0x268>
 8004c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c96:	d81b      	bhi.n	8004cd0 <UART_SetConfig+0x270>
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9c:	d00c      	beq.n	8004cb8 <UART_SetConfig+0x258>
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca2:	d815      	bhi.n	8004cd0 <UART_SetConfig+0x270>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <UART_SetConfig+0x250>
 8004ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cac:	d008      	beq.n	8004cc0 <UART_SetConfig+0x260>
 8004cae:	e00f      	b.n	8004cd0 <UART_SetConfig+0x270>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e052      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e04e      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cc6:	e04a      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004cc8:	2308      	movs	r3, #8
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cce:	e046      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cd6:	e042      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <UART_SetConfig+0x2dc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d13a      	bne.n	8004d58 <UART_SetConfig+0x2f8>
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <UART_SetConfig+0x2e4>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cf0:	d01a      	beq.n	8004d28 <UART_SetConfig+0x2c8>
 8004cf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cf6:	d81b      	bhi.n	8004d30 <UART_SetConfig+0x2d0>
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d00c      	beq.n	8004d18 <UART_SetConfig+0x2b8>
 8004cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d02:	d815      	bhi.n	8004d30 <UART_SetConfig+0x2d0>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <UART_SetConfig+0x2b0>
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0c:	d008      	beq.n	8004d20 <UART_SetConfig+0x2c0>
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x2d0>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e022      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e01e      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e01a      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e016      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e012      	b.n	8004d5e <UART_SetConfig+0x2fe>
 8004d38:	cfff69f3 	.word	0xcfff69f3
 8004d3c:	40008000 	.word	0x40008000
 8004d40:	40013800 	.word	0x40013800
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	40004800 	.word	0x40004800
 8004d50:	40004c00 	.word	0x40004c00
 8004d54:	40005000 	.word	0x40005000
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4aae      	ldr	r2, [pc, #696]	; (800501c <UART_SetConfig+0x5bc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	f040 8097 	bne.w	8004e98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d823      	bhi.n	8004dba <UART_SetConfig+0x35a>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <UART_SetConfig+0x318>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004dbb 	.word	0x08004dbb
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dbb 	.word	0x08004dbb
 8004d88:	08004dab 	.word	0x08004dab
 8004d8c:	08004dbb 	.word	0x08004dbb
 8004d90:	08004dbb 	.word	0x08004dbb
 8004d94:	08004dbb 	.word	0x08004dbb
 8004d98:	08004db3 	.word	0x08004db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d9c:	f7fe fe12 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004da2:	e010      	b.n	8004dc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da4:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <UART_SetConfig+0x5c0>)
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004da8:	e00d      	b.n	8004dc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004daa:	f7fe fd9d 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004db0:	e009      	b.n	8004dc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004db8:	e005      	b.n	8004dc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8130 	beq.w	800502e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	4a94      	ldr	r2, [pc, #592]	; (8005024 <UART_SetConfig+0x5c4>)
 8004dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d305      	bcc.n	8004dfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d903      	bls.n	8004e06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e04:	e113      	b.n	800502e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2200      	movs	r2, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
 8004e0c:	60fa      	str	r2, [r7, #12]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	4a84      	ldr	r2, [pc, #528]	; (8005024 <UART_SetConfig+0x5c4>)
 8004e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e28:	f7fb f9f6 	bl	8000218 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4610      	mov	r0, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	020b      	lsls	r3, r1, #8
 8004e3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e42:	0202      	lsls	r2, r0, #8
 8004e44:	6979      	ldr	r1, [r7, #20]
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	0849      	lsrs	r1, r1, #1
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	4605      	mov	r5, r0
 8004e50:	eb12 0804 	adds.w	r8, r2, r4
 8004e54:	eb43 0905 	adc.w	r9, r3, r5
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	469a      	mov	sl, r3
 8004e60:	4693      	mov	fp, r2
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	4640      	mov	r0, r8
 8004e68:	4649      	mov	r1, r9
 8004e6a:	f7fb f9d5 	bl	8000218 <__aeabi_uldivmod>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4613      	mov	r3, r2
 8004e74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e7c:	d308      	bcc.n	8004e90 <UART_SetConfig+0x430>
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e84:	d204      	bcs.n	8004e90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a3a      	ldr	r2, [r7, #32]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e0ce      	b.n	800502e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e96:	e0ca      	b.n	800502e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	d166      	bne.n	8004f70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ea2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d827      	bhi.n	8004efa <UART_SetConfig+0x49a>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0x450>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004edd 	.word	0x08004edd
 8004eb8:	08004ee5 	.word	0x08004ee5
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004eeb 	.word	0x08004eeb
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004efb 	.word	0x08004efb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fe fd76 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eda:	e014      	b.n	8004f06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004edc:	f7fe fd88 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <UART_SetConfig+0x5c0>)
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fcfd 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8090 	beq.w	800502e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	4a44      	ldr	r2, [pc, #272]	; (8005024 <UART_SetConfig+0x5c4>)
 8004f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d916      	bls.n	8004f68 <UART_SetConfig+0x508>
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d212      	bcs.n	8004f68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f023 030f 	bic.w	r3, r3, #15
 8004f4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	8bfb      	ldrh	r3, [r7, #30]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	8bfa      	ldrh	r2, [r7, #30]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	e062      	b.n	800502e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f6e:	e05e      	b.n	800502e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d828      	bhi.n	8004fca <UART_SetConfig+0x56a>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x520>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fad 	.word	0x08004fad
 8004f88:	08004fb5 	.word	0x08004fb5
 8004f8c:	08004fcb 	.word	0x08004fcb
 8004f90:	08004fbb 	.word	0x08004fbb
 8004f94:	08004fcb 	.word	0x08004fcb
 8004f98:	08004fcb 	.word	0x08004fcb
 8004f9c:	08004fcb 	.word	0x08004fcb
 8004fa0:	08004fc3 	.word	0x08004fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa4:	f7fe fd0e 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8004fa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004faa:	e014      	b.n	8004fd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fac:	f7fe fd20 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fb2:	e010      	b.n	8004fd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <UART_SetConfig+0x5c0>)
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb8:	e00d      	b.n	8004fd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fba:	f7fe fc95 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc0:	e009      	b.n	8004fd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc8:	e005      	b.n	8004fd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d028      	beq.n	800502e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4a10      	ldr	r2, [pc, #64]	; (8005024 <UART_SetConfig+0x5c4>)
 8004fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	441a      	add	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d910      	bls.n	8005028 <UART_SetConfig+0x5c8>
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d20c      	bcs.n	8005028 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	b29a      	uxth	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	e009      	b.n	800502e <UART_SetConfig+0x5ce>
 800501a:	bf00      	nop
 800501c:	40008000 	.word	0x40008000
 8005020:	00f42400 	.word	0x00f42400
 8005024:	08005650 	.word	0x08005650
      }
      else
      {
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2201      	movs	r2, #1
 8005032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2201      	movs	r2, #1
 800503a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800504a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800504e:	4618      	mov	r0, r3
 8005050:	3730      	adds	r7, #48	; 0x30
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01a      	beq.n	800516e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005156:	d10a      	bne.n	800516e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051ac:	f7fb ffbe 	bl	800112c <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d10e      	bne.n	80051de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f82f 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e025      	b.n	800522a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d10e      	bne.n	800520a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f819 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b09c      	sub	sp, #112	; 0x70
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	e0a9      	b.n	8005398 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800524a:	f000 80a5 	beq.w	8005398 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fb ff6d 	bl	800112c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <UART_WaitOnFlagUntilTimeout+0x32>
 800525e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005260:	2b00      	cmp	r3, #0
 8005262:	d140      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005278:	667b      	str	r3, [r7, #100]	; 0x64
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005284:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	663b      	str	r3, [r7, #96]	; 0x60
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e069      	b.n	80053ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d051      	beq.n	8005398 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d149      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e6      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	613b      	str	r3, [r7, #16]
   return(result);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 0301 	bic.w	r3, r3, #1
 8005356:	66bb      	str	r3, [r7, #104]	; 0x68
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005360:	623a      	str	r2, [r7, #32]
 8005362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	69f9      	ldr	r1, [r7, #28]
 8005366:	6a3a      	ldr	r2, [r7, #32]
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	61bb      	str	r3, [r7, #24]
   return(result);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e010      	b.n	80053ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4013      	ands	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f43f af46 	beq.w	8005244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3770      	adds	r7, #112	; 0x70
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e027      	b.n	8005428 <HAL_UARTEx_DisableFifoMode+0x66>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005406:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005448:	2302      	movs	r3, #2
 800544a:	e02d      	b.n	80054a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f84f 	bl	800552c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e02d      	b.n	8005524 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f811 	bl	800552c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005538:	2b00      	cmp	r3, #0
 800553a:	d108      	bne.n	800554e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800554c:	e031      	b.n	80055b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800554e:	2308      	movs	r3, #8
 8005550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005552:	2308      	movs	r3, #8
 8005554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	0e5b      	lsrs	r3, r3, #25
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	0f5b      	lsrs	r3, r3, #29
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	7b3a      	ldrb	r2, [r7, #12]
 800557a:	4911      	ldr	r1, [pc, #68]	; (80055c0 <UARTEx_SetNbDataToProcess+0x94>)
 800557c:	5c8a      	ldrb	r2, [r1, r2]
 800557e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005582:	7b3a      	ldrb	r2, [r7, #12]
 8005584:	490f      	ldr	r1, [pc, #60]	; (80055c4 <UARTEx_SetNbDataToProcess+0x98>)
 8005586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005588:	fb93 f3f2 	sdiv	r3, r3, r2
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	7b7a      	ldrb	r2, [r7, #13]
 8005598:	4909      	ldr	r1, [pc, #36]	; (80055c0 <UARTEx_SetNbDataToProcess+0x94>)
 800559a:	5c8a      	ldrb	r2, [r1, r2]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055a0:	7b7a      	ldrb	r2, [r7, #13]
 80055a2:	4908      	ldr	r1, [pc, #32]	; (80055c4 <UARTEx_SetNbDataToProcess+0x98>)
 80055a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	08005668 	.word	0x08005668
 80055c4:	08005670 	.word	0x08005670

080055c8 <__libc_init_array>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4d0d      	ldr	r5, [pc, #52]	; (8005600 <__libc_init_array+0x38>)
 80055cc:	4c0d      	ldr	r4, [pc, #52]	; (8005604 <__libc_init_array+0x3c>)
 80055ce:	1b64      	subs	r4, r4, r5
 80055d0:	10a4      	asrs	r4, r4, #2
 80055d2:	2600      	movs	r6, #0
 80055d4:	42a6      	cmp	r6, r4
 80055d6:	d109      	bne.n	80055ec <__libc_init_array+0x24>
 80055d8:	4d0b      	ldr	r5, [pc, #44]	; (8005608 <__libc_init_array+0x40>)
 80055da:	4c0c      	ldr	r4, [pc, #48]	; (800560c <__libc_init_array+0x44>)
 80055dc:	f000 f820 	bl	8005620 <_init>
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	2600      	movs	r6, #0
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	d105      	bne.n	80055f6 <__libc_init_array+0x2e>
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f0:	4798      	blx	r3
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7ee      	b.n	80055d4 <__libc_init_array+0xc>
 80055f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fa:	4798      	blx	r3
 80055fc:	3601      	adds	r6, #1
 80055fe:	e7f2      	b.n	80055e6 <__libc_init_array+0x1e>
 8005600:	08005680 	.word	0x08005680
 8005604:	08005680 	.word	0x08005680
 8005608:	08005680 	.word	0x08005680
 800560c:	08005684 	.word	0x08005684

08005610 <memset>:
 8005610:	4402      	add	r2, r0
 8005612:	4603      	mov	r3, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
